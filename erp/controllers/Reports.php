<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Reports extends MY_Controller
{
    function __construct()
    {
        parent::__construct();

        if (!$this->loggedIn) {
            $this->session->set_userdata('requested_page', $this->uri->uri_string());
            redirect('login');
        }
        $this->lang->load('reports', $this->Settings->language);
		$this->lang->load('accounts', $this->Settings->language);
        $this->load->library('form_validation');
        $this->load->model('reports_model');
		$this->load->model('products_model');
		$this->load->model('sales_model');
		$this->load->model('companies_model');
		$this->load->model('accounts_model');
		$this->load->model('site');
        if(!$this->Owner && !$this->Admin) {
            $gp = $this->site->checkPermissions();
            $this->permission = $gp[0];
            $this->permission[] = $gp[0];
        } else {
            $this->permission[] = NULL;
        }
    }

    function index()
    {
        $this->erp->checkPermissions('index',NULL,'chart_report');
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['monthly_sales'] = $this->reports_model->getChartData();
        $this->data['stock'] = $this->reports_model->getStockValue();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
        $this->page_construct('reports/index', $meta, $this->data);

    }

	public function getExpenses()
    {
        $this->erp->checkPermissions('index');
		if ($this->input->get('user')) {
            $user_query = $this->input->get('user');
        } else {
            $user_query = NULL;
        }
        if ($this->input->get('reference_no')){
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('biller')){
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
		if ($this->input->get('note')) {
            $note = $this->input->get('note');
        } else {
            $note = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
		if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
		
        $detail_link = anchor('purchases/expense_note/$1', '<i class="fa fa-file-text-o"></i> ' . lang('expense_note'), 'data-toggle="modal" data-target="#myModal2"');
         

        $user_biller_id = $this->session->userdata('biller_id');
        $this->load->library('datatables');

        $this->datatables
            ->select($this->db->dbprefix('expenses') . ".id as id, expenses.date, expenses.reference, gl_trans.narrative  ,expenses.amount ,expenses.note, CONCAT(" . $this->db->dbprefix('users') . ".first_name, ' ', " . $this->db->dbprefix('users') . ".last_name) as user, attachment", false)
            ->from('expenses')
            ->join('users', 'users.id=expenses.created_by', 'left')
            ->join('gl_trans', 'gl_trans.account_code = expenses.account_code', 'left')
            ->where('erp_expenses.customer_id',$customer)
            ->group_by('expenses.id')
            ->add_column("Action", $detail_link, 'code');

        if($user_biller_id != NULL){
            $this->db->where('users.biller_id', $user_biller_id);
        }

        if (!$this->Owner && !$this->Admin) {
            $this->datatables->where('expenses.created_by', $this->session->userdata('user_id'));
        }
		if ($user_query) {
			$this->datatables->where('expenses.created_by', $user_query);
		}
		if ($reference_no) {
			$this->datatables->where('expenses.reference', $reference_no);
		}
		if ($biller) {
			$this->datatables->where('expenses.biller_id', $biller);
		}
		if ($note) {
			$this->datatables->where("expenses.note LIKE '%" . $note . "%'");
		}
		if ($start_date) {
			$this->datatables->where($this->db->dbprefix('expenses').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
		} 
		
        echo $this->datatables->generate();
    }
	function profit_chart()
    {
        $this->erp->checkPermissions('profit',NULL,'chart_report');
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['stock'] = $this->reports_model->getStockValue();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
		
		if($this->input->post('biller')){
			$biller_id = $this->input->post('biller');
		}else{
			$biller_id = null;
		}
		if($this->input->post('year')){
			$year = $this->input->post('year');
		}else{
			$year = null;
		}
		$this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['monthly_incomes'] = $this->reports_model->getChartDataProfit($biller_id, $year);
		$this->page_construct('reports/profit_chart', $meta, $this->data);
    }

    function warehouse_stock($warehouse = NULL)
    {
        $this->erp->checkPermissions('warehouse_stock',NULL,'chart_report');
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }
        $this->data['stock'] = $warehouse ? $this->reports_model->getWarehouseStockValue($warehouse) : $this->reports_model->getStockValue();
        $this->data['warehouses'] = $this->reports_model->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse'] = $warehouse ? $this->site->getWarehouseByID($warehouse) : NULL;
        $this->data['totals'] = $this->reports_model->getWarehouseTotals($warehouse);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
        $this->page_construct('reports/warehouse_stock', $meta, $this->data);

    }
	
	function category_stock($warehouse = NULL)
    {
        $this->erp->checkPermissions('category_stock',NULL,'chart_report');
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['customers'] = $this->site->getCustomers();
		$this->form_validation->set_rules('user_post', lang("user_post"), 'required');
		
        if ($this->form_validation->run() == true) {
			$biller = $this->input->post('biller');
			$customer = $this->input->post('customer');
			$start_date = $this->input->post('start_date');
			$end_date = $this->input->post('end_date');
			$this->data['stocks'] = $warehouse ? $this->reports_model->getCategoryStockValueById($warehouse,$biller,$customer,$start_date,$end_date) : $this->reports_model->getCategoryStockValue($biller,$customer,$start_date,$end_date);
		}else{
			$this->data['stocks'] = $warehouse ? $this->reports_model->getCategoryStockValueById($warehouse) : $this->reports_model->getCategoryStockValue();
		}
        $this->data['warehouses'] = $this->reports_model->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse'] = $warehouse ? $this->site->getWarehouseByID($warehouse) : NULL;
        $this->data['totals'] = $this->reports_model->getWarehouseTotals($warehouse);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
        $this->page_construct('reports/category_stock', $meta, $this->data);

    }
	
	function cash_chart($accountcode = NULL)
    { 
		$this->erp->checkPermissions('cash_analysis',NULL,'chart_report');
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('accountcode')) {
            $accountcode = $this->input->get('accountcode');
        }
        $this->data['charts'] = $accountcode ? $this->reports_model->getChartValueById($accountcode) : $this->reports_model->getChartValue();
        $this->data['warehouses'] = $this->reports_model->getAllWarehouses();
        $this->data['warehouse_id'] = $accountcode;
        $this->data['chart'] = $accountcode ? $this->site->getChartByID($accountcode) : NULL;
        //$this->data['totals'] = $this->reports_model->getWarehouseTotals($accountcode);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
        $this->page_construct('reports/cash_chart', $meta, $this->data);

    }
    
	function expiry_alerts($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('expiry_alerts');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        if ($this->Owner || $this->Admin) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        } else {
            $user = $this->site->getUser();
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $user->warehouse_id;
            $this->data['warehouse'] = $user->warehouse_id ? $this->site->getWarehouseByID($user->warehouse_id) : NULL;
        }

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_expiry_alerts')));
        $meta = array('page_title' => lang('product_expiry_alerts'), 'bc' => $bc);
        $this->page_construct('reports/expiry_alerts', $meta, $this->data);
    }

    function getExpiryAlerts($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('expiry_alerts', TRUE);
        $date = date('Y-m-d', strtotime('+3 months'));
        if (!$this->Owner && !$warehouse_id) {
            $user = $this->site->getUser();
            $warehouse_id = $user->warehouse_id;
        }

        $this->load->library('datatables');
        if ($warehouse_id) {
            $this->datatables
                ->select("image, product_code, product_name, quantity_balance, warehouses.name, expiry")
                ->from('purchase_items')
                ->join('products', 'products.id=purchase_items.product_id', 'left')
                ->join('warehouses', 'warehouses.id=purchase_items.warehouse_id', 'left')
                ->where('warehouse_id', $warehouse_id)
				->where('expiry !=', NULL)->where('expiry !=', '0000-00-00')
				->where('DATE_ADD(expiry , INTERVAL -(SELECT alert_day FROM erp_settings) DAY) <= CURDATE() AND CURDATE()< expiry')
				->group_by('product_code')
				->group_by('expiry');
				//->where('expiry <', $date);
        } else {
            $this->datatables
                ->select("products.image, erp_purchase_items.product_code, erp_purchase_items.product_name, SUM(erp_purchase_items.quantity_balance), warehouses.name, erp_purchase_items.expiry, serial.serial_number")
                ->from('purchase_items')
                ->join('products', 'products.id = purchase_items.product_id', 'left')				
                ->join('warehouses', 'warehouses.id=purchase_items.warehouse_id', 'left')
				->join('serial', 'serial.product_id = products.id', 'left')
				->where('erp_purchase_items.expiry !=', NULL)->where('erp_purchase_items.expiry !=', '0000-00-00')
				->where('DATE_ADD(erp_purchase_items.expiry , INTERVAL -(SELECT erp_settings.alert_day FROM erp_settings) DAY) <= CURDATE() AND CURDATE()< erp_purchase_items.expiry')
				->group_by('erp_purchase_items.product_code')
				->group_by('erp_purchase_items.expiry')
				->having('SUM(erp_purchase_items.quantity_balance) > 0');
				//->where('expiry <', $date);
        }
        echo $this->datatables->generate();
    }

    function product_value($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('quantity_alert',NULL,'product_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $wid = $this->reports_model->getWareByUserID();

        $this->data['products'] = $this->site->getProducts();
        $this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);

        $this->data['warehouse'] = $this->site->getWarehouseByID($warehouse_id) ;
        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;

        } else {

            $this->data['warehouses'] = $this->products_model->getUserWarehouses();
            if($warehouse_id){
                $this->data['warehouse_id'] = $warehouse_id;
                $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
            }else{
                $this->data['warehouse_id'] = str_replace(',', '-',$this->session->userdata('warehouse_id'));
                $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->products_model->getUserWarehouses() : NULL;
            }
        }

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_value')));
        $meta = array('page_title' => lang('product_value'), 'bc' => $bc);
        $this->page_construct('reports/product_value', $meta, $this->data);
    }

    function getProductValueReport($warehouse_id = NULL)
    {
        if($warehouse_id){
            $warehouse_ids = explode('-', $warehouse_id);
        }

        if ($this->input->get('product_id')) {
            $product_id = $this->input->get('product_id');
        } else {
            $product_id = NULL;
        }

        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }

        $this->load->library('datatables');
        if($warehouse_id) {
            $this->datatables
                ->select('erp_warehouses_products.id, products.code, products.name as pname, warehouses.name as wname, warehouses_products.quantity, FORMAT(erp_products.cost, 4) as cost, (erp_warehouses_products.quantity * erp_products.cost) as total_cost')
                ->from('products')
                ->join("warehouses_products", 'products.id=warehouses_products.product_id', 'left')
                ->join('warehouses', 'warehouses_products.warehouse_id = warehouses.id', 'left')
                ->where('warehouses_products.quantity >', 0)
                ->order_by('products.id', 'asc');

            if (count($warehouse_ids) > 1) {
                $this->datatables->where_in('erp_warehouses_products.warehouse_id', $warehouse_ids);
            } else {
                $this->datatables->where('erp_warehouses_products.warehouse_id', $warehouse_id);
            }

        } else {
            $this->datatables
                ->select('erp_warehouses_products.id, products.code, products.name as pname, warehouses.name as wname, warehouses_products.quantity, products.cost, (erp_warehouses_products.quantity * erp_products.cost) as total_cost')
                ->from('products')
                ->join("warehouses_products", 'products.id=warehouses_products.product_id', 'left')
                ->join('warehouses', 'warehouses_products.warehouse_id = warehouses.id', 'left')
                ->where('warehouses_products.quantity >', 0)
                ->order_by('products.id', 'asc');
        }

        if ($product_id) {
            $this->datatables->where('erp_products.id', $product_id);
        }

        if ($warehouse) {
            $this->datatables->where('erp_warehouses_products.warehouse_id', $warehouse);
            $this->datatables->group_by('erp_products.id');
        }

        echo $this->datatables->generate();

    }

    function product_value_action()
    {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            /*$sdate = $this->input->post('sdate');
            $edate = $this->input->post('edate');*/
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('product_value_report'));

                    $this->excel->getActiveSheet()->SetCellValue('A1', 'Product Value Report');
                    $this->excel->getActiveSheet()->mergeCells('A1:F1');
                    $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(30);
                    $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A1')->getFont()
                        ->setName('Times New Roman')
                        ->setSize(16)
                        ->setBold(true);

                    $head = array(
                        'font' => array(
                            'color' => array('rgb' => 'FFFFFF'),
                            'bold' => true,
                            'size' => 11,
                            'name' => 'Times New Roman'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428bca')
                        )
                    );

                    $this->excel->getActiveSheet()->getStyle('A2:F2')->applyFromArray($head);
                    $this->excel->getActiveSheet()->SetCellValue('A2', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B2', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C2', lang('warehouse'));
                    $this->excel->getActiveSheet()->SetCellValue('D2', lang('quantity'));
                    $this->excel->getActiveSheet()->SetCellValue('E2', lang('unit_cost'));
                    $this->excel->getActiveSheet()->SetCellValue('F2', lang('total_cost'));
                    $this->excel->getActiveSheet()->getRowDimension(2)->setRowHeight(25);
                    $this->excel->getActiveSheet()->getStyle('A2:F2')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A2:F2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                    $row = 3;
                    $tCost = 0;
                    $tQty = 0;
                    $gTotalCost = 0;
                    foreach ($_POST['val'] as $id) {
                        $data = $this->reports_model->getProductValueReport($id);
                        $tQty += $data->quantity;
                        $tCost += $data->cost;
                        $gTotalCost += $data->total_cost;

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data->pcode);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data->pname);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data->wname);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->erp->formatQuantity($data->quantity));
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($data->cost));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($data->total_cost));

                        $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);
                        $this->excel->getActiveSheet()->getStyle('A' .$row .':F' .$row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('D'. $row .':F' .$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                        $row++;
                    }
                    $this->excel->getActiveSheet()->SetCellValue('D' .$row, number_format($tQty, 2));
                    $this->excel->getActiveSheet()->SetCellValue('E' .$row, number_format($tCost, 2));
                    $this->excel->getActiveSheet()->SetCellValue('F' .$row, number_format($gTotalCost, 2));

                    // Footer Styles
                    $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);
                    $this->excel->getActiveSheet()->getStyle('D'. $row .':F'. $row)->getFont()
                        ->setName('Times New Roman')
                        ->setSize(14)
                        ->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('D' .$row .':F' .$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
                    $this->excel->getActiveSheet()->getStyle('D' .$row .':F' .$row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('D'. $row .':F' .$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    //-------------------

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(40);

                    $filename = 'sales_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        // How to remove empty column in phpexcel #Chanthy
                        //$this->excel->getActiveSheet()->removeColumn('J-Z');
                        //--------------------------------------------------
                        $this->excel->getActiveSheet()->mergeCells('A' .$row .':C' .$row);

                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }

                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            }else {
                $this->session->set_flashdata('error', lang("no_product_value_report_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        }
    }

    function quantity_alerts($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('quantity_alert',NULL,'product_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$wid = $this->reports_model->getWareByUserID();
        
            $this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);
       
            $this->data['warehouse'] = $this->site->getWarehouseByID($warehouse_id) ;
			if($warehouse_id){
			 $this->data['warehouse_id'] = $warehouse_id;
			}else{
				$this->data['warehouse_id'] = 0;
			}
			
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_quantity_alerts')));
        $meta = array('page_title' => lang('product_quantity_alerts'), 'bc' => $bc);
        $this->page_construct('reports/quantity_alerts', $meta, $this->data);
    }
	
	function public_charge_alerts($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('quantity_alert',NULL,'product_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$wid = $this->reports_model->getWareByUserID();
        
            $this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);
       
            $this->data['warehouse'] = $this->site->getWarehouseByID($warehouse_id) ;
			if($warehouse_id){
			 $this->data['warehouse_id'] = $warehouse_id;
			}else{
				$this->data['warehouse_id'] = 0;
			}
			
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('public_charge_alerts')));
        $meta = array('page_title' => lang('public_charge_alerts'), 'bc' => $bc);
        $this->page_construct('reports/public_charge_alerts', $meta, $this->data);
    }

    function getQuantityAlerts($warehouse_id = NULL, $pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('quantity_alert',NULL,'product_report');
        $wid = $this->reports_model->getWareByUserID();
        if ($pdf || $xls) {

            if ($warehouse_id) {
                $this->db
                    ->select('products.image as image, products.code, products.name, warehouses_products.quantity, alert_quantity')
                    ->from('products')->join('warehouses_products', 'warehouses_products.product_id=products.id', 'left')
                    ->where('alert_quantity > warehouses_products.quantity')
                    ->where('warehouses_products.warehouse_id', $warehouse_id)
                    ->where('track_quantity', 1)
                    ->order_by('products.code desc');
            } else {
                $this->db
                    ->select('image, code, name, warehouses_products.quantity, alert_quantity')
					->join('warehouses_products', 'warehouses_products.product_id=products.id', 'left')
                    ->from('products')
                    ->where('alert_quantity > warehouses_products.quantity')
                    ->where('track_quantity', 1);
					if($wid){
						$this->db->where("warehouses_products.warehouse_id IN ($wid)");
					}		
                   $this->db->order_by('code desc');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_quantity_alerts'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('alert_quantity'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code." ");
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->alert_quantity);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);

                $filename = 'product_quantity_alerts';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            if ($warehouse_id) {
                $this->datatables
                    ->select('warehouses_products.id, image, products.code, products.name, warehouses.name as wname, warehouses_products.quantity, alert_quantity')
                    ->from('products')
                    ->join("warehouses_products", 'products.id=warehouses_products.product_id', 'left')
                    ->join('warehouses', 'warehouses_products.warehouse_id = warehouses.id', 'left')
                    ->where('alert_quantity > erp_warehouses_products.quantity')
                    ->where('track_quantity', 1)
					->where("warehouses_products.warehouse_id",$warehouse_id)
                   ->group_by('products.id')
                    ->order_by('erp_products.id', 'asc');
            } else {
                $this->datatables
                    ->select('warehouses_products.id, image, products.code, products.name, warehouses.name as wname, warehouses_products.quantity, alert_quantity')
                    ->from('products')
                    ->join("warehouses_products", 'products.id=warehouses_products.product_id', 'left')
                    ->join('warehouses', 'warehouses_products.warehouse_id = warehouses.id', 'left')
                    ->where('alert_quantity > warehouses_products.quantity')
                    ->where('track_quantity', 1)
                    ->order_by('erp_products.id', 'asc');
				if($wid){
					$this->datatables->where("warehouses_products.warehouse_id IN ($wid)");
				}				
				
            }

            echo $this->datatables->generate();

        }
    }
	
	function getPublicChargeAlerts($warehouse_id = NULL, $pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('quantity_alert',NULL,'product_report');
        $wid = $this->reports_model->getWareByUserID();
        if ($pdf || $xls) {

            if ($warehouse_id) {
               $this->db
                    ->select('erp_companies.id,erp_companies.name,erp_define_public_charge.description,SUM(erp_customer_public_charge.amount) AS total_amount,SUM(erp_customer_public_charge.paid) AS paid')
					->join('companies', 'erp_companies.id = customer_public_charge.customer_id', 'left')
					->join('define_public_charge', 'define_public_charge.id = customer_public_charge.pub_id', 'left')
                    ->from('customer_public_charge')
                    ->group_by('customer_id');
					
            } else {
                $this->db
                    ->select('companies.id,erp_companies.name,erp_define_public_charge.description,SUM(erp_customer_public_charge.amount) AS total_amount,SUM(erp_customer_public_charge.paid) AS paid')
					->join('companies', 'companies.id = customer_public_charge.customer_id', 'left')
					->join('define_public_charge', 'define_public_charge.id = customer_public_charge.pub_id', 'left')
                    ->from('customer_public_charge')
                    ->group_by('customer_id');
					
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_quantity_alerts'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('alert_quantity'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code." ");
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->alert_quantity);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);

                $filename = 'product_quantity_alerts';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            if ($warehouse_id) {
                 $this->db
                    ->select('erp_companies.id,erp_companies.name,erp_define_public_charge.description,SUM(erp_customer_public_charge.amount) AS total_amount,SUM(erp_customer_public_charge.paid) AS paid')
					->join('companies', 'erp_companies.id = erp_customer_public_charge.customer_id', 'left')
					->join('define_public_charge', 'erp_define_public_charge.id = erp_customer_public_charge.pub_id', 'left')
                    ->from('customer_public_charge')
                    ->group_by('customer_id');
				
            } else {
                 $this->db
                    ->select('erp_companies.id,erp_companies.name,erp_define_public_charge.description,SUM(erp_customer_public_charge.amount) AS total_amount,SUM(erp_customer_public_charge.paid) AS paid')
					->join('companies', 'companies.id = customer_public_charge.customer_id', 'left')
					->join('define_public_charge', 'define_public_charge.id = customer_public_charge.pub_id', 'left')
                    ->from('customer_public_charge')
                    ->group_by('customer_id');
				
            }

            echo $this->datatables->generate();

        }
    }
	
	function getPurchasePaymentAlerts($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('expiry_alerts', TRUE);
        $date = date('Y-m-d', strtotime('+3 months'));

        if (!$this->Owner && !$warehouse_id) {
            $user = $this->site->getUser();
            $warehouse_id = $user->warehouse_id;
        }

        $this->load->library('datatables');
        if ($warehouse_id) {
            $this->datatables
                ->select("products.image, purchase_items.product_code, purchase_items.product_name, purchase_items.quantity, warehouses.name, purchases.date")
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
				->join('products', 'products.code=purchase_items.product_code', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
				->where('purchases.payment_term !=', 0)
                ->where('warehouse_id', $warehouse_id)->where('purchases.date <', $date);
        } else {
            $this->datatables
                ->select("products.image, purchase_items.product_code, purchase_items.product_name, purchase_items.quantity, warehouses.name, purchases.date")
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
				->join('products', 'products.code=purchase_items.product_code', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
				->where('purchases.payment_term !=', 0)
                ->where('purchases.date <', $date);
        }
        echo $this->datatables->generate();
    }
	
	function getCustomerPaymentAlerts($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('expiry_alerts', TRUE);
        $date = date('Y-m-d', strtotime('+3 months'));

        if (!$this->Owner && !$warehouse_id) {
            $user = $this->site->getUser();
            $warehouse_id = $user->warehouse_id;
        }

        $this->load->library('datatables');
        $this->load->library('datatables');
            if ($warehouse_id) {
                $this->datatables
                    ->select('sales.date, sales.reference_no, sales.biller, sales.customer, sales.grand_total, sales.paid, (erp_sales.grand_total - erp_sales.paid) AS balance')
                    ->from('sales')
                    ->join('sale_items', 'sale_items.sale_id = sales.id', 'inner')
					->join('warehouses', 'warehouses.warehouse_id = sales.warehouse_id', 'inner')
					->join('companies', 'companies.id = sales.customer_id', 'inner')
					->join('customer_groups', 'customer_groups.id = companies.customer_group_id')
					->where('sales.payment_term !=', 0)
					->or_where('sales.payment_term !=', '')
					->where('sales.date <', $date);
            } else {
                $this->datatables
                    ->select('sales.date, sales.reference_no, sales.biller, sales.customer, sales.grand_total, sales.paid, (erp_sales.grand_total - erp_sales.paid) AS balance')
                    ->from('sales')
                    ->join('sale_items', 'sale_items.sale_id = sales.id', 'inner')
					->join('warehouses', 'warehouses.id = sales.warehouse_id', 'inner')
					->join('companies', 'companies.id = sales.customer_id', 'inner')
					->join('customer_groups', 'customer_groups.id = companies.customer_group_id')
					->where('sales.payment_term !=', 0)
					->or_where('sales.payment_term !=', '')
					->where('sales.date <', $date);
            }
        echo $this->datatables->generate();
    }
	
    function suggestions()
    {
        $term = $this->input->get('term', TRUE);
        if (strlen($term) < 1) {
            die();
        }

        $rows = $this->reports_model->getProductNames($term);
        if ($rows) {
            foreach ($rows as $row) {
                $pr[] = array('id' => $row->id, 'label' => $row->name . " (" . $row->code . ")");

            }
            echo json_encode($pr);
        } else {
            echo FALSE;
        }
    }
	
	function products($biller_id = NULL,$warehouse_id=null)
    {
        $this->erp->checkPermissions('product',NULL,'product_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
		$this->data['suppliers'] = $this->site->getAllSuppliers();
		$user = $this->site->getUser();
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}

        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
		if ($this->Owner || $this->Admin) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
			if($this->session->userdata('warehouse_id')){
				$this->data['warehouse_id'] = $warehouse_id;
				$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
			}else{
				$this->data['warehouse_id']=null;
				$this->data['warehouse'] = null;
			}
        } else {
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $this->session->userdata('warehouse_id');
            $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->site->getWarehouseByID($this->session->userdata('warehouse_id')) : NULL;
        }		
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('products_report')));
        $meta = array('page_title' => lang('products_report'), 'bc' => $bc);
        $this->page_construct('reports/products', $meta, $this->data);
    }
   
    function product_daily_in_out($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('daily',NULL,'product_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['suppliers'] = $this->site->getAllSuppliers();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
        
        if ($this->Owner || $this->Admin) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            if(isset($warehouse_id)){
                $this->data['warehouse_id'] = $warehouse_id;
                $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
            }else{
                $this->data['warehouse_id']=null;
                $this->data['warehouse'] = null;
            }
            
        } else {
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $this->session->userdata('warehouse_id');
            $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->site->getWarehouseByID($this->session->userdata('warehouse_id')) : NULL;
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_products')));
        $meta = array('page_title' => lang('daily_products'), 'bc' => $bc);
        
        $this->page_construct('reports/product_daily_in_out', $meta, $this->data);
    }

	function product_monthly_in_out($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('monthly',NULL,'product_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
		$this->data['suppliers'] = $this->site->getAllSuppliers();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
		
		if ($this->Owner || $this->Admin) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
			if(isset($warehouse_id)){
				$this->data['warehouse_id'] = $warehouse_id;
				$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
			}else{
				$this->data['warehouse_id']=null;
				$this->data['warehouse'] = null;
			}
            
        } else {
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $this->session->userdata('warehouse_id');
            $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->site->getWarehouseByID($this->session->userdata('warehouse_id')) : NULL;
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('monthly_products')));
        $meta = array('page_title' => lang('monthly_products'), 'bc' => $bc);
		
        $this->page_construct('reports/product_monthly_in_out', $meta, $this->data);
    }
	
	function product_in_out($biller_id = NULL,$warehouse_id=null)
    {
        $this->erp->checkPermissions('in_out',NULL,'product_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
		$this->data['suppliers'] = $this->site->getAllSuppliers();
		$user = $this->site->getUser();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		
		if ($this->Owner || $this->Admin) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
			if($this->session->userdata('warehouse_id')){
				$this->data['warehouse_id'] = $warehouse_id;
				$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
			}else{
				$this->data['warehouse_id']=null;
				$this->data['warehouse'] = null;
			}
            
        } else {
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $this->session->userdata('warehouse_id');
            $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->site->getWarehouseByID($this->session->userdata('warehouse_id')) : NULL;
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('products_in/out')));
        $meta = array('page_title' => lang('products_report'), 'bc' => $bc);
		
        $this->page_construct('reports/product_in_out', $meta, $this->data);
    }
	
	function product_in_out1($warehouse_id=null)
    {
        $this->erp->checkPermissions();
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
		$this->data['suppliers'] = $this->site->getAllSuppliers();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
		
		if ($this->Owner || $this->Admin) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
			if($this->session->userdata('warehouse_id')){
				$this->data['warehouse_id'] = $warehouse_id;
				$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
			}else{
				$this->data['warehouse_id']=null;
				$this->data['warehouse'] = null;
			}
            
        } else {
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $this->session->userdata('warehouse_id');
            $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->site->getWarehouseByID($this->session->userdata('warehouse_id')) : NULL;
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('products_in/out')));
        $meta = array('page_title' => lang('products_report'), 'bc' => $bc);
		
        $this->page_construct('reports/product_in_out', $meta, $this->data);
    }
	function getProductsReports1()
	{
		if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');			
        } else {
            $customer = NULL;
		}
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        } 
		if($start_date){
			$start = $this->erp->fld($start_date);
			$end =$this->erp->fld($end_date);
        }

        $user_id = $this->session->userdata('user_id');
        $user_biller_id = json_decode($this->session->userdata('biller_id'));

        $this->load->library('datatables');
            $this->datatables
                ->select("
                    products.id AS id, 
                    products.image, 
                    sales.date,sales.reference_no, 
                    sale_items.product_code, 
                    sale_items.product_name, 
                    sale_items.quantity,
                    COALESCE(erp_product_variants.name,erp_units.name),
                    erp_sale_items.net_unit_price,
                    (erp_sale_items.net_unit_price * erp_sale_items.quantity) AS TotalPrice,
                    sale_items.product_noted
                ")
                ->from('sales')
                ->join('users', 'sales.created_by = users.id', 'left')
                ->join('sale_items', 'sales.id = sale_items.sale_id', 'left')
                ->join('products', 'sale_items.product_id = products.id', 'left')
                ->join('units', 'products.unit = units.id', 'left')
                ->join('erp_product_variants','erp_product_variants.id=sale_items.option_id','left')
                ->where('sales.customer_id', $customer);

        if($user_biller_id){
            $this->db->where_in('sales.biller_id', $user_biller_id);
        }

        // View Rights
        if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
            if ($user_id) {
                $this->db->where('sales.created_by', $user_id);
            }
        }

		if($start_date){
			$this->datatables->where('sales.date BETWEEN "'.$start.'" AND "'.$end.'"');
		}
		echo $this->datatables->generate();
		
	}
	function getProductsReports()
	{
		if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');			
        } else {
            $customer = NULL;
		}
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        } 
		if($start_date){
			$start = $this->erp->fld($start_date);
			$end =$this->erp->fld($end_date);
		}
		$this->load->library('datatables');
			$this->datatables
				->select("products.id AS id, products.image, sales.date,sales.reference_no, sale_items.product_code, sale_items.product_name,(erp_products.cost * erp_sale_items.quantity) AS TotalCostOfGoodsSold, (erp_sale_items.unit_price * erp_sale_items.quantity) AS TotalPrice, sale_items.quantity")
				->from('sales')
				->join('sale_items', 'sales.id = sale_items.sale_id', 'left')
				->join('products', 'sale_items.product_id = products.id', 'left')
				->where('sales.customer_id', $customer)
				->group_by('sales.reference_no');
		if($start_date){
			$this->datatables->where('sales.date BETWEEN "'.$start.'" AND "'.$end.'"');
		}
		echo $this->datatables->generate();
		
	}
	
    function getProductsReport($pdf = NULL, $xls = NULL, $biller_id = NULL)
    {
        $product = null;
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
		if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = NULL;
        }
		if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
			$where_sale='where si.warehouse_id='.$warehouse;
			$where_purchase="where {$this->db->dbprefix('purchase_items')}.warehouse_id=".$warehouse;
        } else {
            $warehouse = NULL;
			$where_purchase = '';
			$where_sale='';
        }
		
		if($biller_id){
			$where_p_biller = "AND p.biller_id = {$biller_id} ";
			$where_s_biller = "AND s.biller_id = {$biller_id} ";
		}else{
			$where_p_biller = 'AND 1=1 ';
			$where_s_biller = 'AND 1=1 ';
		}
		
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $end_date ? $this->erp->fld($end_date) : date('Y-m-d');
			$pp = "( SELECT 
				pi.date as date, pi.product_id, 
				pi.purchase_id, 
				COALESCE(SUM( CASE WHEN pi.purchase_id <> 0 THEN (pi.quantity*(CASE WHEN ppv.qty_unit <> 0 THEN ppv.qty_unit ELSE 1 END)) ELSE 0 END),0) as purchasedQty, 
				SUM(pi.quantity_balance) as balacneQty, 
				SUM((CASE WHEN pi.option_id <> 0 THEN ppv.cost ELSE pi.net_unit_cost END) * pi.quantity_balance ) balacneValue, 
				SUM( pi.unit_cost * (CASE WHEN pi.purchase_id <> 0 THEN pi.quantity ELSE 0 END) ) totalPurchase 
				FROM {$this->db->dbprefix('purchase_items')} pi 
				LEFT JOIN {$this->db->dbprefix('purchases')} p 
				on p.id = pi.purchase_id 
				LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
				ON ppv.id=pi.option_id 
				WHERE p.date >= '{$start_date}' and p.date < '{$end_date}' 
				AND pi.status <> 'ordered'
				". $where_p_biller ."
				GROUP BY pi.product_id ) PCosts";
			
			$sp = "( SELECT si.product_id, 
				SUM( si.quantity*(CASE WHEN pv.qty_unit <> 0 THEN pv.qty_unit ELSE 1 END)) soldQty, 
				SUM( si.subtotal ) totalSale, 
				s.date as sdate 
				FROM " . $this->db->dbprefix('sales') . " s 
				INNER JOIN " . $this->db->dbprefix('sale_items') . " si 
				ON s.id = si.sale_id 
				LEFT JOIN " . $this->db->dbprefix('product_variants') . " pv 
				ON pv.id=si.option_id 
				WHERE s.date >= '{$start_date}' 
				AND s.date < '{$end_date}' 
				". $where_s_biller ."
				GROUP BY si.product_id ) PSales";
			
        } else {
            $pp = "( SELECT 
						pi.date as date, 
						pi.product_id, 
						pi.purchase_id, 
						COALESCE(SUM(CASE WHEN pi.purchase_id <> 0 THEN (pi.quantity*(CASE WHEN ppv.qty_unit <> 0 THEN ppv.qty_unit ELSE 1 END)) ELSE 0 END),0) as purchasedQty, 
						SUM(pi.quantity_balance) as balacneQty, 
						SUM((CASE WHEN pi.option_id <> 0 THEN ppv.cost ELSE pi.net_unit_cost END) * pi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * (CASE WHEN pi.purchase_id <> 0 THEN pi.quantity ELSE 0 END) ) totalPurchase
						FROM {$this->db->dbprefix('purchase_items')} pi 
						LEFT JOIN {$this->db->dbprefix('purchases')} p 
						ON p.id = pi.purchase_id
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
						ON ppv.id=pi.option_id ".$where_purchase." 
						WHERE pi.status <> 'ordered' 
						". $where_p_biller ."
						GROUP BY pi.product_id ) PCosts";
			
            $sp = "( SELECT 
						si.product_id, 
						SUM( si.quantity*(CASE WHEN pv.qty_unit <> 0 THEN pv.qty_unit ELSE 1 END)) soldQty, 
						SUM( si.subtotal ) totalSale, 
						s.date as sdate FROM " . $this->db->dbprefix('sales') . " s 
						INNER JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " pv 
						ON pv.id=si.option_id ".$where_sale." 
						". $where_s_biller ."
						GROUP BY si.product_id ) PSales";
        }
        
		if ($pdf || $xls) {
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->db
                ->select($this->db->dbprefix('products') . ".code, " . $this->db->dbprefix('products') . ".name,
				COALESCE( PCosts.purchasedQty, 0 ) as PurchasedQty,
				COALESCE( PSales.soldQty, 0 )  + COALESCE (
                        (
                            SELECT
                                SUM(si.quantity * ci.quantity)
                            FROM
                                erp_combo_items ci
                            INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
                            WHERE
                                ci.item_code = ".$this->db->dbprefix('products') . ".code
                        ),
                        0
                    ) as SoldQty,
				COALESCE( PCosts.balacneQty, 0 ) as BalacneQty,
				COALESCE( PCosts.totalPurchase, 0 ) as TotalPurchase,
				COALESCE( PCosts.balacneValue, 0 ) as TotalBalance,
				COALESCE( PSales.totalSale, 0 ) as TotalSales,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit", FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')				
				->join('warehouses_products wp', 'products.id=wp.product_id', 'left')
				->join('categories', 'products.category_id=categories.id', 'left')
				->group_by("products.id");

            if ($product) {
                $this->db->where($this->db->dbprefix('products') . ".id", $product);
            }
            
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . ".category_id", $category);
            }
			
			if ($supplier) {
                $this->db->where("products.supplier1 = '".$supplier."' or products.supplier2 = '".$supplier."' or products.supplier3 = '".$supplier."' or products.supplier4 = '".$supplier."' or products.supplier5 = '".$supplier."'");
            }
			
			if ($warehouse) {
                $this->datatables->where('wp.warehouse_id', $warehouse);
                $this->datatables->where('wp.quantity !=', 0);
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('profit_loss'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('stock_in_hand'));
                $row = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $bQty = 0;
                $bAmt = 0;
                $pl = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->BalacneQty);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->Profit);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->TotalBalance);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $bQty += $data_row->BalacneQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $bAmt += $data_row->TotalBalance;
                    $pl += $data_row->Profit;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $bQty);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $bAmt);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $pl);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(25);

                $filename = 'products_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$detail_sale = anchor('reports/view_sale_detail/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Sale_detail'), 'data-toggle="modal" data-target="#myModal"');
			$detail_purchase = anchor('reports/view_purchase_detail/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Purchase_detail'), 'data-toggle="modal" data-target="#myModal"');
			$action = '<div class="text-center"><div class="btn-group text-left">'
							. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
							. lang('actions') . ' <span class="caret"></span></button>
							<ul class="dropdown-menu pull-right" role="menu">
								<li>' . $detail_purchase . '</li>
								<li>' . $detail_sale . '</li>
							<ul>
						</div></div>';
			$link_action = '<div class="text-center"><div class="btn-group text-left">'. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'. lang('actions') . ' <span class="caret"></span></button><ul class="dropdown-menu pull-right" role="menu"><li>' . $detail_purchase . '</li><li>' . $detail_sale . '
				</li><ul></div></div>';
            $this->load->library('datatables');
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->datatables->select($this->db->dbprefix('products') . ".id as idd,
				categories.name,
				CONCAT(erp_products. CODE,' - ',erp_products. NAME) as description,
				erp_products.code as code,
				CONCAT(COALESCE( PCosts.purchasedQty, 0 ), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
				CONCAT(
                    COALESCE (PSales.soldQty, 0) + COALESCE (
                        (
                            SELECT
                                SUM(si.quantity * ci.quantity)
                            FROM
                                erp_combo_items ci
                            INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
                            WHERE
                                ci.item_code = ".$this->db->dbprefix('products') . ".code
                        ),
                        0
                    ),
                    '__',
                    COALESCE (PSales.totalSale, 0)
                ) AS sold,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit,
				CONCAT(COALESCE( PCosts.balacneQty, 0 ), '__', COALESCE( PCosts.balacneValue, 0 )) as balance", FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')				
				->join('warehouses_products wp', 'products.id=wp.product_id', 'left')
				->join('categories', 'products.category_id=categories.id', 'left')
				->group_by("products.id, category_id")
				->unset_column("code")
				->add_column("Action", $link_action, 'code');

            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . ".id", $product);
            }
			
			if($start_date && $end_date){				
				$this->datatables->where("(date(PCosts.date) BETWEEN '{$start_date}' AND  '{$end_date}'
				OR date(PSales.sdate) BETWEEN '{$start_date}' AND  '{$end_date}' )");				
			}
            
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . ".category_id", $category);
            }
			if ($supplier) {
                $this->datatables->where("products.supplier1 = '".$supplier."' or products.supplier2 = '".$supplier."' or products.supplier3 = '".$supplier."' or products.supplier4 = '".$supplier."' or products.supplier5 = '".$supplier."'");
            }
			if ($warehouse) {
                $this->datatables->where('wp.warehouse_id', $warehouse);
                $this->datatables->where('wp.quantity !=', 0);
            }
            echo $this->datatables->generate();

        }

    }
	
	function getPurchasedReport($pdf = NULL, $xls = NULL)
    {
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
       
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = NULL;
        }
       
		if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }
		
		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
			$where_sale='where si.warehouse_id='.$warehouse;
			$where_purchase="where {$this->db->dbprefix('purchase_items')}.warehouse_id=".$warehouse;
        } else {
            $warehouse = NULL;
			$where_purchase = '';
			$where_sale='';
        }
        $start_date     = null;
        $end_date       = null;
		if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $end_date ? $this->erp->fld($end_date) : date('Y-m-d');

            $pp = "( SELECT 
						pi.date as date, pi.product_id, 
						pi.purchase_id, 
						COALESCE(SUM( CASE WHEN pi.purchase_id <> 0 THEN (pi.quantity*(CASE WHEN ppv.qty_unit <> 0 THEN ppv.qty_unit ELSE 1 END)) ELSE 0 END),0) as purchasedQtypurchasedQtypurchasedQty, 
						SUM(pi.quantity_balance) as balacneQty, 
						SUM((CASE WHEN pi.option_id <> 0 THEN ppv.cost ELSE pi.net_unit_cost END) * pi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * (CASE WHEN pi.purchase_id <> 0 THEN pi.quantity ELSE 0 END) ) totalPurchase 
						FROM {$this->db->dbprefix('purchase_items')} pi 
						LEFT JOIN {$this->db->dbprefix('purchases')} p 
						on p.id = pi.purchase_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
						ON ppv.id=pi.option_id 
						WHERE p.date >= '{$start_date}' and p.date < '{$end_date}' 
						GROUP BY pi.product_id ) PCosts";
            $sp = "( SELECT si.product_id, 
						SUM( si.quantity*(CASE WHEN pv.qty_unit <> 0 THEN pv.qty_unit ELSE 1 END)) soldQty, 
						SUM( si.subtotal ) totalSale, 
						s.date as sdate 
						FROM " . $this->db->dbprefix('sales') . " s 
						INNER JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " pv 
						ON pv.id=si.option_id 
						WHERE s.date >= '{$start_date}' 
						AND s.date < '{$end_date}' 
						GROUP BY si.product_id ) PSales";
						
        } else {
            $pp = "( SELECT 
						pi.date as date, 
						pi.product_id, 
						pi.purchase_id, 
						COALESCE(SUM(CASE WHEN pi.purchase_id <> 0 THEN (pi.quantity*(CASE WHEN ppv.qty_unit <> 0 THEN ppv.qty_unit ELSE 1 END)) ELSE 0 END),0) as purchasedQty, 
						SUM(pi.quantity_balance) as balacneQty, 
						SUM((CASE WHEN pi.option_id <> 0 THEN ppv.cost ELSE pi.net_unit_cost END) * pi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * (CASE WHEN pi.purchase_id <> 0 THEN pi.quantity ELSE 0 END) ) totalPurchase 
						FROM {$this->db->dbprefix('purchase_items')} pi 
						LEFT JOIN {$this->db->dbprefix('purchases')} p 
						ON p.id = pi.purchase_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
						ON ppv.id=pi.option_id ".$where_purchase." 
						GROUP BY pi.product_id ) PCosts";
            $sp = "( SELECT 
						si.product_id, 
						SUM( si.quantity*(CASE WHEN pv.qty_unit <> 0 THEN pv.qty_unit ELSE 1 END)) soldQty, 
						SUM( si.subtotal ) totalSale, 
						s.date as sdate FROM " . $this->db->dbprefix('sales') . " s 
						INNER JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " pv 
						ON pv.id=si.option_id ".$where_sale." 
						GROUP BY si.product_id ) PSales";
        }
        if ($pdf || $xls) {
			
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->db
                ->select($this->db->dbprefix('purchase_items').".id as id, products.image, erp_purchases.date, erp_purchases.reference_no, product_code, product_name,
				CONCAT(COALESCE( PCosts.purchasedQty, 0 ), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit,
				CONCAT(COALESCE( PCosts.balacneQty, 0 ), '__', COALESCE( PCosts.balacneValue, 0 )) as balance ", FALSE)
                ->from('purchase_items')
                ->join($sp, 'purchase_items.product_id = PSales.product_id', 'left')
				->join($pp, 'purchase_items.product_id = PCosts.product_id', 'left')
				->join('purchases', 'purchases.id = purchase_items.purchase_id', 'left')
				->join('products', 'products.id=purchase_items.product_id')
				->where('purchases.supplier_id',$supplier);
	
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('Product_code'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('Products_name'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('Purchased'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('Profit and/or Loss'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('Stock_in_hand'));
				
                $row                = 2;
                $purchased          = 0;
                $profit             = 0;
                $stock              = 0;

                foreach ($data as $data_row) {
					
					$pu = explode("_",$data_row->purchased);
					$st = explode("_",$data_row->balance);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->date);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->product_code);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, '('.$this->erp->formatMoney($pu[0]).')'.$this->erp->formatMoney($pu[2]));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->Profit);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, '('.$this->erp->formatMoney($st[0]).')'.$this->erp->formatMoney($st[2]));
					
                    $purchased += $data_row->purchased;
                    $profit += $data_row->Profit;
                    $stock += $data_row->balance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("E" . $row . ":G" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $purchased);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $profit);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $stock);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                

                $filename = 'products_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $detail_purchase    = '';
            $detail_sale        ='';
            $this->load->library('datatables');
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->datatables
                ->select("purchase_items.id as id, products.image, erp_purchases.date, erp_purchases.reference_no, product_code, product_name,
				CONCAT(COALESCE( PCosts.purchasedQty, 0 ), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit,
				CONCAT(COALESCE( PCosts.balacneQty, 0 ), '__', COALESCE( PCosts.balacneValue, 0 )) as balance", FALSE)
                ->from('purchase_items')
                ->join($sp, 'purchase_items.product_id = PSales.product_id', 'left')
                ->join($pp, 'purchase_items.product_id = PCosts.product_id', 'left')
				->join('purchases', 'purchases.id = purchase_items.purchase_id', 'left')
				->join('products', 'products.id=purchase_items.product_id')
				//->group_by("purchase_items.product_id")
				->add_column("Action", '<div class="text-center"><div class="btn-group text-left">'. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'. lang('actions') . ' <span class="caret"></span></button><ul class="dropdown-menu pull-right" role="menu"><li>' . $detail_purchase . '</li><li>' . $detail_sale . '</li><ul></div></div>', $this->db->dbprefix('purchase_items') . ".product_code");

            if ($supplier) {
                $this->datatables->where($this->db->dbprefix('purchases') . ".supplier_id", $supplier);
            }
			
			if($biller_id){
				$this->datatables->where($this->db->dbprefix('purchases') . ".biller_id", $biller_id);
			}
            
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . ".category_id", $category);
            }
			if ($warehouse) {
                $this->datatables->where('wp.warehouse_id', $warehouse);
                $this->datatables->where('wp.quantity !=', 0);
            }
            echo $this->datatables->generate();

        }

    }
	//========= sokhan purchase supplier ==//
	function getPurchasedReport4()
	{	
		//$datt =$this->reports_model->getLastDate("erp_purchases","date");
		if ($this->input->get('supplier')) {
            $supplier_id = $this->input->get('supplier');
        } else {
            $supplier_id = NULL;
        }
		if ($this->input->get('product2')) {
            $product2 = $this->input->get('product2');
        } else {
            $product2 = NULL;
        }
		if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
		if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = NULL;
        }
		if ($this->input->get('start_date2')) {
            $start_date = $this->erp->fsd($this->input->get('start_date2'));
        } else {
            $start_date = NULL;
        }
      
		if ($this->input->get('end_date2')) {
            $end_date = $this->erp->fsd($this->input->get('end_date2'));
        } else {
            $end_date=NULL;
        }
		
        $user_id = $this->session->userdata('user_id');
        $user_biller_id = JSON_decode($this->session->userdata('biller_id'));

        $this->load->library('datatables');
            $this->datatables
            ->select("erp_purchase_items.id as idd, erp_purchase_items.date as date,
            reference_no,
            product_name,
            erp_purchase_items.quantity,
            COALESCE(erp_product_variants.name,erp_units.name),
            (
                (net_unit_cost + net_shipping) * erp_purchase_items.quantity
            ) as amount
            
            ", false)
            ->from("erp_purchase_items")
            ->join('erp_purchases', 'erp_purchase_items.purchase_id = erp_purchases.id', 'left')
            ->join('erp_products', 'erp_products.id = erp_purchase_items.product_id', 'left')
            ->join('erp_units','erp_units.id = erp_products.unit','left')
            ->join('erp_categories','erp_categories.id = erp_products.category_id','left')
            ->join('erp_product_variants','erp_purchase_items.option_id = erp_product_variants.id','left')
            ->where('erp_purchase_items.transaction_type = "PURCHASE"');

            if($user_biller_id != NULL){
                $this->db->where_in('erp_purchases.biller_id', $user_biller_id);
            }

			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user_id) {
					$this->datatables->where('erp_purchases.created_by', $user_id);
				}
			}		

            if($product2){
                $this->datatables->where('erp_purchase_items.product_id',$product2);
            }
            if($supplier_id){
                $this->datatables->where('erp_purchases.supplier_id',$supplier_id);
            }
			if($reference_no){
				$this->datatables->where('erp_purchases.reference_no',$reference_no);
			}
			if($category){
				$this->datatables->where('erp_products.category_id',$category);
			}
			if($start_date && $end_date){
				$this->datatables->where('erp_purchase_items.date BETWEEN "'.$start_date.'" AND "'.$end_date.'"');
			}
			echo $this->datatables->generate();
	}

    function purchases_product_actions()
	{
		
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');
		 
        if ($this->form_validation->run() == true) {
			
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('purchases_product_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('quantity'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('unit'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));

                    $row = 2;
					$qty =0;
					$amount = 0;
                    foreach ($_POST['val'] as $id) {
						$sc = $this->reports_model->purchase_pro($id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->date);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->product_name);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->quantity);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->unit);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->amount);
						$qty +=$sc->quantity;
						$amount +=$sc->amount;
                        $row++;
                    }
					$this->excel->getActiveSheet()->getStyle("D" . $row . ":F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $qty);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $amount);
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'purchases_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_purchases_report_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } 
	
	}
	
	
	function getPurchasedSupplierItemsReport() 
	{
		
		if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
		
		$this->load->library('datatables');
			$this->datatables
				->select("purchases.date, purchases.reference_no, purchases.supplier, purchases.grand_total, purchases.paid, (erp_purchases.grand_total - erp_purchases.paid) as balance")
				->from('purchases')
				->where('purchases.supplier_id', $supplier);
		
		echo $this->datatables->generate();
	}
	
	function getProductsBiller($warehouse_id=null,$pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('project', NULL, 'sale_report');

        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
		
		if ($this->input->get('sproduct')) {
            $product = $this->input->get('sproduct');
        } else {
            $product = NULL;
        }
      
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = NULL;
        }
       
		if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
      
		if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
		
		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
			$where_sale='where si.warehouse_id='.$warehouse;
			$where_purchase="where {$this->db->dbprefix('purchase_items')}.warehouse_id=".$warehouse;
        } else {
            $warehouse = NULL;
			$where_purchase = '';
			$where_sale='';
        }
        
		if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $end_date ? $this->erp->fld($end_date) : date('Y-m-d');

            $pp = "( SELECT 
						pi.date as date, pi.product_id, 
						pi.purchase_id, 
						COALESCE(SUM( CASE WHEN pi.purchase_id <> 0 THEN (pi.quantity*(CASE WHEN ppv.qty_unit <> 0 THEN ppv.qty_unit ELSE 1 END)) ELSE 0 END),0) as purchasedQtypurchasedQtypurchasedQty, 
						SUM(pi.quantity_balance) as balacneQty, 
						SUM((CASE WHEN pi.option_id <> 0 THEN ppv.cost ELSE pi.net_unit_cost END) * pi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * (CASE WHEN pi.purchase_id <> 0 THEN pi.quantity ELSE 0 END) ) totalPurchase 
						FROM {$this->db->dbprefix('purchase_items')} pi 
						LEFT JOIN {$this->db->dbprefix('purchases')} p 
						on p.id = pi.purchase_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
						ON ppv.id=pi.option_id 
						WHERE p.date >= '{$start_date}' and p.date < '{$end_date}' 
						GROUP BY pi.product_id ) PCosts";
            $sp = "( SELECT si.product_id, 
						SUM( si.quantity*(CASE WHEN pv.qty_unit <> 0 THEN pv.qty_unit ELSE 1 END)) soldQty, 
						SUM( si.subtotal ) totalSale, 
						s.date as sdate 
						FROM " . $this->db->dbprefix('sales') . " s 
						INNER JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " pv 
						ON pv.id=si.option_id 
						WHERE s.date >= '{$start_date}' 
						AND s.date < '{$end_date}' 
						GROUP BY si.product_id ) PSales";
						
        } else {
            $pp = "( SELECT 
						pi.date as date, 
						pi.product_id, 
						pi.purchase_id, 
						COALESCE(SUM(CASE WHEN pi.purchase_id <> 0 THEN (pi.quantity*(CASE WHEN ppv.qty_unit <> 0 THEN ppv.qty_unit ELSE 1 END)) ELSE 0 END),0) as purchasedQty, 
						SUM(pi.quantity_balance) as balacneQty, 
						SUM((CASE WHEN pi.option_id <> 0 THEN ppv.cost ELSE pi.net_unit_cost END) * pi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * (CASE WHEN pi.purchase_id <> 0 THEN pi.quantity ELSE 0 END) ) totalPurchase 
						FROM {$this->db->dbprefix('purchase_items')} pi 
						LEFT JOIN {$this->db->dbprefix('purchases')} p 
						ON p.id = pi.purchase_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
						ON ppv.id=pi.option_id ".$where_purchase." 
						GROUP BY pi.product_id ) PCosts";
            $sp = "( SELECT 
						si.product_id, 
						SUM( si.quantity*(CASE WHEN pv.qty_unit <> 0 THEN pv.qty_unit ELSE 1 END)) soldQty, 
						SUM( si.subtotal ) totalSale, 
						s.date as sdate FROM " . $this->db->dbprefix('sales') . " s 
						INNER JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " pv 
						ON pv.id=si.option_id ".$where_sale." 
						GROUP BY si.product_id ) PSales";
        }
        if ($pdf || $xls) {
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->db
                ->select($this->db->dbprefix('products') . ".code, " . $this->db->dbprefix('products') . ".name,
				COALESCE( PCosts.purchasedQty, 0 ) as PurchasedQty,
				COALESCE( PSales.soldQty, 0 ) as SoldQty,
				COALESCE( PCosts.balacneQty, 0 ) as BalacneQty,
				COALESCE( PCosts.totalPurchase, 0 ) as TotalPurchase,
				COALESCE( PCosts.balacneValue, 0 ) as TotalBalance,
				COALESCE( PSales.totalSale, 0 ) as TotalSales,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit", FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')				
				->join('warehouses_products wp', 'products.id=wp.product_id', 'left')
				->join('categories', 'products.category_id=categories.id', 'left')
				->group_by("products.id");

            if ($product) {
                $this->db->where($this->db->dbprefix('products') . ".id", $product);
            }
            
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . ".category_id", $category);
            }
			if ($warehouse) {
                $this->datatables->where('wp.warehouse_id', $warehouse);
                $this->datatables->where('wp.quantity !=', 0);
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('profit_loss'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('stock_in_hand'));

                $row = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $bQty = 0;
                $bAmt = 0;
                $pl = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->BalacneQty);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->Profit);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->TotalBalance);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $bQty += $data_row->BalacneQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $bAmt += $data_row->TotalBalance;
                    $pl += $data_row->Profit;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $bQty);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $bAmt);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $pl);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(25);

                $filename = 'products_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } 
		else {$detail_sale = anchor('reports/view_sale_detail/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Sale_detail'), 'data-toggle="modal" data-target="#myModal"');
			$detail_purchase = anchor('reports/view_purchase_detail/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Purchase_detail'), 'data-toggle="modal" data-target="#myModal"');
				
			$action = '<div class="text-center"><div class="btn-group text-left">'
			. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
			. lang('actions') . ' <span class="caret"></span></button>
			<ul class="dropdown-menu pull-right" role="menu">
				<li>' . $detail_purchase . '</li>
				<li>' . $detail_sale . '</li>
			<ul></div></div>';

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('purchase_items') . ".product_code, " . $this->db->dbprefix('purchase_items') . ".product_name,
				CONCAT(COALESCE( PCosts.purchasedQty, 0 ), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit,
				CONCAT(COALESCE( PCosts.balacneQty, 0 ), '__', COALESCE( PCosts.balacneValue, 0 )) as balance", FALSE)
                ->from('purchase_items')
                ->join($sp, 'purchase_items.product_id = PSales.product_id', 'left')
                ->join($pp, 'purchase_items.product_id = PCosts.product_id', 'left')
				->join('purchases', 'purchases.id = purchase_items.purchase_id', 'left')
				->join('products','erp_products.id =purchase_items.product_id','LEFT');
				if ($category) {
                  $this->datatables->where($this->db->dbprefix('products').".category_id",$category);				                 
				}
			
				if ($product) {
					$this->datatables->where($this->db->dbprefix('products') . ".id", $product);
				}

				
				if ($biller) {
					$this->datatables->where($this->db->dbprefix('purchases') . ".biller_id", $biller);
				}
                if ($warehouse_id) {
                    $this->datatables->where('purchase_items.warehouse_id', $warehouse_id);
                    $this->datatables->where('purchase_items.quantity !=', 0);
                }

				//->group_by("purchase_items.product_id")
			$this->datatables->add_column("Action", '<div class="text-center"><div class="btn-group text-left">'. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'. lang('actions') . ' <span class="caret"></span></button><ul class="dropdown-menu pull-right" role="menu"><li>' . $detail_purchase . '</li><li>' . $detail_sale . '</li><ul></div></div>', $this->db->dbprefix('purchase_items') . ".product_code");
            echo $this->datatables->generate();

        }

    }
	
	function getProductsReportInOut($pdf = NULL, $xls = NULL)
    {
       
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
		
		if ($this->input->get('biller_ids')) {
            $biller_id = $this->input->get('biller_ids');
        } else {
            $biller_id = $this->input->get('biller_id');
        }
        
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = NULL;
        }
        if ($this->input->get('in_out')) {
            $in_out = $this->input->get('in_out');
        } else {
            $in_out = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
		if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
			$where_sale='where si.warehouse_id='.$warehouse;
			$where_purchase="where {$this->db->dbprefix('purchase_items')}.warehouse_id=".$warehouse . "AND {$this->db->dbprefix('purchase_items')}.status <> 'ordered'";
        } else {
            $warehouse = NULL;
			$where_purchase = "where 1=1 AND {$this->db->dbprefix('purchase_items')}.status <> 'ordered' AND {$this->db->dbprefix('purchase_items')}.purchase_id != ''";
			$where_sale='where 1=1';
        }
		
		if($biller_id){
			$where_p_biller = "AND pp.biller_id = {$biller_id} ";
			$where_s_biller = "AND s.biller_id = {$biller_id} ";
		}else{
			$where_p_biller = 'AND 1=1 ';
			$where_s_biller = 'AND 1=1 ';
		}
		
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $end_date ? $this->erp->fld($end_date) : date('Y-m-d');

            $pp = "( SELECT pi.product_id, 
						SUM( pi.quantity * (CASE WHEN pi.option_id <> 0 THEN pi.vqty_unit ELSE 1 END) ) purchasedQty, 
						SUM( tpi.quantity_balance ) balacneQty, 
						SUM((CASE WHEN pi.option_id <> 0 THEN pi.vcost ELSE pi.unit_cost END) *  tpi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * pi.quantity ) totalPurchase, 
                        SUM(pi.unit_cost) AS totalCost,
						SUM(pi.quantity) AS Pquantity,
						pi.date as pdate 
						FROM ( SELECT {$this->db->dbprefix('purchase_items')}.date as date, 
									{$this->db->dbprefix('purchase_items')}.product_id, 
									purchase_id, 
									SUM({$this->db->dbprefix('purchase_items')}.quantity) as quantity, 
									unit_cost,
									option_id,
									ppv.qty_unit AS vqty_unit,
									ppv.cost AS vcost,
									ppv.quantity AS vquantity 
									FROM erp_purchase_items 
									INNER JOIN " . $this->db->dbprefix('purchases') . " pp 
									ON pp.id = {$this->db->dbprefix('purchase_items')}.purchase_id  
									JOIN {$this->db->dbprefix('products')} p 
									ON p.id = {$this->db->dbprefix('purchase_items')}.product_id 
									LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
									ON ppv.id={$this->db->dbprefix('purchase_items')}.option_id  
									WHERE {$this->db->dbprefix('purchase_items')}.date >= '{$start_date}' AND {$this->db->dbprefix('purchase_items')}.date < '{$end_date}' 
									".$where_p_biller."
									GROUP BY {$this->db->dbprefix('purchase_items')}.product_id ) pi 
						LEFT JOIN ( SELECT product_id, 
										SUM(quantity_balance) as quantity_balance 
										FROM {$this->db->dbprefix('purchase_items')} 
										GROUP BY product_id ) tpi on tpi.product_id = pi.product_id 
						GROUP BY pi.product_id ) PCosts";

			$sp = "( SELECT si.product_id, 
						SUM( si.quantity*(CASE WHEN si.option_id <> 0 THEN spv.qty_unit ELSE 1 END)) soldQty, 
						SUM( si.subtotal ) totalSale, 
						SUM( si.quantity) AS Squantity,
						s.date as sdate
						FROM " . $this->db->dbprefix('sales') . " s 
						JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " spv 
						ON spv.id=si.option_id
						WHERE s.date >= '{$start_date}' AND s.date < '{$end_date}' 
						".$where_s_biller."
						GROUP BY si.product_id ) PSales";

			$ppb = "( SELECT pi.product_id, 
						SUM( pi.quantity ) purchasedQty, 
						SUM( tpi.quantity_balance ) balacneQty, 
						SUM( (CASE WHEN pi.option_id <> 0 THEN pi.vcost ELSE pi.unit_cost END) *  tpi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * pi.quantity ) totalPurchase, 
						pi.date as pdate 
						FROM ( SELECT {$this->db->dbprefix('purchase_items')}.date as date, 
									{$this->db->dbprefix('purchase_items')}.product_id, 
									purchase_id, 
									SUM({$this->db->dbprefix('purchase_items')}.quantity) as quantity, 
									unit_cost,
									option_id,
									ppv.qty_unit AS vqty_unit,
									ppv.cost AS vcost,
									ppv.quantity AS vquantity 
									FROM erp_purchase_items 
									LEFT JOIN " . $this->db->dbprefix('purchases') . " pp 
									ON pp.id={$this->db->dbprefix('purchase_items')}.purchase_id  
									JOIN {$this->db->dbprefix('products')} p 
									ON p.id = {$this->db->dbprefix('purchase_items')}.product_id 
									LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
									ON ppv.id={$this->db->dbprefix('purchase_items')}.option_id  
									WHERE {$this->db->dbprefix('purchase_items')}.date <= '{$start_date}'
									".$where_p_biller."
									GROUP BY {$this->db->dbprefix('purchase_items')}.product_id ) pi 
						LEFT JOIN ( SELECT product_id, 
										SUM(quantity_balance) as quantity_balance 
										FROM {$this->db->dbprefix('purchase_items')} 
										GROUP BY product_id ) tpi on tpi.product_id = pi.product_id GROUP BY pi.product_id ) PCostsBegin";
            
			$spb = "( SELECT si.product_id, 
						SUM( si.quantity*(CASE WHEN si.option_id <> 0 THEN spv.qty_unit ELSE 1 END)) saleQty, 
						SUM( si.subtotal ) totalSale, 
						SUM( si.quantity) AS Squantity,
						s.date as sdate
						FROM " . $this->db->dbprefix('sales') . " s 
						JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " spv 
						ON spv.id=si.option_id
						WHERE s.date <= '{$start_date}' 
						".$where_s_biller."
						GROUP BY si.product_id ) PSalesBegin";
        } else {
			$current_date = date('Y-m-d');
			$prevouse_date = date('Y').'-'.date('m').'-'.'01';
            $pp = "( SELECT pi.product_id, 
						SUM( pi.quantity * (CASE WHEN pi.option_id <> 0 THEN pi.vqty_unit ELSE 1 END) ) purchasedQty, 
						SUM( tpi.quantity_balance ) balacneQty, 
						SUM( (CASE WHEN pi.option_id <> 0 THEN pi.vcost ELSE pi.unit_cost END) *  tpi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * pi.quantity ) totalPurchase, 
                        SUM(pi.unit_cost) AS totalCost,
						SUM(pi.quantity) AS Pquantity,
						pi.date as pdate 
						FROM ( SELECT {$this->db->dbprefix('purchase_items')}.date as date, 
									{$this->db->dbprefix('purchase_items')}.product_id, 
									purchase_id, 
									SUM({$this->db->dbprefix('purchase_items')}.quantity) as quantity, 
									unit_cost ,
									option_id,
									ppv.qty_unit AS vqty_unit,
									ppv.cost AS vcost,
									ppv.quantity AS vquantity
									FROM {$this->db->dbprefix('purchase_items')} 
									LEFT JOIN " . $this->db->dbprefix('purchases') . " pp 
									ON pp.id = {$this->db->dbprefix('purchase_items')}.purchase_id  
									JOIN {$this->db->dbprefix('products')} p 
									ON p.id = {$this->db->dbprefix('purchase_items')}.product_id 
									LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
									ON ppv.id={$this->db->dbprefix('purchase_items')}.option_id  
									".$where_purchase." 
									".$where_p_biller."
									GROUP BY {$this->db->dbprefix('purchase_items')}.product_id ) pi 			
						LEFT JOIN ( SELECT product_id, 
										SUM(quantity_balance) as quantity_balance 
										FROM {$this->db->dbprefix('purchase_items')} GROUP BY product_id 
									) tpi on tpi.product_id = pi.product_id GROUP BY pi.product_id ) PCosts";

			$sp = "( SELECT si.product_id, 
						COALESCE(SUM( si.quantity*(CASE WHEN si.option_id <> 0 THEN spv.qty_unit ELSE 1 END)),0) soldQty, 
						SUM( si.subtotal ) totalSale, 
						SUM( si.quantity) AS Squantity,
						s.date as sdate
						FROM " . $this->db->dbprefix('sales') . " s 
						JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " spv 
						ON spv.id=si.option_id
						".$where_sale."
						".$where_s_biller."
						GROUP BY si.product_id ) PSales";

			
			$ppb = "( SELECT pi.product_id, 
						SUM(pi.quantity) AS purchasedQty, 
						SUM( tpi.quantity_balance ) balacneQty, 
						SUM( (CASE WHEN pi.option_id <> 0 THEN pi.vcost ELSE pi.unit_cost END) * tpi.quantity_balance ) balacneValue, 
						SUM(pi.unit_cost * pi.quantity) totalPurchase, 
						pi.date as pdate 
						FROM ( SELECT {$this->db->dbprefix('purchase_items')}.date as date, 
									{$this->db->dbprefix('purchase_items')}.product_id, 
									purchase_id, 
									SUM({$this->db->dbprefix('purchase_items')}.quantity) as quantity, 
									unit_cost ,
									option_id,
									ppv.qty_unit AS vqty_unit,
									ppv.cost AS vcost,
									ppv.quantity AS vquantity
									FROM {$this->db->dbprefix('purchase_items')} 
									LEFT JOIN " . $this->db->dbprefix('purchases') . " pp 
									ON pp.id={$this->db->dbprefix('purchase_items')}.purchase_id  
									JOIN {$this->db->dbprefix('products')} p 
									ON p.id = {$this->db->dbprefix('purchase_items')}.product_id 
									LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
									ON ppv.id={$this->db->dbprefix('purchase_items')}.option_id  
									".$where_purchase." 
									".$where_p_biller."
									AND {$this->db->dbprefix('purchase_items')}.date < '{$prevouse_date}' 
									GROUP BY {$this->db->dbprefix('purchase_items')}.product_id ) pi 			
						LEFT JOIN ( SELECT product_id, 
										SUM(quantity_balance) as quantity_balance 
										FROM {$this->db->dbprefix('purchase_items')} 
										GROUP BY product_id ) tpi on tpi.product_id = pi.product_id GROUP BY pi.product_id ) PCostsBegin";
			
            $spb = "( SELECT si.product_id, 
						COALESCE(SUM( si.quantity*(CASE WHEN si.option_id <> 0 THEN spv.qty_unit ELSE 1 END)),0) saleQty, 
						SUM( si.subtotal ) totalSale, 
						SUM( si.quantity) AS Squantity,
						s.date as sdate
						FROM " . $this->db->dbprefix('sales') . " s 
						JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " spv 
						ON spv.id=si.option_id
						".$where_sale."
						".$where_s_biller."
						AND s.date < '{$prevouse_date}'
						GROUP BY si.product_id ) PSalesBegin";
        }
        $LYMD   ='';
        if ($pdf || $xls) 
		{
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->db
                ->select($this->db->dbprefix('products') . ".id as product_id, 
				" . $this->db->dbprefix('products') . ".code as product_code,
				" . $this->db->dbprefix('products') . ".name,
				COALESCE ((
					SELECT 
						SUM(
							" . $this->db->dbprefix('purchase_items') . ".quantity_balance
						) AS quantity
					FROM
						". $this->db->dbprefix('purchase_items') ."
					JOIN " . $this->db->dbprefix('products') . "  p ON p.id = " . $this->db->dbprefix('purchase_items') . ".product_id
					LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv ON ppv.id =" . $this->db->dbprefix('purchase_items') . ".option_id 
					WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$LYMD."'
					AND " . $this->db->dbprefix('products') . ".id = (p.id)
					AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
					GROUP BY
						DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m'),
						erp_products.id
				), 0 ) as BeginPS,
				CONCAT(
                    (COALESCE (erp_products.quantity.quantity, 0) - COALESCE (PCosts.Pquantity, 0) + COALESCE( PSales.Squantity, 0 ) + COALESCE (PCosts.Pquantity, 0)),
                    '__',
                    COALESCE (
                        PCosts.totalCost,
                        0
                    )) AS purchased,
				COALESCE( PSales.Squantity, 0 ) + COALESCE (
                        (
                            SELECT
                                SUM(si.quantity * ci.quantity)
                            FROM
                                erp_combo_items ci
                            INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
                            WHERE
                                ci.item_code = erp_products.code
                        ),
                        0
                    ) as sold,
					COALESCE((
							COALESCE (erp_products.quantity, 0) - COALESCE (PCosts.Pquantity, 0) + COALESCE (PSales.Squantity, 0) + COALESCE (PCosts.Pquantity, 0)) 
							- 
							COALESCE (PSales.Squantity, 0) + COALESCE (
							(
							SELECT
								SUM(si.quantity * ci.quantity)
							FROM
								erp_combo_items ci
							INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
							WHERE
								ci.item_code = erp_products.code
							),
							0), 0)
					AS balance", 
				FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
				->join($spb, 'products.id = PSalesBegin.product_id', 'left')
                ->join($ppb, 'products.id = PCostsBegin.product_id', 'left')
				->join('warehouses_products wp', 'products.id=wp.product_id', 'left')
				->join('categories', 'products.category_id=categories.id', 'left')
				->group_by("products.id");
            
			if ($supplier) {
				$this->db->where("products.supplier1 = '".$supplier."' or products.supplier2 = '".$supplier."' or products.supplier3 = '".$supplier."' or products.supplier4 = '".$supplier."' or products.supplier5 = '".$supplier."'");
            }else{
				//$this->db->where("COALESCE( PCosts.purchasedQty, 0 ) > 0 OR COALESCE( PSales.soldQty, 0 ) > 0");
			}
			
            if($in_out){
                if($in_out == 'in'){
                    $this->db->order_by('PCosts.purchasedQty', 'DESC');
                }else if($in_out == 'out'){
                    $this->db->order_by('PSales.soldQty', 'DESC');
                }
            }
			
			if($start_date && $end_date){
				
				$this->datatables->where("( 
				PCostsBegin.pdate BETWEEN '{$start_date}' AND '{$end_date}' 
				OR PSalesBegin.sdate BETWEEN '{$start_date}' AND  '{$end_date}'
				OR PCosts.pdate BETWEEN '{$start_date}' AND  '{$end_date}'
				OR PSales.sdate BETWEEN '{$start_date}' AND  '{$end_date}' )");
				
			}

            if ($product) {
                $this->db->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . ".category_id", $category);
            }
			
			if ($warehouse) {
                $this->db->where('wp.warehouse_id', $warehouse);
                $this->db->where('wp.quantity !=', 0);
            }
            
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('balance'));

                $row = 2;
                $sQty = 0;
                $pQty = 0;
                $bQty = 0;
                $pl = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->BalacneQty);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $bQty += $data_row->BalacneQty;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":G" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $bQty);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);

                $filename = 'products_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			$year = date('Y');
			$month = date('m');
			$YMD = $this->site->months($year, $month);
			if($YMD->date == ""){
				$LYMD = '0000-00-00';
			}else{
				$LYMD = $YMD->date;
			}
			$detail_sale = anchor('reports/view_sale_detail_in_out/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Sale_detail'), 'data-toggle="modal" data-target="#myModal"');
			$detail_purchase = anchor('reports/view_purchase_detail_in_out/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Purchase_detail'), 'data-toggle="modal" data-target="#myModal"');
					
			$action = '<div class="text-center"><div class="btn-group text-left">'
			. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
			. lang('actions') . ' <span class="caret"></span></button>
				<ul class="dropdown-menu pull-right" role="menu">
					<li>' . $detail_purchase . '</li>
					<li>' . $detail_sale . '</li>					
				<ul>
			</div></div>';
			
            $this->load->library('datatables');
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->datatables
                ->select($this->db->dbprefix('products') . ".id as product_id, 
				" . $this->db->dbprefix('products') . ".code as product_code,
				" . $this->db->dbprefix('products') . ".name,
				COALESCE ((
					SELECT 
						SUM(
							" . $this->db->dbprefix('purchase_items') . ".quantity_balance
						) AS quantity
					FROM
						". $this->db->dbprefix('purchase_items') ."
					JOIN " . $this->db->dbprefix('products') . "  p ON p.id = " . $this->db->dbprefix('purchase_items') . ".product_id
					LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv ON ppv.id =" . $this->db->dbprefix('purchase_items') . ".option_id 
					WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$LYMD."'
					AND " . $this->db->dbprefix('products') . ".id = (p.id)
					AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
					GROUP BY
						DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m'),
						erp_products.id
				), 0 ) as BeginPS,
				CONCAT(
                    ( COALESCE (" . $this->db->dbprefix('products') . ".quantity, 0) - COALESCE (PCosts.Pquantity, 0) + COALESCE( PSales.Squantity, 0 ) + COALESCE (PCosts.Pquantity, 0)),
                    '__',
                    COALESCE (
                        PCosts.totalCost,
                        0
                    )) AS purchased,
					COALESCE( PSales.Squantity, 0 ) + COALESCE (
                        (
                            SELECT
                                SUM(si.quantity * ci.quantity)
                            FROM
                                ".$this->db->dbprefix('combo_items') . " ci
                            INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
                            WHERE
                                ci.item_code = ".$this->db->dbprefix('products') . ".code
                        ),
                        0
                    ) as sold,
					COALESCE((
						COALESCE (erp_products.quantity, 0) - COALESCE (PCosts.Pquantity, 0) + COALESCE (PSales.Squantity, 0) + COALESCE (PCosts.Pquantity, 0)
					) - COALESCE (PSales.Squantity, 0) + COALESCE (
					(
						SELECT
							SUM(si.quantity * ci.quantity)
						FROM
							erp_combo_items ci
						INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
						WHERE
							ci.item_code = erp_products. CODE
					),
					0
					), 0)
					AS balance", 
				FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
				->join($spb, 'products.id = PSalesBegin.product_id', 'left')
                ->join($ppb, 'products.id = PCostsBegin.product_id', 'left')
				->join('warehouses_products wp', 'products.id=wp.product_id', 'left')
				->join('categories', 'products.category_id=categories.id', 'left')
				->group_by("products.id")
				->add_column("Action", $action, "product_code");
				
			if ($supplier) {
				$this->datatables->where("products.supplier1 = '".$supplier."' 
				or products.supplier2 = '".$supplier."' 
				or products.supplier3 = '".$supplier."' 
				or products.supplier4 = '".$supplier."' 
				or products.supplier5 = '".$supplier."'");
            }else{
				//$this->datatables->where("COALESCE( PCosts.purchasedQty, 0 ) > 0 OR COALESCE( PSales.soldQty, 0 ) > 0");
			}
			
            if($in_out){
                if($in_out == 'in'){
                    $this->datatables->where('PCosts.purchasedQty >=', 0);
                }else if($in_out == 'out'){
                    $this->datatables->where('PSales.soldQty >=', 0);
                }
            }
			
			if($start_date && $end_date){
				
				$this->datatables->where("( 
				/*PCostsBegin.pdate BETWEEN '{$start_date}' AND '{$end_date}' 
				OR PSalesBegin.sdate BETWEEN '{$start_date}' AND  '{$end_date}'
				OR*/ PCosts.pdate BETWEEN '{$start_date}' AND  '{$end_date}'
				OR PSales.sdate BETWEEN '{$start_date}' AND  '{$end_date}' )");
				
			}
			
            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . ".id", $product);
            }
			
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . ".category_id", $category);
            }
			
			if ($warehouse) {
                $this->datatables->where('wp.warehouse_id', $warehouse);
                $this->datatables->where('wp.quantity !=', 0);
            }
			
            echo $this->datatables->generate();

        }
	}
	
    function getProductsDaily($pdf = NULL, $xls = NULL)
    {
        
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }

        if ($this->input->get('year')) {
            $year = $this->input->get('year');
        } else {
            $year = NULL;
        }

        if ($this->input->get('month')) {
            $month = $this->input->get('month');
        } else {
            $month = 'NULL';
        }
		
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = NULL;
        }
        if ($this->input->get('in_out')) {
            $in_out = $this->input->get('in_out');
        } else {
            $in_out = 'all';
        }
        
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
         
		$YMD = $this->site->months($year,$month);
		if($YMD->date == ""){
			$LYMD = "0000-00-00";
		}else{
			$LYMD = $YMD->date;
		}
		 
		if($in_out == 'in'){
			
		}
	   $part1 = "COALESCE(
					CASE WHEN 'in' = '" . $in_out . "' or 'all' = '" . $in_out . "' THEN
					(
						(
							SELECT
								SUM(
									" . $this->db->dbprefix('purchase_items') . ".quantity_balance
								) AS quantity
							FROM
								" . $this->db->dbprefix('purchase_items') . "
							JOIN " . $this->db->dbprefix('products') . "  p ON p.id = " . $this->db->dbprefix('purchase_items') . ".product_id
							LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv ON ppv.id =" . $this->db->dbprefix('purchase_items') . ".option_id ";
                            
		$part2 = " 		GROUP BY
								DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m'),
								erp_products.id
						) + 
						(
							CASE WHEN 
								(SELECT 
									SUM(
										" . $this->db->dbprefix('purchase_items') . ".quantity_balance
									) AS quantity
								FROM
									". $this->db->dbprefix('purchase_items') ."
								JOIN " . $this->db->dbprefix('products') . "  p ON p.id = " . $this->db->dbprefix('purchase_items') . ".product_id
								LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv ON ppv.id =" . $this->db->dbprefix('purchase_items') . ".option_id 
								WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$LYMD."'
								AND " . $this->db->dbprefix('products') . ".id = (p.id)
								AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
								GROUP BY
									DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m'),
									erp_products.id
								) IS NULL THEN 0 
							ELSE
								(SELECT 
									SUM(
										" . $this->db->dbprefix('purchase_items') . ".quantity_balance
									) AS quantity
								FROM
									". $this->db->dbprefix('purchase_items') ."
								JOIN " . $this->db->dbprefix('products') . "  p ON p.id = " . $this->db->dbprefix('purchase_items') . ".product_id
								LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv ON ppv.id =" . $this->db->dbprefix('purchase_items') . ".option_id 
								WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$LYMD."'
								AND " . $this->db->dbprefix('products') . ".id = (p.id)
								AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
								GROUP BY
									DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m'),
									erp_products.id
								)
							END
						)
					) ELSE 0 END, 
				0)";

            $list=array();
            for($d=1; $d<=31; $d++)
            {
                $time=mktime(12, 0, 0, $month, $d, $year);          
                if (date('m', $time)==$month)       
                    $list[]= date('Y-m-d', $time);
            }
            $d  = 1;
            $D1 = ""; $D2 = ""; $D3 = ""; $D4 = ""; $D5 = ""; $D6 = ""; $D7 = ""; $D8 = "";$D9 = ""; $D10 = ""; $D11 = ""; $D12 = ""; $D13 = ""; $D14 = ""; $D15 = ""; $D16 = ""; $D17 = ""; $Degithty = ""; $D19 = ""; $D20 = ""; $D21 = ""; $D22 = ""; $D23 = ""; $D24 = "";

            foreach ($list as $rws) {
                $dnumber    = $d;

                if(1 == $d):
                    $D1 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                            AS " . "DayNumber".$d . " ";
                endif;

                if(2 == $d):
                    $D2 = " ". $part1 ." 
							WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
						    AS " . "DayNumber".$d . " ";
                endif;
                if(3 == $d):
                    $D3 = " ". $part1 ." 
							WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(4 == $d):
                    $D4 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(5 == $d):
                    $D5 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(6 == $d):
                    $D6 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(7 == $d):
                    $D7 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(8 == $d):
                    $D8 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(9 == $d):
                    $D9 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(10 == $d):
                    $D10 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(11 == $d):
                    $D11 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(12 == $d):
                    $D12 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(13 == $d):
                    $D13 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(14 == $d):
                    $D14 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(15 == $d):
                    $D15 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(16 == $d):
                    $D16 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(17 == $d):
                    $D17 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(18 == $d):
                    $D18 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(19 == $d):
                    $D19 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(20 == $d):
                    $D20 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(21 == $d):
                    $D21 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(22 == $d):
                    $D22 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(23 == $d):
                    $D23 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(24 == $d):
                    $D24 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(25 == $d):
                    $D25 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(26 == $d):
                    $D26 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(27 == $d):
                    $D27 = " ". $part1 ." 
                            WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(28 == $d):
                    $D28 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(29 == $d):
                    $D29 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(30 == $d):
                    $D30 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;
                if(31 == $d):
                    $D31 = " ". $part1 ." 
                           WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '$rws'
                            AND " . $this->db->dbprefix('products') . ".id = (p.id)
                            AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
                            ". $part2 ." 
                             AS " . "DayNumber".$d . " ";
                endif;

                $d ++;
            }
            $detail_sale = anchor('reports/view_sale_detail_in_out/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Sale_detail'), 'data-toggle="modal" data-target="#myModal"');
            $detail_purchase = anchor('reports/view_purchase_detail_in_out/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Purchase_detail'), 'data-toggle="modal" data-target="#myModal"');
                    
            $action = '<div class="text-center"><div class="btn-group text-left">'
            . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
            . lang('actions') . ' <span class="caret"></span></button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>' . $detail_purchase . '</li>
                <li>' . $detail_sale . '</li>                   
            <ul>
            </div></div>';

            $this->load->library('datatables');
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->datatables
                ->select($this->db->dbprefix('products') . ".code as product_code, 
                " . $this->db->dbprefix('products') . ".name ,
                ".  $D1 ." , 
                ".  $D2 ." , 
                ".  $D3 ." , 
                ".  $D4 ." , 
                ".  $D5 ." , 
                ".  $D6 ." , 
                ".  $D7 ." , 
                ".  $D8 ." , 
                ".  $D9 ." , 
                ".  $D10 ." , 
                ".  $D11 ." , 
                ".  $D12 ." , 
                ".  $D13 ." , 
                ".  $D14 ." , 
                ".  $D15 ." , 
                ".  $D16 ." , 
                ".  $D17 ." , 
                ".  $D18 ." , 
                ".  $D19 ." , 
                ".  $D20 ." , 
                ".  $D21 ." , 
                ".  $D22 ." , 
                ".  $D23 ." , 
                ".  $D24 ." , 
                ".  $D25 ." , 
                ".  $D26 ." 
                ".  ($D27 != "" ? ", " . $D27 : "") ."
                ".  ($D28 != "" ? ", " . $D28 : "") ." 
                ".  ($D29 != "" ? ", " . $D29 : "") ." 
                ".  ($D30 != "" ? ", " . $D30 : "") ." 
                ".  ($D31 != "" ? ", " . $D31 : "") ." ", 
                FALSE)
                ->from('products')
                ->join('warehouses_products wp', 'products.id=wp.product_id', 'left')
                ->join('categories', 'products.category_id=categories.id', 'left')
                ->group_by("products.id");
            
            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . ".category_id", $category);
            }
            
            if ($warehouse) {
                $this->datatables->where('wp.warehouse_id', $warehouse);
                $this->datatables->where('wp.quantity !=', 0);
            }


            $this->datatables->add_column("Actions", "product_code");
            echo $this->datatables->generate();
    }
	
	function getProductsMonthly($pdf = NULL, $xls = NULL)
    {
        
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }

        if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = NULL;
        }
        if ($this->input->get('in_out')) {
            $in_out = $this->input->get('in_out');
        } else {
            $in_out = 'all';
        }
		
		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }

		$part1 = "COALESCE(
						CASE WHEN 'in' = '" . $in_out . "' or 'all' = '" . $in_out . "' THEN
						(
							(
								SELECT
									SUM(
										" . $this->db->dbprefix('purchase_items') . ".quantity_balance
									) AS quantity
								FROM
									" . $this->db->dbprefix('purchase_items') . "
								JOIN " . $this->db->dbprefix('products') . "  p ON p.id = " . $this->db->dbprefix('purchase_items') . ".product_id
								LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv ON ppv.id =" . $this->db->dbprefix('purchase_items') . ".option_id"; 
		$part2 = "
									AND " . $this->db->dbprefix('products') . ".id = (p.id)
									AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
									GROUP BY
									DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m'),
									erp_products.id
							) + 
							(
								CASE WHEN 
									(
										SELECT 
											SUM(
												" . $this->db->dbprefix('purchase_items') . ".quantity_balance
											) AS quantity
										FROM
											". $this->db->dbprefix('purchase_items') ."
										JOIN " . $this->db->dbprefix('products') . "  p ON p.id = " . $this->db->dbprefix('purchase_items') . ".product_id
										LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv ON ppv.id =" . $this->db->dbprefix('purchase_items') . ".option_id";
		
		$part3 = "					AND " . $this->db->dbprefix('products') . ".id = (p.id)
										AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
										GROUP BY
											DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m'),
											erp_products.id
									) IS NULL THEN 0 
								ELSE
									(
										SELECT 
											SUM(
												" . $this->db->dbprefix('purchase_items') . ".quantity_balance
											) AS quantity
										FROM
											". $this->db->dbprefix('purchase_items') ."
										JOIN " . $this->db->dbprefix('products') . "  p ON p.id = " . $this->db->dbprefix('purchase_items') . ".product_id
										LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv ON ppv.id =" . $this->db->dbprefix('purchase_items') . ".option_id ";
									
		$part4 = "					AND " . $this->db->dbprefix('products') . ".id = (p.id)
										AND " . $this->db->dbprefix('purchase_items') . ".status <> 'ordered'
										GROUP BY
											DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m'),
											erp_products.id
									)
								END
							)
						) ELSE  ";
		
		$part5 = "(SELECT SUM(erp_sale_items.quantity) FROM erp_sales
					JOIN erp_sale_items ON erp_sales.id = sale_id
					JOIN erp_products p ON p.id = erp_sale_items.product_id
					LEFT JOIN erp_product_variants ON erp_product_variants.id = erp_sale_items.option_id";
			
		$detail_sale = anchor('reports/view_sale_detail_in_out/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Sale_detail'), 'data-toggle="modal" data-target="#myModal"');
		$detail_purchase = anchor('reports/view_purchase_detail_in_out/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Purchase_detail'), 'data-toggle="modal" data-target="#myModal"');
				
		$action = '<div class="text-center"><div class="btn-group text-left">'
		. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
		. lang('actions') . ' <span class="caret"></span></button>
		<ul class="dropdown-menu pull-right" role="menu">
			<li>' . $detail_purchase . '</li>
			<li>' . $detail_sale . '</li>					
		<ul>
		</div></div>';
		$this->load->library('datatables');
		$this->db->query('SET SQL_BIG_SELECTS=1');
		$this->datatables
			->select($this->db->dbprefix('products') . ".code as product_code, 
			" . $this->db->dbprefix('products') . ".name ,
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-01')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('01', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('01', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-01') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS january,
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-02')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('0-1', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('0-1', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-02') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS february,
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-03')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('02', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('02', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-03') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS march,
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-04')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('03', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('03', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-04') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS april,
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-05')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('04', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('04', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-05') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS may,
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-06')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('05', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('05', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-06') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS june,
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-07')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('06', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('06', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-07') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS july,
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-08')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('07', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('07', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-08') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS august, 
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-09')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('08', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('08', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-09') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS september, 
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-10')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('09', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('09', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-10') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS october, 
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-11')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('10', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('10', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date,  '%Y-%m') = CONCAT(YEAR(CURDATE()),'-11') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS november, 
			(
				". $part1 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-12')
				". $part2 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('11', 'product_code')."'
				". $part3 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('purchase_items') . ".date, '%Y-%m-%d') = '".$this->site->month('11', 'product_code')."'
				". $part4 ."
				". $part5 ."
						WHERE DATE_FORMAT(" . $this->db->dbprefix('sales') . ".date, '%Y-%m') = CONCAT(YEAR(CURDATE()),'-12') AND erp_products.id = (p.id)
						GROUP BY DATE_FORMAT(date(erp_sales.date),'%Y-%m'),erp_products.id)
				 		END,0)
			)
			AS december",  
			FALSE)
			->from('products')
			->join('warehouses_products wp', 'products.id=wp.product_id', 'left')
			->join('categories', 'products.category_id=categories.id', 'left')
			->group_by("products.id");
		
		if ($product) {
			$this->datatables->where($this->db->dbprefix('products') . ".id", $product);
		}
		if ($category) {
			$this->datatables->where($this->db->dbprefix('products') . ".category_id", $category);
		}
		
		if ($warehouse) {
			$this->datatables->where('wp.warehouse_id', $warehouse);
			$this->datatables->where('wp.quantity !=', 0);
		}
		$this->datatables->add_column("Actions", "product_code");
		echo $this->datatables->generate();
    }

    function getCategoriesReport($pdf = NULL, $xls = NULL)
    {
		
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = NULL;
        }
		
		if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }
		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('start_date')) {
			 $start_date = $this->erp->fsd($this->input->get('start_date'));
			 $start_date2 = $this->erp->fsd($this->input->get('start_date'));
		 }else{
			$start_date = $this->reports_model->getLastDate("purchases","date");
			$start_date2 = $this->reports_model->getLastDate("sales","date");
		 }
		if ($this->input->get('end_date')) {
			 $end_date = $this->erp->fsd($this->input->get('end_date'));
			  $end_date2 = $this->erp->fsd($this->input->get('end_date'));
		 }else{
			$end_date = $this->reports_model->getLastDate("purchases","date");
			$end_date2 = $this->reports_model->getLastDate("sales","date");
		 }
		
		if($biller_id){
			$where_p_biller = "AND p.biller_id = {$biller_id} ";
			$where_s_biller = "AND s.biller_id = {$biller_id} ";
			$where_p_biller_where = "WHERE p.biller_id = {$biller_id} ";
			$where_s_biller_where = "WHERE s.biller_id = {$biller_id} ";
		}else{
			$where_p_biller = 'AND 1=1 ';
			$where_s_biller = 'AND 1=1 ';
			$where_p_biller_where = "WHERE 1=1 ";
			$where_s_biller_where = "WHERE 1=1 ";
		}
		$wid = $this->reports_model->getWareByUserID();
		
        if ($start_date && $end_date) {
           
			if($warehouse){
				
				$pp = "( SELECT pp.category_id as category, pi.product_id, SUM( pi.quantity ) purchasedQty, SUM( pi.net_unit_cost * pi.quantity ) totalPurchase, p.date as pdate from " . $this->db->dbprefix('products') . " pp
                left JOIN " . $this->db->dbprefix('purchase_items') . " pi on pp.id = pi.product_id
                left join " . $this->db->dbprefix('purchases') . " p ON p.id = pi.purchase_id
				where p.date >= '$start_date' AND p.date <= '$end_date' AND p.warehouse_id = '$warehouse' group by pp.category_id 
                ) PCosts";
				
            $sp = "( SELECT sp.category_id as category, si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, s.date as sdate from " . $this->db->dbprefix('products') . " sp
                left JOIN " . $this->db->dbprefix('sale_items') . " si on sp.id = si.product_id
                left join " . $this->db->dbprefix('sales') . " s ON s.id = si.sale_id
                where s.date >= '$start_date2' and s.date <= '$end_date2'  AND s.warehouse_id = '$warehouse' group by sp.category_id 
                ) PSales";
			}else{
				if($wid){
				$pp = "( SELECT pp.category_id as category, pi.product_id, SUM( pi.quantity ) purchasedQty, SUM( pi.net_unit_cost * pi.quantity ) totalPurchase, p.date as pdate from " . $this->db->dbprefix('products') . " pp
					left JOIN " . $this->db->dbprefix('purchase_items') . " pi on pp.id = pi.product_id
					left join " . $this->db->dbprefix('purchases') . " p ON p.id = pi.purchase_id
					where p.date >= '$start_date' AND p.date <= '$end_date' AND p.warehouse_id IN ($wid) group by pp.category_id 
					) PCosts";
					
				$sp = "( SELECT sp.category_id as category, si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, s.date as sdate from " . $this->db->dbprefix('products') . " sp
					left JOIN " . $this->db->dbprefix('sale_items') . " si on sp.id = si.product_id
					left join " . $this->db->dbprefix('sales') . " s ON s.id = si.sale_id
					where s.date >= '$start_date2' and s.date <= '$end_date2'  AND s.warehouse_id IN ($wid) group by sp.category_id 
					) PSales";
				}else{
					
					$pp = "( SELECT pp.category_id as category, pi.product_id, SUM( pi.quantity ) purchasedQty, SUM( pi.net_unit_cost * pi.quantity ) totalPurchase, p.date as pdate from " . $this->db->dbprefix('products') . " pp
					left JOIN " . $this->db->dbprefix('purchase_items') . " pi on pp.id = pi.product_id
					left join " . $this->db->dbprefix('purchases') . " p ON p.id = pi.purchase_id
					where p.date >= '$start_date 00:00:00' AND p.date <= '$end_date 23:59:00'  group by pp.category_id 
					) PCosts";
					$sp = "( SELECT sp.category_id as category, si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, s.date as sdate from " . $this->db->dbprefix('products') . " sp
					left JOIN " . $this->db->dbprefix('sale_items') . " si on sp.id = si.product_id
					left join " . $this->db->dbprefix('sales') . " s ON s.id = si.sale_id
					where s.date >= '$start_date2 00:00:00' and s.date <= '$end_date2 23:59:00'  group by sp.category_id 
					) PSales";
				}
			}
        } else {
			if($warehouse){
				$pp = "( SELECT pp.category_id as category, pi.product_id, SUM( pi.quantity ) purchasedQty, SUM( pi.net_unit_cost * pi.quantity ) totalPurchase from " . $this->db->dbprefix('products') . " pp
					left JOIN " . $this->db->dbprefix('purchase_items') . " pi on pp.id = pi.product_id 
					where pi.warehouse_id = '$warehouse'
					group by pp.category_id
					) PCosts";
				$sp = "( SELECT sp.category_id as category, si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale from " . $this->db->dbprefix('products') . " sp
					left JOIN " . $this->db->dbprefix('sale_items') . " si on sp.id = si.product_id 
					where si.warehouse_id = '$warehouse'
					group by sp.category_id 
					) PSales";
			}else{
				if($wid){
				$pp = "( SELECT pp.category_id as category, pi.product_id, SUM( pi.quantity ) purchasedQty, SUM( pi.net_unit_cost * pi.quantity ) totalPurchase from " . $this->db->dbprefix('products') . " pp
					left JOIN " . $this->db->dbprefix('purchase_items') . " pi on pp.id = pi.product_id 
					where pi.warehouse_id IN ($wid)
					group by pp.category_id
					) PCosts";
				$sp = "( SELECT sp.category_id as category, si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale from " . $this->db->dbprefix('products') . " sp
					left JOIN " . $this->db->dbprefix('sale_items') . " si on sp.id = si.product_id 
					where si.warehouse_id IN ($wid)
					group by sp.category_id 
					) PSales";
				}else{
					$pp = "( SELECT pp.category_id as category, pi.product_id, SUM( pi.quantity ) purchasedQty, SUM( pi.net_unit_cost * pi.quantity ) totalPurchase from " . $this->db->dbprefix('products') . " pp
					left JOIN " . $this->db->dbprefix('purchase_items') . " pi on pp.id = pi.product_id 
					group by pp.category_id
					) PCosts";
				$sp = "( SELECT sp.category_id as category, si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale from " . $this->db->dbprefix('products') . " sp
					left JOIN " . $this->db->dbprefix('sale_items') . " si on sp.id = si.product_id 
					group by sp.category_id 
					) PSales";
					
				}
			}
        }
        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('categories') . ".id as cidd, " .$this->db->dbprefix('categories') . ".code, " . $this->db->dbprefix('categories') . ".name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit", FALSE)
                ->from('categories')
                ->join($sp, 'categories.id = PSales.category', 'left')
                ->join($pp, 'categories.id = PCosts.category', 'left')
				//->where('categories.id','id')
            ->group_by('categories.id');

            if ($category) {
                $this->db->where($this->db->dbprefix('categories') . ".id", $category);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('categories_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('category_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('category_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('profit_loss'));

                $row = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $pl = 0;
                foreach ($data as $data_row) {
                    $profit = $data_row->TotalSales - $data_row->TotalPurchase;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $profit);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $pl += $profit;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":G" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $pl);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);

                $filename = 'categories_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

			
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('categories') . ".id as cidd, " .$this->db->dbprefix('categories') . ".code, " . $this->db->dbprefix('categories') . ".name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit", FALSE)
                ->from('categories')
                ->join($sp, 'categories.id = PSales.category', 'left')
                ->join($pp, 'categories.id = PCosts.category', 'left')
            ->group_by('categories.id');

            if ($category) {
                $this->datatables->where($this->db->dbprefix('categories') . ".id", $category);
            }
            $this->datatables->unset_column('cid');
            echo $this->datatables->generate();

        }

    }
	
	function getCategoriesValueReport($pdf = NULL, $xls = NULL)
    {       
		$wid = $this->reports_model->getWareByUserID();
        if ($pdf || $xls) {

            $this->db
                ->select('
					categories.id AS cid, 
					categories.code, 
					categories.name, 
					COALESCE(SUM(erp_products.quantity), 0) AS current_stock, 
					COALESCE(SUM(cost*erp_products.quantity), 0) AS total_cost, 
					COALESCE(SUM(price*erp_products.quantity), 0) AS total_price,				
					COALESCE(SUM(price*erp_products.quantity) - SUM(cost*erp_products.quantity), 0) as balance')
				->from('categories')
				->join('products', 'products.category_id = categories.id', 'left')
				->join('erp_warehouses_products', 'erp_warehouses_products.product_id = products.id', 'left');
				if($wid){
					$this->db->where("erp_warehouses_products.warehouse_id IN ($wid)");
				}
				$this->db->group_by('categories.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('categories_value_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('category_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('category_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('category_stock'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('costs'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('price'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('balance'));
				
                $row        = 2;
                $sQty       = 0;
                $cQty       = 0;
                $pAmt       = 0;
                $pl         = 0;
                $balance    = 0;
                foreach ($data as $data_row) {
                    $profit = $data_row->TotalSales - $data_row->TotalPurchase;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->current_stock);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->total_cost);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->total_price);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->balance);
					
                    $sQty += $data_row->current_stock;
                    $cQty += $data_row->total_cost;
                    $pAmt += $data_row->total_price;
					$balance += $data_row->balance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":F" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $cQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $pAmt);
				$this->excel->getActiveSheet()->SetCellValue('F' . $row, $balance);
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);	
				
                $filename = 'categories_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }
                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:H' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select('
				categories.id AS id, 
				categories.id AS cid, 
				categories.code, 
				categories.name, 
				COALESCE(SUM(erp_products.quantity), 0) AS current_stock, 
				COALESCE(SUM(cost*erp_products.quantity), 0) AS total_cost, 
				COALESCE(SUM(price*erp_products.quantity), 0) AS total_price,				
				COALESCE(SUM(price*erp_products.quantity) - SUM(cost*erp_products.quantity), 0) as balance')
				->from('categories')
				->join('products', 'products.category_id = categories.id', 'left');
				// ->join('erp_warehouses_products', 'erp_warehouses_products.product_id = products.id', 'left');

				$this->datatables->group_by('categories.id');

			$this->datatables->unset_column('cid');
            echo $this->datatables->generate();
        }
    }
	
	function shops()
    {
        $this->erp->checkPermissions('project',NULL,'sale_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('shops_report')));
        $meta = array('page_title' => lang('billers_report'), 'bc' => $bc);
        $this->page_construct('reports/shops', $meta, $this->data);
    }
	
	function getShops($pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('customers', TRUE);

        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id=companies.id')
                ->where('companies.group_name', 'customer')
                ->order_by('companies.company asc')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatNumber($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($data_row->balance));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'customers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id=companies.id')
                ->where('companies.group_name', 'customer')
                ->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/customer_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id")
                ->unset_column('id');
            echo $this->datatables->generate();

        }

    }

    function project_plan_report()
    {
        if($this->input->post('start_date')){
            $start_date =  $this->erp->fld($this->input->post('start_date'));
            $this->data['start_date2'] = trim($start_date);
        }else{
            $start_date =null;
            $this->data['start_date2'] = 0;
        }
        
        if($this->input->post('end_date')){
            $end_date = $this->erp->fld($this->input->post('end_date'));
            $this->data['end_date2'] = trim($end_date);
        }else{
            $end_date = null;
            $this->data['end_date2'] = 0;
        }
        
        if($this->input->post('customer')){
            $customer = $this->input->post('customer');
            $this->data['customer2'] = $customer;
        }else{
            $customer = null;
            $this->data['customer2'] = 0;
        }
        
        if($this->input->post('balance')){
            $balance = $this->input->post('balance');
            $this->data['balance2'] = $balance;
        }else{
            $balance = 'all';
            $this->data['balance2'] = 'all';
        }           
        
        $cust_data[] 			= "";
        $pplans 				= $this->reports_model->getProjectPlanName($start_date, $end_date, $customer, $balance);
        $this->data['pplans'] 	= $pplans;

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('project_plan_report')));
        $meta = array('page_title' => lang('project_plan_report'), 'bc' => $bc);
        $this->page_construct('reports/project_plan_report', $meta, $this->data);
    
    }
	
	function getBillers($pdf = NULL, $xls = NULL)
    {
        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(" . $this->db->dbprefix('sales') . ".grand_total), 0) as total_amount, (COALESCE(sum(" . $this->db->dbprefix('sales') . ".grand_total), 0) * (" . $this->db->dbprefix('companies') . ".cf6/100)) as total_earned, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.biller_id=companies.id')
                ->where('companies.group_name', 'biller')
                ->order_by('companies.company asc')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            }else {
               $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('billers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('total_earned'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatNumber($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($data_row->total_amount));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($data_row->total_earned));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatMoney($data_row->balance));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $filename = 'billers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . ".id as idd, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(" . $this->db->dbprefix('sales') . ".grand_total), 0) as total_amount, (COALESCE(sum(" . $this->db->dbprefix('sales') . ".grand_total), 0) * (" . $this->db->dbprefix('companies') . ".cf6/100)) as total_earned, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.biller_id=companies.id')
                ->where('companies.group_name', 'biller')
                ->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/biller_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "idd")
                ->unset_column('id');
            echo $this->datatables->generate();

        }

    }
	
	function shop_report($user_id = NULL)
    {
        $this->erp->checkPermissions('customers', TRUE);
        if (!$user_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_customer_selected"));
            redirect('reports/shops');
        }
        $date       = null;
        $this->data['sales'] = $this->reports_model->getSalesTotals($user_id);
        $this->data['total_sales'] = $this->reports_model->getCustomerSales($user_id);
        $this->data['total_quotes'] = $this->reports_model->getCustomerQuotes($user_id);
        $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
			
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
		
		$this->data['date'] = $date;
		
        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('billers_report')));
        $meta = array('page_title' => lang('billers_report'), 'bc' => $bc);
        $this->page_construct('reports/shop_report', $meta, $this->data);
    }

    function profits($date = NULL)
    {
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fld($this->input->get('start_date'));
        } else {
            $start_date = NULL;
        }

        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fld($this->input->get('end_date'));
        } else {
            $end_date = NULL;
        }

        if ( ! $date) { $date = date('Y-m-d'); }
        $date = date('Y-m-d', strtotime($date));
        $this->data['revenues'] = $this->reports_model->getDailySaleRevenues($date, $start_date, $end_date);
        $this->data['costing'] = $this->reports_model->getCosting($date);
        $this->data['expenses'] = $this->reports_model->getExpenses($date);
        $this->data['discount_date'] = $this->reports_model->getTotalDiscountDate($date);
        $refund =  $this->reports_model->getSalesReturnDate($date);
        $this->data['refunds'] =$refund;
        $this->data['discount'] = $refund->order_discount;
        $this->data['shipping'] = $refund->shippings;
        $this->data['order_tax'] = $refund->order_taxs;
        $this->data['count_dis'] = $this->reports_model->Count_Sale_discount($date);
        $this->data['count_ship'] = $this->reports_model->Count_Sale_shipping($date);
        $this->data['date'] = $date;
        $this->data['sales'] = $this->reports_model->getSaleDaily($date);

        $this->load->view($this->theme . 'reports/profits', $this->data);
    }

    function profits_json($date = NULL)
    {
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fld($this->input->get('start_date'));
        } else {
            $start_date = NULL;
        }

        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fld($this->input->get('end_date'));
        } else {
            $end_date = NULL;
        }

        if ( ! $date) { $date = date('Y-m-d'); }
        $date = date('Y-m-d', strtotime($date));
        $this->data['date'] = $date;

        $refund =  $this->reports_model->getSalesReturnDate($date, $start_date, $end_date);
        $data['revenues'] = $this->reports_model->getDailySaleRevenues($date, $start_date, $end_date);
        $data['discount'] = $refund->order_discount;
        $data['count_dis'] = $this->reports_model->Count_Sale_discount($date, $start_date, $end_date);
        $data['shipping'] = $refund->shippings;
        $data['order_tax'] = $refund->order_taxs;
        $data['count_ship'] = $this->reports_model->Count_Sale_shipping($date, $start_date, $end_date);
        $data['refunds'] = $refund;
        $data['costing'] = $this->reports_model->getCosting($date, $start_date, $end_date);
        $data['expenses'] = $this->reports_model->getExpenses($date, $start_date, $end_date);

        echo json_encode($data);
    }

    function profit_by_pm($date = NULL, $user_id = NULL)
    {
        if ( ! $date) { $date = date('Y-m-d'); }
        $date = date('Y-m-d', strtotime($date));
        $this->data['revenues'] = $this->reports_model->getDailySaleRevenuesByPM($date, $user_id);
        $this->data['costing'] = $this->reports_model->getCostingByPM($date, $user_id);
        $this->data['expenses'] = $this->reports_model->getExpensesByPM($date, $user_id);
        $this->data['discount_date'] = $this->reports_model->getTotalDiscountDateByPM($date, $user_id);
        $refund =  $this->reports_model->getSalesReturnDateByPM($date, $user_id);
        $this->data['refunds'] =$refund;
        $this->data['discount'] = $refund->order_discount;
        $this->data['count_dis'] = $this->reports_model->countSaleDiscountByPM($date, $user_id);
        $this->data['date'] = $date;
        $this->data['sales'] = $this->reports_model->getSaleDailyByPM($date, $user_id);
        $this->load->view($this->theme . 'reports/profit', $this->data);
    }
	
	function profitPurchase($date = NULL)
    {
        $this->erp->checkPermissions('daily', false, 'purchase_report');
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
			if ($user) {
				$this->db->where('purchases.created_by', $user);
			}
		}
        if ( ! $date) { $date = date('Y-m-d'); }
        $this->data['purchase'] = $this->reports_model->getPurchaseing($date);		
        $this->data['date'] = $date;
        $this->load->view($this->theme . 'reports/purchasesreport', $this->data);
    }
	
	function profit($date = NULL)
    {
        $this->erp->checkPermissions('daily', false, 'sale_report');
        if ( ! $date) { $date = date('Y-m-d'); }
        $this->data['sales'] = $this->reports_model->getSaleDailies($date);		
        $this->data['date'] = $date;
        $this->load->view($this->theme . 'reports/profit', $this->data);
    }
    function profitByBiller($date = NULL,$biller=NULL)
    {
        $this->erp->checkPermissions('daily', false, 'sale_report');
        if ( ! $date) { $date = date('Y-m-d'); }
        if($biller){$biller=$biller;}else{$biller=$this->session->userdata('biller_id');}
        $this->data['sales'] = $this->reports_model->getSaleDailiesByBiller($date,$biller);
        $this->data['date'] = $date;
        $this->data['biller'] = $this->companies_model->getCompanyByID($biller);
        $this->load->view($this->theme . 'reports/profit', $this->data);
    }
	function profit_staff($id,$date = NULL)
    {
        if ( ! $date) { $date = date('Y-m-d'); }
        $this->data['sales'] = $this->reports_model->getSaleDailieStaff($id,$date);		
        $this->data['date'] = $date;
        $this->load->view($this->theme . 'reports/profit_staff', $this->data);
    }
	function profit_staff1($id,$date = NULL)
    {
        if ( ! $date) { $date = date('Y-m-d'); }
        $this->data['sales'] = $this->reports_model->getPurchaseDailieStaff($id,$date);		
        $this->data['date'] = $date;
        $this->load->view($this->theme . 'reports/profit_staff1', $this->data);
    }
	function daily_sales($year = NULL, $month = NULL, $pdf = NULL, $user_id = NULL)
    {
        $this->erp->checkPermissions('daily',NULL,'sale_report');
        $b=$this->input->post('biller');
        if (isset($b)) {
            $biller = $this->input->post('biller');
            $this->session->set_userdata('biller_id',$biller);
            $this->data['biller']=$this->companies_model->getCompanyByID($biller);
        } else {
            $biller = $this->session->userdata('biller_id');
        }
        $this->data['biller_id']=$biller;
        if (!$year) {
            $year = date('Y');
        }
        if (!$month) {
            $month = date('m');
        }
        /*if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }*/
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/daily_sales'),
            'month_type' => 'long',
            'day_type' => 'long',
        );

        $config['template'] = '{table_open}<table border="0" cellpadding="0" cellspacing="0" 
		class="table table-bordered dfTable">{/table_open}
		{heading_row_start}<tr>{/heading_row_start}
		{heading_previous_cell}<th><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
		{heading_title_cell}<th colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
		{heading_next_cell}<th><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
		{heading_row_end}</tr>{/heading_row_end}
		{week_row_start}<tr>{/week_row_start}
		{week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
		{week_row_end}</tr>{/week_row_end}
		{cal_row_start}<tr class="days">{/cal_row_start}
		{cal_cell_start}<td class="day">{/cal_cell_start}
		{cal_cell_content}
		<div class="day_num">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content}
		{cal_cell_content_today}
		<div class="day_num highlight">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content_today}
		{cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
		{cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
		{cal_cell_blank}&nbsp;{/cal_cell_blank}
		{cal_cell_end}</td>{/cal_cell_end}
		{cal_row_end}</tr>{/cal_row_end}
		{table_close}</table>{/table_close}';

        $this->load->library('calendar', $config);
        $sales = $user_id ? $sales = $this->reports_model->getStaffDailySalesByBiller($user_id, $year, $month,$biller) : $this->reports_model->getDailySalesByBiller($year, $month,$biller);
		
        if (!empty($sales)) {
            foreach ($sales as $sale) {
				$d = date('Y-m-d', strtotime($year . '-' . $month . '-' . $sale->date));
				$refund = $this->reports_model->getSalesReturnDate($d);
                $daily_sale[$sale->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'>				
				<tr><td>" . lang("amount") . "</td><td>" . $this->erp->formatMoney($sale->total) . "</td></tr>
				<tr><td>" . lang("order_discount") . "</td><td>" . $this->erp->formatMoney($sale->order_discount) . "</td></tr>
				<tr><td>" . lang("shipping") . "</td><td>" . $this->erp->formatMoney($sale->shipping) . "</td></tr>
				<tr><td>" . lang("product_tax") . "</td><td>" . $this->erp->formatMoney($sale->tax1) . "</td></tr>
				<tr><td>" . lang("refund") . "</td><td>" . $this->erp->formatMoney($sale->t_return) . "</td></tr>
				<tr><td>" . lang("order_tax") . "</td><td>" . $this->erp->formatMoney($sale->tax2) . "</td></tr>
				<tr><td>" . lang("total") . "</td><td>" . $this->erp->formatMoney((($sale->total - $sale->t_return) + $sale->shipping + $sale->tax2) - $sale->order_discount) . "</td></tr>
				<tr><td>" . lang("award_points") . "</td><td>" . intval(($sale->total - $sale->t_return)/ $this->Settings->each_sale) . "</td></tr>
				</table>";
            }
        } else {
            $daily_sale = array();
        }
		
        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        $user = $this->site->getUser();
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                //$this->erp->print_arrays($user->biller_id);
                $this->data['billers'] = $this->site->getBillerByID(json_decode($user->biller_id));
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }

        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/daily', $this->data, true);
            $name = lang("daily_sales") . "_" . $year . "_" . $month . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_calendar_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_sales_report')));
        $meta = array('page_title' => lang('daily_sales_report'), 'bc' => $bc);
        $this->page_construct('reports/daily', $meta, $this->data);
    }
    

    function monthly_sales($year = NULL, $pdf = NULL, $user_id = NULL)
    {
        $this->erp->checkPermissions('monthly',NULL,'sale_report');
        if (!$year) {
            $year = date('Y');
        }
        $b=$this->input->get('biller');
        if (isset($b)) {
            $biller = $this->input->get('biller');
            $this->session->set_userdata('biller_id',$biller);
        } else {
            $biller = $this->session->userdata('biller_id');
        }
        $this->data['biller_id']=$biller;
        $user = $this->site->getUser();
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getBillerByID(json_decode($user->biller_id));
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        $this->load->language('calendar');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['year'] = $year;

       /* if($biller)
        {*/
            $this->data['sales'] = $user_id ? $this->reports_model->getStaffMonthlySalemanByBiller($user_id, $year,$biller) : $this->reports_model->getMonthlySalesByBiller($year,$biller);
      /*  }else {
            $this->data['sales'] = $user_id ? $this->reports_model->getStaffMonthlySaleman($user_id, $year) : $this->reports_model->getMonthlySales($year);
        }*/
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/monthly', $this->data, true);
            $name = lang("monthly_sales") . "_" . $year . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_calendar_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('monthly_sales_report')));
        $meta = array('page_title' => lang('monthly_sales_report'), 'bc' => $bc);
        $this->page_construct('reports/monthly', $meta, $this->data);
    }
	
	function monthly_profits($id,$year, $month, $warehouse_id = NULL)
    {   
        $this->data['costing'] = $this->reports_model->getMonthSale($id,NULL, $warehouse_id, $year, $month);
        $this->data['date'] = date('F Y', strtotime($year.'-'.$month.'-'.'01'));
        $this->load->view($this->theme . 'reports/monthly_profit', $this->data);
    }

     function monthly_profits1($id,$year, $month, $warehouse_id = NULL)
    {
        $this->data['costing'] = $this->reports_model->getMonthPurchase($id,NULL, $warehouse_id, $year, $month); 
        $this->data['date'] = date('F Y', strtotime($year.'-'.$month.'-'.'01'));
        $this->load->view($this->theme . 'reports/monthly_profit1', $this->data);
    }

    function monthly_purchase_profits($id,$year, $month, $warehouse_id = NULL)
    {   
        $this->data['costing'] = $this->reports_model->getMonthlyPurchase($id,NULL, $warehouse_id, $year, $month);
        $this->data['date'] = date('F Y', strtotime($year.'-'.$month.'-'.'01'));
        $this->load->view($this->theme . 'reports/monthly_purchase_profits', $this->data);
    }

    function monthly_sales_by_pm($year = NULL, $pdf = NULL, $user_id = NULL)
    {
        $this->erp->checkPermissions('monthly',NULL,'sale_report');

        if (!$year) {
            $year = date('Y');
        }

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->load->language('calendar');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['year'] = $year;
        $this->data['sales_monthly'] = $user_id ? $this->reports_model->getMonthlyReportByPM($user_id, $year) : $this->reports_model->getMonthlySales($year);

        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/monthly', $this->data, true);
            $name = lang("monthly_sales") . "_" . $year . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_calendar_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('monthly_sales_report')));
        $meta = array('page_title' => lang('monthly_sales_report'), 'bc' => $bc);

        $this->page_construct('reports/get_all_project_manager_reports', $meta, $this->data);
    }

    function monthly_profit_by_pm($user_id, $year, $month, $warehouse_id = NULL)
    {
        $this->data['costing'] = $this->reports_model->getMonthCostingByPM($user_id, NULL, $warehouse_id, $year, $month);
        $this->data['sales'] = $this->reports_model->getSaleMonthlyByPM($user_id, NULL, $warehouse_id, $year, $month);
        $this->data['discount'] = $this->reports_model->getOrderDiscountByPM($user_id, NULL, $warehouse_id, $year, $month);
        $this->data['date'] = date('F Y', strtotime($year.'-'.$month.'-'.'01'));
        $this->load->view($this->theme . 'reports/monthly_profit_by_pm', $this->data);
    }

	function purchase_monthly($year, $month, $warehouse_id = NULL)
    {
        $this->erp->checkPermissions('monthly', false, 'purchase_report');
		 if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
			if ($user) {
				$this->db->where('purchases.created_by', $user);
			}
		}
        
        $this->data['costing'] = $this->reports_model->getMonthPurchaseing(NULL, $warehouse_id, $year, $month);
        $this->data['date'] = date('F Y', strtotime($year.'-'.$month.'-'.'01'));
        $this->load->view($this->theme . 'reports/purchase_monthly', $this->data);
    }
    function monthly_profit($year, $month, $warehouse_id = NULL)
    {
        $this->erp->checkPermissions('monthly', false, 'sale_report');
        
        $this->data['costing'] = $this->reports_model->getMonthSales(NULL, $warehouse_id, $year, $month);
        $this->data['date'] = date('F Y', strtotime($year.'-'.$month.'-'.'01'));
        $this->load->view($this->theme . 'reports/monthly_profit', $this->data);
    }
    function monthly_profitByBiller($year, $month, $warehouse_id = NULL)
    {
        $this->erp->checkPermissions('monthly', false, 'sale_report');
        $biller=$this->session->userdata('biller_id');
        $this->data['costing'] = $this->reports_model->getMonthSalesByBiller(NULL, $warehouse_id, $year, $month,$biller);
        $this->data['date'] = date('F Y', strtotime($year.'-'.$month.'-'.'01'));
        $this->data['biller']=$this->companies_model->getCompanyById($biller);
        $this->load->view($this->theme . 'reports/monthly_profit', $this->data);
    }
	public function getMonthSales($date, $warehouse_id = NULL, $year = NULL, $month = NULL)
    {
        $this->db->select("date, reference_no, customer, total_discount, sale_status, grand_total, paid, (grand_total-paid) as balance, payment_status");
		
		if($date) {
            $this->db->where('sales.date', $date);
        }elseif ($month) {
            $this->load->helper('date');
            $last_day = days_in_month($month, $year);
            $this->db->where('sales.date >=', $year.'-'.$month.'-01 00:00:00');
            $this->db->where('sales.date <=', $year.'-'.$month.'-'.$last_day.' 23:59:59');
        }
		
        $q = $this->db->get('sales');
        if ($q->num_rows() > 0) {
            return $q->result();
        }
        return false;
    }
    function sales_profit($biller_id = NULL,$warehouse_id = NULL)
    {
        $this->erp->checkPermissions('sale_profit',NULL,'sale_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
		 $datt =$this->reports_model->getLastDate("sales","date");
        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
			
        } else {
			
            $this->data['warehouses'] = $this->products_model->getUserWarehouses();
			if($warehouse_id){
				$this->data['warehouse_id'] = $warehouse_id;
				$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
			}else{
				
				$this->data['warehouse_id'] = str_replace(',', '-',$this->session->userdata('warehouse_id'));
				$this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->products_model->getUserWarehouses() : NULL;
			}
        }

		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = json_decode($this->session->userdata('biller_id'));
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray(json_decode($this->session->userdata('biller_id')));
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		if ($this->input->post('start_date')) {
            $this->data['start_date'] = $this->erp->fsd($this->input->post('start_date'));
        } else {
            $this->data['start_date'] = $datt;
        }
        if ($this->input->post('end_date')) {
            $this->data['end_date'] = $this->erp->fsd($this->input->post('end_date'));
        } else {
            $this->data['end_date'] = $datt;
        }
		$this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_profit_report')));
        $meta = array('page_title' => lang('sales_profit_report'), 'bc' => $bc);
        $this->page_construct('reports/sales_profit', $meta, $this->data);
    }

    function getSalesProfitReport($pdf = NULL, $xls = NULL)
    {
        $datt =$this->reports_model->getLastDate("sales","date");
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
		
		if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }
		
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
		if ($this->input->get('types')) {
            $types = $this->input->get('types');
        } else {
            $types = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
            // $this->erp->print_arrays($reference_no);exit();
        } else {
            $reference_no = NULL;
        }
		if($this->input->get("customer_group")){
		   $customer_group = $this->input->get("customer_group");
        }else {
		   $customer_group = NULL;
        }        
	
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }
        if ($this->input->get('serial')) {
            $serial = $this->input->get('serial');
        } else {
            $serial = NULL;
        }
        
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		
		$p_cost = "COALESCE (
						(
							SELECT
								CASE
							WHEN type <> 'combo' THEN
								(
									SELECT
										IF(option_id,
											SUM(
												erp_products.cost * (erp_sale_items.quantity * erp_product_variants.qty_unit)
											),
											SUM(
												erp_products.cost * erp_sale_items.quantity
											)
										)
									FROM
										erp_sale_items
									LEFT JOIN erp_product_variants ON erp_product_variants.id = erp_sale_items.option_id
									INNER JOIN erp_products ON erp_products.id = erp_sale_items.product_id
									WHERE
										erp_sale_items.sale_id = erp_sales.id
								)
							ELSE
								(
									SELECT
										SUM(
											erp_products.cost * erp_sale_items.quantity
										) AS cost
									FROM
										erp_combo_items
									INNER JOIN erp_products ON erp_products.`code` = erp_combo_items.item_code
									WHERE
										erp_combo_items.product_id = erp_sale_items.product_id
								)
							END
							FROM
								erp_products
							WHERE
								erp_products.id = erp_sale_items.product_id
						),
						0
					)";
			$gl_trant="COALESCE((SELECT sum(erp_gl_trans.amount) from erp_gl_trans where sectionid=50 AND erp_gl_trans.sale_id=erp_sales.id group by erp_gl_trans.sale_id),0)";

        if ($pdf || $xls) {

            $this->db
					->select("date, reference_no, biller, customer, grand_total, paid, (grand_total-paid) as balance,
                    " . $p_cost . " AS total_cost,
                    COALESCE (
                        COALESCE (
                            (
                                grand_total
                            ),
                            0
                        ) - COALESCE (
                            (
                                SELECT
                                    SUM(cost * " . $this->db->dbprefix('sale_items') . ".quantity)
                                FROM
                                    " . $this->db->dbprefix('sale_items') . "
                                INNER JOIN " . $this->db->dbprefix('products') . " ON " . $this->db->dbprefix('products') . ".id = " . $this->db->dbprefix('sale_items') . ".product_id
                                WHERE
                                    " . $this->db->dbprefix('sale_items') . ".sale_id = " . $this->db->dbprefix('sales') . ".id
                            ),
                            0
                        )
                    ) AS profit, payment_status", FALSE)
					->from('sales')
					->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
					->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
					->join('companies', 'companies.id=sales.customer_id','left')                
					->join('customer_groups','customer_groups.id=companies.customer_group_id','left')
					->group_by('sales.id');
            
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user){
					$this->db->where('sales.created_by', $user);
				}
			}
			if ($user) {
					$this->db->where('sales.created_by', $user);
			}
			if ($biller_id) {
                $this->db->where('sales.biller_id', $biller_id);
            }
            if ($product) {
                $this->db->like('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
			if ($types) {
                $this->db->where('sales.pos', $types);
            }
			if($customer_group){
			   $this->db->where('companies.customer_group_id', $customer_group);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where('date_format('.$this->db->dbprefix('sales').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('cost_'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('profit'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('payment_status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
				$total_cost_amount = 0;
				$total_profit = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->grand_total);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->total_cost);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->profit);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->payment_status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
					$total_cost_amount += $data_row->total_cost;
					$total_profit += $data_row->profit;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("E" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $balance);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $total_cost_amount);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $total_profit);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $filename = 'sales_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
					 ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
						 'wrap'       => true
					 ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			
            $this->load->library('datatables');

				$this->datatables
					->select("erp_sales.id, date, erp_sales.reference_no,suspend_note ,biller, customer, grand_total, paid, (grand_total-paid) as balance,
                    ".$p_cost." AS total_cost,(SELECT SUM(erp_gl_trans.amount) from erp_gl_trans where sectionid=50 AND erp_gl_trans.sale_id =erp_sales.id group by erp_gl_trans.sale_id)as amount,
                    COALESCE (
                        COALESCE (
                            (
                                grand_total
                            ),
                            0
                        ) - ".$p_cost." - ".$gl_trant."
                    ) AS profit, payment_status", FALSE)
					->from('sales')
					->join('sale_items', 'sale_items.sale_id=sales.id', 'inner')
					->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
					->join('companies', 'companies.id=sales.customer_id','left')
					->join('erp_gl_trans','erp_gl_trans.sale_id=erp_sales.id','left')             
					->join('customer_groups','customer_groups.id=companies.customer_group_id','left');
				    if(!$this->Owner && !$this->Admin){
						$warehouse_id = $this->session->userdata('warehouse_id');
                        $biller_ids   = $this->session->userdata('biller_id');
						$warehouses   = explode(',',$warehouse_id);
						$this->data['warehouse_id'] = $warehouse_id;
				        $this->datatables->where_in('erp_sales.warehouse_id',$warehouses);
				        $this->datatables->where_in('erp_sales.biller_id',JSON_decode($biller_ids));
					}
					$this->datatables->group_by('sales.id');
            
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('sales.created_by', $user);
				}
			}else if ($user) {
					$this->datatables->where('sales.created_by', $user);
		    }
			if ($biller_id) {
                $this->datatables->where('sales.biller_id', $biller_id);
            }
            if ($product) {
                $this->datatables->like('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if($customer_group){
			   $this->datatables->where('companies.customer_group_id', $customer_group);                
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
			if ($types) {
                $this->db->where('sales.pos', $types);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('sales').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }

    }		
	
    function sales($biller_id = NULL)
    {
        $this->erp->checkPermissions('report_sale',NULL,'sale_report');
		 $datt =$this->reports_model->getLastDate("sales","date");
		$user = $this->site->getUser();
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		 if ($this->input->post('start_date')) {
			$this->data['start_date'] = $this->erp->fsd($this->input->post('start_date'));
        } else {
			$this->data['start_date'] = $datt;
        }
        if ($this->input->post('end_date')) {
            $this->data['end_date']  = $this->erp->fsd($this->input->post('end_date'));
        } else {
			$this->data['end_date'] = $datt;
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
		$this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
		$this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_report')));
        $meta = array('page_title' => lang('sales_report'), 'bc' => $bc);
        $this->page_construct('reports/sales', $meta, $this->data);
    }

     function getSalesReport($pdf = NULL, $xls = NULL)
    {
        $customer = $this->input->get('customer');  
        $datt =$this->reports_model->getLastDate("sales","date");
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
		
		if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }
		
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')){
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
		if($this->input->get("customer_group")){
		   $customer_group = $this->input->get("customer_group");
        }else {
		   $customer_group = NULL;
        }        
	
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }
        if ($this->input->get('serial')) {
            $serial = $this->input->get('serial');
        } else {
            $serial = NULL;
        }
		
		if ($this->input->get('types')) {
            $types = $this->input->get('types');
        } else {
            $types = NULL;
        } 
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

		$p_cost = "COALESCE (
						(
							SELECT
								CASE
							WHEN type <> 'combo' THEN
								(
									SELECT
										SUM(
											cost * erp_sale_items.quantity
										)
									FROM
										erp_sale_items
									INNER JOIN erp_products ON erp_products.id = erp_sale_items.product_id
									WHERE
										erp_sale_items.sale_id = erp_sales.id
								)
							ELSE
								(
									SELECT
										SUM(
											erp_products.cost * erp_sale_items.quantity
										) AS cost
									FROM
										erp_combo_items
									INNER JOIN erp_products ON erp_products.`code` = erp_combo_items.item_code
									WHERE
										erp_combo_items.product_id = erp_sale_items.product_id
								)
							END
							FROM
								erp_products
							WHERE
								erp_products.id = erp_sale_items.product_id
						),
						0
					)";

        if ($pdf || $xls) {

            // $this->erp->checkPermissions('sales', TRUE);
            $this->db
                ->select("sale_items.id as id, sales.date, sales.reference_no, sale_items.product_name, sales.grand_total, sales.paid, (erp_sales.grand_total - erp_sales.paid) as balacne,erp_sales.note")
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('companies', 'companies.id=sales.customer_id','left')
                ->join('users', 'sales.saleman_by = users.id', 'left')
                ->where('sales.customer_id', $customer)
                ->where('sales.sale_status <> "returned"')
                ->group_by('sales.reference_no');
            $q = $this->db->get();

            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
           
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, strip_tags($data_row->note));
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("D" . $row . ":F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            
                $filename = 'sales_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
					 ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
						 'wrap'       => true
					 ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            // $this->erp->print_arrays('111111111111');
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('sales').".id as id, 
				".$this->db->dbprefix('sales').".date,
				".$this->db->dbprefix('payments').".date as pdate,
				".$this->db->dbprefix('sales').".reference_no, biller.company, ".$this->db->dbprefix('sales').".customer, 
										sale_status, ".$this->db->dbprefix('sales').".grand_total,  
										COALESCE((SELECT SUM(erp_return_sales.grand_total) FROM erp_return_sales WHERE erp_return_sales.sale_id = erp_sales.id), 0) as return_sale,
										COALESCE((SELECT SUM(IF((erp_payments.paid_by != 'deposit' AND ISNULL(erp_payments.return_id)), erp_payments.amount, IF(NOT ISNULL(erp_payments.return_id), ((-1)*erp_payments.amount), 0))) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id),0) as paid, 
										COALESCE((SELECT SUM(IF(erp_payments.paid_by = 'deposit', erp_payments.amount, 0)) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id), 0) as deposit,
										COALESCE((SELECT SUM(erp_payments.discount) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id), 0) as discount, 
										(".$this->db->dbprefix('sales').".grand_total - COALESCE((SELECT SUM(erp_return_sales.grand_total) FROM erp_return_sales WHERE erp_return_sales.sale_id = erp_sales.id), 0) - COALESCE((SELECT SUM(IF((erp_payments.paid_by != 'deposit' AND ISNULL(erp_payments.return_id)), erp_payments.amount, IF(NOT ISNULL(erp_payments.return_id), ((-1)*erp_payments.amount), 0))) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id),0) - COALESCE((SELECT SUM(IF(erp_payments.paid_by = 'deposit', erp_payments.amount, 0)) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id), 0) - COALESCE((SELECT SUM(erp_payments.discount) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id), 0)) as balance, 
										sales.payment_status")
                ->from('sales')
                ->join('payments', 'payments.sale_id=sales.id', 'left')
                ->join('erp_return_sales', 'erp_return_sales.sale_id = sales.id', 'left')
                ->join('companies', 'companies.id=sales.customer_id', 'left')
                ->join('companies as erp_biller', 'biller.id = sales.biller_id', 'inner')
                ->group_by('sales.id');
            
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('sales.created_by', $user);
				}
			}
            if ($user) {
					$this->datatables->where('sales.created_by', $user);
			}
			if ($biller_id) {
                $this->datatables->where_in('sales.biller_id', json_decode($biller_id));
            }
            if ($product) {
                $this->datatables->like('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if($customer_group){
			   $this->datatables->where('companies.customer_group_id', $customer_group);                
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
			if ($types) {
                $this->datatables->where('sales.pos', $types);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('sales').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }

    }

    function getSalesReportByProID($pdf = NULL, $xls = NULL)
    {
        $customer = $this->input->get('customer');
        $datt =$this->reports_model->getLastDate("sales","date");
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }

        if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }

        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')){
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if($this->input->get("customer_group")){
            $customer_group = $this->input->get("customer_group");
        }else {
            $customer_group = NULL;
        }

        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = NULL;
        }
        if ($this->input->get('serial')) {
            $serial = $this->input->get('serial');
        } else {
            $serial = NULL;
        }

        if ($this->input->get('types')) {
            $types = $this->input->get('types');
        } else {
            $types = NULL;
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        $p_cost = "COALESCE (
						(
							SELECT
								CASE
							WHEN type <> 'combo' THEN
								(
									SELECT
										SUM(
											cost * erp_sale_items.quantity
										)
									FROM
										erp_sale_items
									INNER JOIN erp_products ON erp_products.id = erp_sale_items.product_id
									WHERE
										erp_sale_items.sale_id = erp_sales.id
								)
							ELSE
								(
									SELECT
										SUM(
											erp_products.cost * erp_sale_items.quantity
										) AS cost
									FROM
										erp_combo_items
									INNER JOIN erp_products ON erp_products.`code` = erp_combo_items.item_code
									WHERE
										erp_combo_items.product_id = erp_sale_items.product_id
								)
							END
							FROM
								erp_products
							WHERE
								erp_products.id = erp_sale_items.product_id
						),
						0
					)";

        if ($pdf || $xls) {

            // $this->erp->checkPermissions('sales', TRUE);
            $this->db
                ->select("sale_items.id as id, sales.date, sales.reference_no, sale_items.product_name, sales.grand_total, sales.paid, (erp_sales.grand_total - erp_sales.paid) as balacne,erp_sales.note")
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('companies', 'companies.id=sales.customer_id','left')
                ->join('users', 'sales.saleman_by = users.id', 'left')
                ->where('sales.customer_id', $customer)
                ->where('sales.sale_status <> "returned"')
                ->group_by('sales.reference_no');
            $q = $this->db->get();

            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, strip_tags($data_row->note));
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("D" . $row . ":F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);

                $filename = 'sales_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                        array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
                        ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                        array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                            'wrap'       => true
                        ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            // $this->erp->print_arrays('111111111111');
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
				erp_sales.id,
				erp_sales.date, 
				reference_no, 
				biller, 
				customer,
				erp_products.name,
                erp_sale_items.quantity, 				
				grand_total,
                erp_sales.total_cost,
				paid, 
				(erp_sales.grand_total - erp_sales.paid) as balance,
                (erp_sales.grand_total - erp_sales.total_cost) as profit,
				payment_status", FALSE)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies', 'companies.id=sales.customer_id','left')
                ->join('products', 'sale_items.product_id=products.id','left')
                ->join('customer_groups','customer_groups.id=companies.customer_group_id','left')
                ->group_by('sales.id');

            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user) {
                    $this->datatables->where('sales.created_by', $user);
                }
            }
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($biller_id) {
                $this->datatables->where('sales.biller_id', $biller_id);
            }
            if ($product) {
                $this->datatables->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if($customer_group){
                $this->datatables->where('companies.customer_group_id', $customer_group);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($types) {
                $this->db->where('sales.pos', $types);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('sales').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }

    }

	function CustomerSalesReport_action()
{

    if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
        $user = $this->session->userdata('user_id');
    }
    if ($this->input->post('form_action1') == 'export_excel' || $this->input->post('form_action1') == 'export_pdf') {
        $row = 2;
        $total = 0;
        $paid = 0;
        $balance = 0;
         $data = $this->input->post('idd1');

        $dd = explode(',',$data);
        
        $this->erp->checkPermissions('sales', TRUE);
        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
        $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
        $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
        $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
        $this->excel->getActiveSheet()->SetCellValue('D1', lang('grand_total'));
        $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid'));
        $this->excel->getActiveSheet()->SetCellValue('F1', lang('balance'));
        $this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));
        
        $customer = $this->input->post('customer1');
       if(is_array($dd)){
        foreach ($dd as $id) {
            
            $data_row = $this->reports_model->getSaleCustomerReport($id,$customer);
            $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->product_name);
            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->grand_total);
            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->paid);
            $this->excel->getActiveSheet()->SetCellValue('F' . $row, ($data_row->grand_total - $data_row->paid));
            $this->excel->getActiveSheet()->SetCellValue('G' . $row, strip_tags($data_row->note));
            $total += $data_row->grand_total;
            $paid += $data_row->paid;
            $balance += ($data_row->grand_total - $data_row->paid);
            $row++;
            }
            $this->excel->getActiveSheet()->getStyle("D" . $row . ":F" . $row)->getBorders()
            ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $total);
            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $paid);
            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $balance);

            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            
            $filename = 'sales_report';
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            if ($this->input->post('form_action1') == 'export_pdf') {
                $styleArray = array(
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                   array(
                       'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
                       ));
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($this->input->post('form_action1') == 'export_excel') {
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                   array(
                       'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                       'wrap'       => true
                       ));
                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');
                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
		}

		}

}
	
	function getSalemanReport($pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('sales', TRUE);
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
		if($this->input->get("customer_group")){
		   $customer_group = $this->input->get("customer_group");
        }else {
		   $customer_group = NULL;
        }        
	
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($this->input->get('serial')) {
            $serial = $this->input->get('serial');
        } else {
            $serial = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {

            $this->db
					->select("date, reference_no, biller, customer,GROUP_CONCAT(CONCAT( '[', " . $this->db->dbprefix('sale_items') . ".product_code, ']', ' - ', CONCAT(" . $this->db->dbprefix('sale_items') . ".product_name, '__', " . $this->db->dbprefix('sale_items') . ".quantity)) SEPARATOR '___') as iname, grand_total, paid, (grand_total-paid) as balance,
                    payment_status", FALSE)
					->from('sales')
					->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
					->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
					->join('companies', 'companies.id=sales.customer_id','left')                
					->join('customer_groups','customer_groups.id=companies.customer_group_id','left')
					->group_by('sales.id');
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where("(CASE WHEN saleman_by <> '' THEN saleman_by ELSE created_by END) = {$user} ");
				}
			}
            if ($product) {
                $this->db->like('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
			if($customer_group){
			   $this->db->where('companies.customer_group_id', $customer_group);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('payment_status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->payment_status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $filename = 'sales_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');

				$this->datatables
					->select("date, reference_no, biller, customer,GROUP_CONCAT(CONCAT( '[', " . $this->db->dbprefix('sale_items') . ".product_code, ']', ' - ', CONCAT(" . $this->db->dbprefix('sale_items') . ".product_name, '__', " . $this->db->dbprefix('sale_items') . ".quantity)) SEPARATOR '___') as iname, grand_total, paid, (grand_total-paid) as balance,
                    payment_status", FALSE)
					->from('sales')
					->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
					->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
					->join('companies', 'companies.id=sales.customer_id','left')                
					->join('customer_groups','customer_groups.id=companies.customer_group_id','left')
					->group_by('sales.id');
            
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('sales.created_by', $user);
				}
			}
            if ($product) {
                $this->datatables->like('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if($customer_group){
			   $this->datatables->where('companies.customer_group_id', $customer_group);                
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }

    }

    function view_saleman_report($user_id = NULL) 
    {
        
        if (!$user_id && $_GET['d'] == null) {           
            redirect($_SERVER["HTTP_REFERER"]);
        }   
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['date'] = date('Y-m-d');
        $this->data['user_id'] = $user_id;
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('saleman_detail_report_')));
        $meta = array('page_title' => lang('saleman_detail_report_'), 'bc' => $bc);
        $this->page_construct('reports/view_saleman_report', $meta, $this->data);
    }

    function getSalemanReportDetail($warehouse_id = NULL, $dt = NULL)
    {
        $this->erp->checkPermissions('index');
        
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }

        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }

        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
        if ($this->input->get('search_id')) {
            $search_id = $this->input->get('search_id');
        } else {
            $search_id = NULL;
        }
        if ($this->input->get('sales_type')) {
            $sales_type = $this->input->get('sales_type');
        } else {
            $sales_type = NULL;
        }
        if ($this->input->get('issued_by')) {
            $issued_by = $this->input->get('issued_by');
        } else {
            $issued_by = NULL;
        }
        if ((! $this->Owner || ! $this->Admin) && ! $warehouse_id) {
            $user = $this->site->getUser();
            $warehouse_id = $user->warehouse_id;
        }

        $user_biller_id = JSON_decode($this->session->userdata('biller_id'));

        $this->load->library('datatables');
        $this->datatables
        ->select("sales.id, sales.date, sales.due_date, sales.reference_no, sales.biller, companies.name as customer, sales.note, 
                    sales.sale_status, COALESCE(erp_sales.grand_total, 0) as grand_total,  
                    (SELECT SUM(erp_return_sales.grand_total) FROM erp_return_sales WHERE erp_return_sales.sale_id = erp_sales.id) as return_sale, 
                    COALESCE( (SELECT SUM(IF((erp_payments.paid_by != 'deposit' AND ISNULL(erp_payments.return_id)), erp_payments.amount, IF(NOT ISNULL(erp_payments.return_id), ((-1)*erp_payments.amount), 0))) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id),0) as paid, 
                    COALESCE((SELECT SUM(IF(erp_payments.paid_by = 'deposit', erp_payments.amount, 0)) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id ),0 ) as deposit, 
                    (SELECT SUM(COALESCE(erp_payments.discount, 0)) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id) as discount, 
                    (COALESCE(erp_sales.grand_total,0)-COALESCE((SELECT SUM(erp_return_sales.grand_total) FROM erp_return_sales WHERE erp_return_sales.sale_id = erp_sales.id), 0)-COALESCE( (SELECT SUM(IF((erp_payments.paid_by != 'deposit' AND ISNULL(erp_payments.return_id)), erp_payments.amount, IF(NOT ISNULL(erp_payments.return_id), ((-1)*erp_payments.amount), 0))) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id),0)- COALESCE((SELECT SUM(IF(erp_payments.paid_by = 'deposit', erp_payments.amount, 0)) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id  ),0)-SUM(COALESCE(erp_payments.discount,0)) ) as balance, 
                    payment_status")
        ->from('sales')
        ->join('companies', 'sales.customer_id = companies.id', 'left')
        ->join('payments', 'payments.sale_id = sales.id', 'left')
        ->group_by('sales.id');

        if($user_biller_id != NULL){
            $this->db->where_in('sales.biller_id', $user_biller_id);
        }


        if ($this->permission['sales-index'] = ''){
            if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin) {
                $this->datatables->where('created_by', $this->session->userdata('user_id'));
            } elseif ($this->Customer) {
                $this->datatables->where('customer_id', $this->session->userdata('user_id'));
            }
        }
        
        if ($customer) {
            $this->datatables->where('sales.saleman_by', $customer);
        }
        
        if ($reference_no) {
            $this->datatables->where('sales.reference_no', $reference_no);
        }
        
        if ($biller) {
            $this->datatables->where('sales.biller_id', $biller);
        }
        if ($start_date) {
            $this->datatables->where('date_format(erp_sales.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
        }

        if ($sales_type) {
            if($sales_type == 'wholesale'){
                $sales_type = 0;
                $this->db->where('sales.pos',$sales_type);
            } elseif ($sales_type == 'retail') {
                $sales_type = 1;
                $this->db->where('sales.pos',$sales_type);
            }
        }

        if ($issued_by) {
            if ($issued_by == 'hide') {
                $this->db->where('sales.note =', '');
            }
        }
        $action     = NULL;
        $this->datatables->add_column("Actions", $action, "sales.id");
        echo $this->datatables->generate();
    }

	function getSellReport($pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('project', NULL, 'sale_report');

        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
		if($this->input->get("customer_group")){
		   $customer_group = $this->input->get("customer_group");
        }else {
		   $customer_group = NULL;
        }        
	
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($this->input->get('serial')){
            $serial = $this->input->get('serial');
        } else {
            $serial = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }

        if ($pdf || $xls) {

            $this->db
                ->select("date, reference_no, biller, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('sale_items') . ".product_name, ' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')') SEPARATOR '\n') as iname, grand_total, paid, payment_status", FALSE)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies', 'sales.biller_id=companies.id','left')
                ->group_by('sales.id')
                ->order_by('sales.date desc');
            
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('sales.created_by', $user);
				}
			}
            if ($product) {
                $this->db->like('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
			if($customer_group){
			   $this->db->where('companies.customer_group_id', $customer_group);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('payment_status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->payment_status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $filename = 'sales_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');

				$this->datatables
					->select("date, reference_no, biller, customer,GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('sale_items') . ".product_name, '__', " . $this->db->dbprefix('sale_items') . ".quantity) SEPARATOR '___') as iname, grand_total, paid, (grand_total-paid) as balance, payment_status", FALSE)
					->from('sales')
					->join('sale_items', 'sale_items.sale_id=sales.id')
					->join('warehouses', 'warehouses.id=sales.warehouse_id')
					->join('companies', 'companies.id=sales.biller_id')
					->where('sales.biller_id', $biller)
					//->join('customer_groups','customer_groups.id=companies.customer_group_id','inner')
					->group_by('sales.id');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('sales.created_by', $user);
				}
			}
			if ($user) {
					$this->datatables->where('sales.created_by', $user);
			}
            if ($product) {
                $this->datatables->like('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if($customer_group){
			   $this->datatables->where('companies.customer_group_id', $customer_group);                
            }            
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }
	
	function sales_detail_delivery()
    {
        $this->erp->checkPermissions('report_sale',NULL,'sale_report');
		$this->load->library("pagination");
		$str ="";
		$datt =$this->reports_model->getLastDate("erp_deliveries","date");
        if($this->input->get('reference_no')){
			 $reference_no = $this->input->get('reference_no');
			 $str.="&reference_no=".$reference_no;
			 $this->data['reference_no'] =$reference_no;
		}else{
			 $reference_no =null;
		} 
		if($this->input->get('customer')){
			 $customer = $this->input->get('customer');
			 $str .="&customer=".$customer;
			 $this->data['customer'] =$customer;
		}else{
			 $customer =null;
		}
		if($this->input->get('driver')){
			 $driver =$this->input->get('driver');
			 $str.="&driver=".$driver;
			 $this->data['driver']=$driver;
		}else{
			$driver =null;
		}
		if($this->input->get('start_date')){
			 $start_date =$this->erp->fsd($this->input->get('start_date'));
			 $str.="&start_date=".$start_date;
			 $this->data['start_date']=$start_date;
		}else{
			$start_date =$datt;
			$this->data['start_date']=$start_date;
		}
		if($this->input->get('warehouse')){
			 $warehouse =$this->input->get('warehouse');
			 $str.="&warehouse=".$warehouse;
			 $this->data['warehouse']=$warehouse;
		}else{
			$warehouse =null;
		}
		if($this->input->get('end_date')){
			 $end_date =$this->erp->fsd($this->input->get('end_date'));
			 $str.="&end_date=".$end_date;
			 $this->data['end_date'] =$end_date;
		}else{
			$end_date =$datt;
			$this->data['end_date'] =$end_date;
		}
		
		$this->db->select("erp_deliveries.*");
		if(isset($reference_no) !=''){
			$this->db->where("erp_deliveries.do_reference_no",$reference_no);
		}
		if(isset($customer)!=''){
			$this->db->where("erp_deliveries.customer_id",$customer);
		}
		if(isset($warehouse)!=''){
			$this->db->join("erp_delivery_items","erp_delivery_items.delivery_id=erp_deliveries.id","LEFT");
			$this->db->where("erp_delivery_items.warehouse_id",$warehouse);
		}
		if(isset($driver)!=''){
		    $this->db->where("erp_deliveries.delivery_by",$driver);
		}
		if(isset($start_date)!=''){
			$this->db->where("date_format(erp_deliveries.date,'%Y-%m-%d') BETWEEN '$start_date' AND '$end_date'");
		}
		$this->db->group_by('id');
		$sales_nums = $this->db->get('deliveries')->num_rows();
		
		$config = array();
		$config['suffix'] = "?v=1".isset($str);
        $config["base_url"] = base_url() . "reports/sales_detail_delivery/";
		$config["total_rows"] = $sales_nums;
		$config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] = 50; 
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '<li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '<li>';
		$config['cur_tag_open'] = '<li class="active"><a href="#">';
		$config['cur_tag_close'] = '</a><li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '<li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '<li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		 
		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links();  
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['deliveries'] = $this->reports_model->getAlldelivery($reference_no,$customer,$driver,$start_date,$end_date,$warehouse,$config["ob_set"],$config['per_page']);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
		$this->data['driver'] = $this->site->getDriverByGroupId();
		$this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
		$this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('sale_detail_delivery')));
        $meta = array('page_title' => lang('sale_detial_delivery'), 'bc' => $bc);
        $this->page_construct('reports/sale_detial_delivery', $meta, $this->data);
    } 
    
	function list_using_stock_report()
    {
		$this->load->library("pagination");
		$str="";
		$wid = $this->reports_model->getWareByUserID();
		$start = "";
		$end = "";
		$datt =$this->reports_model->getLastDate("erp_enter_using_stock","date");
        if($this->input->get('reference_no')){
			 $reference_no = $this->input->get('reference_no');
			 $str.="&reference_no=".$reference_no;
			 $this->data['reference_no'] =$reference_no;
		}else{
			 $reference_no =null;
		} 
		if($this->input->get('employee')){
			 $employee = $this->input->get('employee');
			 $str.="&employee=".$employee;
			 $this->data['employee'] =$employee;
		}else{
			 $employee =null;
		}
		if($this->input->get('biller')){
			 $biller = $this->input->get('biller');
			 $str.="&biller=".$biller;
			 $this->data['biller'] =$biller;
		}else{
			 $biller =null;
		}
		if($this->input->get('start_date')){
			 $start_date =$this->input->get('start_date');
			 $str.="&start_date=".$start_date;
			 $this->data['start_date'] =$start_date;
		}else{
			$start_date =date_format($datt,"d/m/Y");
			$this->data['start_date'] =$datt;
		}
		if($this->input->get('warehouse')){
			 $warehouse =$this->input->get('warehouse');
			 $str.="&warehouse=".$warehouse;
			 $this->data['warehouse']=$warehouse;
		}else{
			$warehouse =null;
		}
		if($this->input->get('end_date')){
			 $end_date =$this->input->get('end_date');
			 $str.="&end_date=".$end_date;
			 $this->data['end_date'] =$end_date;
		}else{
			$end_date =date_format($datt,"d/m/Y");
			 $this->data['end_date'] =$datt;
		}
		
		$this->db->select("enter_using_stock.*");
		if($employee){
			$this->db->where('erp_enter_using_stock.employee_id',$employee);
		}
		if($warehouse){
			$this->db->where('erp_enter_using_stock.warehouse_id',$warehouse);
		}else{
			if($wid){
				$this->db->where("erp_enter_using_stock.warehouse_id IN ($wid)");
			}
		}
		if($reference_no){
			$this->db->where('erp_enter_using_stock.reference_no',$reference_no);
		}
		if($biller){
			$this->db->where('erp_enter_using_stock.shop',$biller);
		}
		if($start_date){
			$this->db->where("date_format(erp_enter_using_stock.date,'%Y-%m-%d') BETWEEN '{$start_date}' AND '{$end_date}'");
		}
		$this->db->group_by('reference_no');
		$sales_nums = $this->db->get('enter_using_stock')
		->num_rows();
		
		$config = array();
		$config['suffix'] = "?v=1".$str;
        $config["base_url"] = base_url() . "reports/list_using_stock_report/";
		$config["total_rows"] = $sales_nums;
		$config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] = 50; 
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '<li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '<li>';
		$config['cur_tag_open'] = '<li class="active"><a href="#">';
		$config['cur_tag_close'] = '</a><li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '<li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '<li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		
		
		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links();  
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['using_stock'] = $this->reports_model->getUsingStock($reference_no,$employee,$biller,$warehouse,$wid,$start_date,$end_date,$config["ob_set"],$config["per_page"]);
        $this->data['Employee'] = $this->reports_model->getUser();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);
       //$this->data['warehouses'] = $this->site->getAllWarehouses();
		$this->data['billers'] = $this->reports_model->getBillers();
		$this->data['biller_idd'] = $this->reports_model->getBiilerByUserID();
		$this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
		$this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('report_list_using_stock')));
        $meta = array('page_title' => lang('report_list_using_stock'), 'bc' => $bc);
        $this->page_construct('reports/enter_using_stock_report', $meta, $this->data);  
	}
	/*function convert_reports(){
		$this->erp->checkPermissions('report_sale',NULL,'sale_report');
		$this->load->library("pagination");
		$str="";
		if($this->input->get('product')){
			$product =$this->input->get('product');
			$str.="&product=".$product;
			$this->data['product']=$product;
		} 
		if($this->input->get('start_date')){
			$start_date =$this->input->get('start_date');
			$str.="&start_date=".$start_date;
			$this->data['start_date']=$start_date;
		} 
		if($this->input->get('end_date')){
			$end_date =$this->input->get('end_date');
			$str.="&end_date=".$end_date;
			$this->data['end_date']=$end_date;
		}
		if($start_date){
			$start=date("Y-d-m H:i:s",strtotime($start_date));
			$end=date("Y-d-m H:i:s",strtotime($end_date));
		}
		if($this->input->get('warehouse')){
			$warehouse =$this->input->get('warehouse');
			$str.="&warehouse=".$warehouse;
			$this->data['warehouse']=$warehouse;
		} 
		$this->db->select("erp_convert.*")
		->join('erp_product_variants','erp_product_variants.id = erp_convert_items.option_id','LEFT')
		->join('erp_products','erp_products.id=erp_convert_items.product_id','LEFT')
		->join('erp_units','erp_units.id=erp_products.unit','left') 
		->join('erp_convert','erp_convert.id=erp_convert_items.convert_id','left');
		if($product){
			$this->db->where('erp_convert_items.product_id',$product);
		}
		if($start){
			$this->db->where("erp_convert.date BETWEEN '$start' AND '$end'");
		}
		$this->db->where("erp_convert_items.status","add")
		->group_by("erp_convert_items.product_id");
		$sales_nums = $this->db->get('erp_convert_items')->num_rows();
		
		$config = array();
		$config['suffix'] = "?v=1".$uri;
        $config["base_url"] = base_url() . "reports/convert_reports/";
		$config["total_rows"] = $sales_nums;
		$config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] = 50; 
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '<li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '<li>';
		$config['cur_tag_open'] = '<li class="active"><a href="#">';
		$config['cur_tag_close'] = '</a><li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '<li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '<li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		
		
		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links();  
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['convert'] = $this->reports_model->getconvert($product,$warehouse,$start_date,$end_date,$config["per_page"],$config["ob_set"]);      
	    $this->data['products'] = $this->site->getAllProducts();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
		$this->data['billers'] = $this->reports_model->getBillers();
		$this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
		$this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('report_list_using_stock')));
        $meta = array('page_title' => lang('convert_reports'), 'bc' => $bc);
        $this->page_construct('reports/convert_report', $meta, $this->data);  
	}*/
	/*function getConvertReports(){
		$wid = $this->reports_model->getWareByUserID();
		$product = "";
		$start_date = "";
		$end_date = "";
		$start ="";
		$end  = "";
		$datt =$this->reports_model->getLastDate("erp_convert","date");
		if($this->input->get('product')){
			$product= $this->input->get('product');
		}
		if($this->input->get('start_date')){
			$start_date= $this->erp->fsd($this->input->get('start_date'));
		}else{
			$start_date= $datt;
		}
		if($this->input->get('end_date')){
			$end_date =$this->erp->fsd($this->input->get('end_date'));
		}else{
			$end_date= $datt;
		}
		
		$detail_link = anchor('reports/convert_report_detail/$1', '<i class="fa fa-file-text-o"></i> ' . lang('view-detail'));
        $action = '<div class="text-center"><div class="btn-group text-left">'
            . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
            . lang('actions') . ' <span class="caret"></span></button>
		<ul class="dropdown-menu pull-right" role="menu">
			<li>' . $detail_link . '</li>
			<li><a href="' . site_url('products/add/$1') . '"><i class="fa fa-plus-square"></i> ' . lang('duplicate_product') . '</a></li>';
	   $action = '<div class="text-center"><div class="btn-group text-left">'
		. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
				. lang('actions') . ' <span class="caret"></span></button>
		<ul class="dropdown-menu pull-right" role="menu">
			<li>' . $detail_link . '</li>  
		</ul>
    	</div></div>';
		 $this->load->library('datatables');     
		$this->datatables->select("erp_convert_items.id,erp_convert_items.product_id as pro_id,erp_convert_items.product_code,erp_convert_items.product_name,SUM(erp_convert_items.quantity) as con_qty,(Case when erp_product_variants.name <> null then erp_product_variants.name ELSE erp_units.name END)")
		->from("erp_convert_items")
		->join('erp_product_variants','erp_product_variants.id = erp_convert_items.option_id','LEFT')
		->join('erp_products','erp_products.id=erp_convert_items.product_id','LEFT')
		->join('erp_warehouses_products','erp_warehouses_products.product_id=erp_products.id','LEFT')
		->join('erp_units','erp_units.id=erp_products.unit','left') 
		->join('erp_convert','erp_convert.id=erp_convert_items.convert_id','left')
		->where("erp_convert_items.status","add")
		->group_by("erp_convert_items.product_id");

		if($product){
			$this->datatables->where('erp_convert_items.product_id',$product);
		}
		if($start){
			$this->datatables->where("date_format(erp_convert.date,'%Y-%m-%d') BETWEEN '$start_date' AND '$end_date'");
		}
		if($wid){
			$this->datatables->where("erp_warehouses_products.warehouse_id IN ($wid)");
		}
	    $this->datatables->add_column("Actions", $action, "pro_id");
        echo $this->datatables->generate();
	}*/
	function getConvertReports(){
		$wid = $this->reports_model->getWareByUserID();
		$start_date = "";
		$end_date = "";
		$datt =$this->reports_model->getLastDate("bom","date");
		/*if($this->input->get('start_date')){
			$start_date= $this->erp->fsd($this->input->get('start_date'));
		}else{
			$start_date= $datt;
		}
		if($this->input->get('end_date')){
			$end_date =$this->erp->fsd($this->input->get('end_date'));
		}else{
			$end_date= $datt;
		}*/
		
		$detail_link = anchor('reports/convert_report_detail?id_id=$1', '<i class="fa fa-file-text-o"></i> ' . lang('view-detail'));
        $action = '<div class="text-center"><div class="btn-group text-left">'
            . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
            . lang('actions') . ' <span class="caret"></span></button>
		<ul class="dropdown-menu pull-right" role="menu">
			<li>' . $detail_link . '</li>
			<li><a href="' . site_url('products/add/$1') . '"><i class="fa fa-plus-square"></i> ' . lang('duplicate_product') . '</a></li>';
	   $action = '<div class="text-center"><div class="btn-group text-left">'
		. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
				. lang('actions') . ' <span class="caret"></span></button>
		<ul class="dropdown-menu pull-right" role="menu">
			<li>' . $detail_link . '</li>  
		</ul>
    	</div></div>';
		 $this->load->library('datatables');     
		$this->datatables->select("bom.id,name")->join("convert","convert.bom_id=bom.id","LEFT")->from("bom");
		$this->datatables->where("convert.bom_id!=",null);
		$this->datatables->group_by("convert.bom_id");
		//$this->datatables->where("date_format(date,'%Y-%m-%d') BETWEEN '$start_date' AND '$end_date'");
	    $this->datatables->add_column("Actions", $action, "bom.id");
        echo $this->datatables->generate();
	}
	
	function convert_reports(){  
		$datt =$this->reports_model->getLastDate("erp_transfers","date");
        //$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		//$this->data['convert'] = $this->reports_model->getconvert($product,$warehouse,$start_date,$end_date,$config["per_page"],$config["ob_set"]);   
		if($this->input->post('start_date')){
			$this->data['start_date']= $this->erp->fsd($this->input->post('start_date'));
		}else{
			$this->data['start_date']= $datt;
		}
		if($this->input->post('end_date')){
			$this->data['end_date'] =$this->erp->fsd($this->input->post('end_date'));
		}else{
			$this->data['end_date']= $datt;
		}
	    $this->data['products'] = $this->site->getAllProducts();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
		$this->data['billers'] = $this->reports_model->getBillers();
		$this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
		$this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('report_list_using_stock')));
        $meta = array('page_title' => lang('convert_reports'), 'bc' => $bc);
        $this->page_construct('reports/convert_reports', $meta, $this->data);
	}
    
	function convert_report_detail()
    {
		$datt =$this->reports_model->getLastDate("erp_convert","date");
		$this->load->library("pagination");
		$start  = "";
		$end = "";
		 $str ="";
		if($this->input->get('product')){
			$p = $this->input->get('product');
		}else{
			$p = null;
		}
		if($this->input->get('id_id')){
			$id = $this->input->get('id_id');
			$str.="&id_id=".$id;
		}
		
		if($this->input->get('start_date')){
			$start = $this->input->get('start_date');
			$str.="&start_date=".$start;
			
		}else{
			$start = $this->erp->hrsd($datt);
			$this->data['start_date'] = $start;
		}
		if($this->input->get('end_date')){
			$end = $this->input->get('end_date');
			$str.="&end_date=".$end;
			
		}else{
			$end = $this->erp->hrsd($datt);
			$this->data['end_date'] = $end;
		}
		
	   
		$reference_no = "";
		$warehouse_id = "";
		$created_by = "";
		$wid = $this->reports_model->getWareByUserID();
		if($this->input->get('reference_no')){
			$reference_no =$this->input->get('reference_no');
			$str.="&reference_no=".$reference_no;
			$this->data['reference_no']= $reference_no;
		}
		if($this->input->get('warehouse')){
			$warehouse_id =$this->input->get('warehouse');
			$str.="&warehouse=".$warehouse_id;
			$this->data['warehouse2']= $warehouse_id;
		}
		if($this->input->get('created_by')){
			$created_by =$this->input->get('created_by');
			$str.="&created_by=".$created_by;
			$this->data['created_by2']= $created_by;
		}
		
		$this->db->select("*") 
		->join('erp_warehouses','erp_warehouses.id=erp_convert.warehouse_id','LEFT')
		->join('erp_users','erp_users.id=erp_convert.created_by','LEFT')
		->where('erp_convert.bom_id',$id);
		if($reference_no){
			$this->db->where('erp_convert.reference_no',$reference_no);
		}
		if($warehouse_id){
			$this->db->where('erp_convert.warehouse_id',$warehouse_id);
		}else{
			if($wid){
				$this->db->where("erp_convert.warehouse_id IN ($wid) ");
			}
		}
		if($start){
			$this->db->where("date_format(erp_convert.date,'%Y-%m-%d') BETWEEN '".$this->erp->fsd($start)."' AND '".$this->erp->fsd($end)."'");
		}
		if($created_by){
			$this->db->where('erp_convert.created_by',$created_by);
		}
		$sales_nums = $this->db->get("erp_convert")
		->num_rows();
		
		$config = array();
		$config['suffix'] = "?v=1".$str;
        $config["base_url"] = site_url("reports/convert_report_detail");
		$config["total_rows"] = $sales_nums;
		$config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] = 20; 
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '<li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '<li>';
		$config['cur_tag_open'] = '<li class="active"><a href="#">';
		$config['cur_tag_close'] = '</a><li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '<li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '<li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		
		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links();
		$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
	    $this->data['convert'] = $this->reports_model->getConvertDetailByID($id,$start,$end);
		
		$this->data['id'] = $id;
        $this->data['convert_detail'] = $this->reports_model->getconvertDetail($id,$start,$end,$config["ob_set"],$config["per_page"],$reference_no,$warehouse_id,$created_by,$wid);
		$this->data['biller_idd'] = $this->reports_model->getBiilerByUserID();
		//$this->data['warehouses'] = $this->site->getAllWarehouses();
		$this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);
		$this->data['created_by'] =$this->site->getAllUsers();
		$this->data['products'] =$this->site->getAllProducts();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('report_convert_detail')));
        $meta = array('page_title' => lang('report_convert_detail'), 'bc' => $bc);
        $this->page_construct('reports/report_convert_detail', $meta, $this->data); 		
	}

	function transfers_report()
    {
		$this->load->library("pagination");
        $datt = $this->reports_model->getLastDate("erp_transfers", "date");

		$wid = $this->reports_model->getWareByUserID();
		$str="";
		$to_warehouse = "";
		$from_warehouse = "";
		$reference_no  = "";
		$start_date = "";
		$end_date = "";
		$start_ = "";
		$end = "";
		$start = "";
		$end_ = "";
		if($this->input->get('to_warehouse')){
			$to_warehouse =$this->input->get('to_warehouse');
			$str.="&to_warehouse=".$to_warehouse;
			$this->data['to_warehouse']= $to_warehouse;
		}
		if($this->input->get('from_warehouse')){
			$from_warehouse =$this->input->get('from_warehouse');
			$str.="&from_warehouse=".$from_warehouse;
			$this->data['from_warehouse']= $from_warehouse;
		}
		if($this->input->get('reference_no')){
			$reference_no =$this->input->get('reference_no');
			$str.="&reference_no=".$reference_no;
			$this->data['reference_no']= $reference_no;
		}
		if($this->input->get('start_date')){
			$start_date =$this->erp->fsd($this->input->get('start_date'));
			$str.="&start_date=".$start_date;
			$this->data['start_date']= $start_date;
		}else{
			$start_date = $datt;
			$this->data['start_date']=$datt;
		}
        if($this->input->get('end_date')){
			$end_date =$this->erp->fsd($this->input->get('end_date'));
			$str.="&end_date=".$end_date;
			$this->data['end_date']= $end_date;
		}else{
			$end_date = $datt;
			$this->data['end_date']=$datt;
		}		
		
		$this->db->select("erp_transfers.*");
		if($reference_no){
			$this->db->where("erp_transfers.transfer_no",$reference_no);
		}   
        if($to_warehouse){
			$this->db->where("erp_transfers.from_warehouse_id",$from_warehouse) 
			         ->where("erp_transfers.to_warehouse_id",$to_warehouse);
		}
        if($start_date){
	        $this->db->where("date_format(erp_transfers.date,'%Y-%m-%d') BETWEEN '$start_date' AND '$end_date'");
        }		
		$this->db->group_by('transfer_no');
		$transfer_num = $this->db->get('erp_transfers')->num_rows();
		
		$config = array();
		$config['suffix'] = "?v=1".$str;
        $config["base_url"] = base_url() . "reports/transfers_report/";
		$config["total_rows"] = $transfer_num;
		$config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] = 50; 
		$config["uri_segment"] = 3; 
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '<li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '<li>';
		$config['cur_tag_open'] = '<li class="active"><a>';
		$config['cur_tag_close'] = '</a><li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '<li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '<li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';

		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links();  
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['transfers'] = $this->reports_model->getTransfersReport($reference_no,$start_date,$end_date,$from_warehouse,$to_warehouse,$config["ob_set"],$config["per_page"],$wid);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);
		$this->data['warehousesa'] = $this->reports_model->getAllWarehouses();
		$this->data['driver'] = $this->site->getDriverByGroupId();
		$this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
		$this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('transfers_report')));
        $meta = array('page_title' => lang('transfers_report'), 'bc' => $bc);
        $this->page_construct('reports/transfers_report', $meta, $this->data);
    }

    function transfers_summary_report()
    {
        $this->erp->checkPermissions('report_sale', NULL, 'sale_report');

        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
            $str .= "&start_date=" . $start_date;
            $this->data['start_date'] = $start_date;
        } else {
            $start_date = date('Y-m-d');
            $this->data['start_date'] = $start_date;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
            $str .= "&end_date=" . $end_date;
            $this->data['end_date'] = $end_date;
        } else {
            $end_date = date('Y-m-d');
            $this->data['end_date'] = $end_date;
        }

        $wid = $this->reports_model->getWareByUserID();
        $this->data['products'] = $this->site->getProducts();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['warehouses'] = $this->site->getAllWarehouses($wid);
        $this->data['warehousesa'] = $this->reports_model->getAllWarehouses();

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('transfers_summary_report')));
        $meta = array('page_title' => lang('transfers_summary_report'), 'bc' => $bc);
        $this->page_construct('reports/transfers_summary_report', $meta, $this->data);
    }

    function getTransferSummaryReport()
    {
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = null;
        }
        if ($this->input->get('from_warehouse')) {
            $from_warehouse = $this->input->get('from_warehouse');
        } else {
            $from_warehouse = null;
        }
        if ($this->input->get('to_warehouse')) {
            $to_warehouse = $this->input->get('to_warehouse');
        } else {
            $to_warehouse = null;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = null;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = null;
        }

        $this->load->library('datatables');
        $this->datatables
            ->select('
                products.id as pid,
                transfers.date,
                products.name,
                transfers.from_warehouse_name,
                transfers.to_warehouse_name,
                SUM(erp_transfer_items.quantity) as quantity,
                IF (erp_transfer_items.option_id, erp_product_variants.name, erp_units.name) as unit
                ', FALSE)
            ->from('products')
            ->join('transfer_items', 'products.id = transfer_items.product_id', 'left')
            ->join('transfers', 'transfer_items.transfer_id = transfers.id', 'left')
            ->join('product_variants', 'transfer_items.option_id = product_variants.id', 'left')
            ->join('units', 'products.unit = units.id', 'left')
            ->group_by('transfers.from_warehouse_id, transfers.to_warehouse_id, transfer_items.option_id, products.id');

        if ($product) {
            $this->datatables->where('products.id', $product);
        }
        if ($from_warehouse) {
            $this->datatables->where('transfers.from_warehouse_id', $from_warehouse);
        }
        if ($to_warehouse) {
            $this->datatables->where('transfers.to_warehouse_id', $to_warehouse);
        }

        if ($start_date) {
            $this->datatables->where($this->db->dbprefix('transfers') . '.date BETWEEN "' . $start_date . ' 00:00:00" and "' . $end_date . ' 23:59:00"');
        }

        echo $this->datatables->generate();
    }

    function transfers_summary_report_action()
    {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            $product = $this->input->post('product');
            $from_warehouse = $this->input->post('from_warehouse');
            $to_warehouse = $this->input->post('to_warehouse');
            $start_date = $this->input->post('start_date');
            $end_date = $this->input->post('end_date');

            // $this->erp->print_arrays($product);

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->mergeCells('A1:F1');
                    $this->excel->getActiveSheet()->setCellValue('A1', 'Transfers Summary Report From ' . $this->erp->hrsd($start_date) . ' to ' . $this->erp->hrsd($end_date));

                    $this->excel->getActiveSheet()->SetCellValue('A2', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B2', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C2', lang('from_warehouse'));
                    $this->excel->getActiveSheet()->SetCellValue('D2', lang('to_warehouse'));
                    $this->excel->getActiveSheet()->SetCellValue('E2', lang('quantity'));
                    $this->excel->getActiveSheet()->SetCellValue('F2', lang('variant'));

                    $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(40);
                    $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A1')->getFont()
                        ->setName('Times New Roman')
                        ->setSize(18);

                    $this->excel->getActiveSheet()->getRowDimension(2)->setRowHeight(30);
                    $this->excel->getActiveSheet()->getStyle('A2:F2')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A2:F2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                    $styleArrays = array(
                        'font' => array(
                            'bold' => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size' => 12,
                            'name' => 'Times New Roman'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428BCA')
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A2:F2')->applyFromArray($styleArrays);

                    $row = 3;
                    $rows_data = $this->reports_model->getExportTransferSummaryReport($_POST['val'], $product, $from_warehouse, $to_warehouse, $start_date, $end_date);
                    foreach ($rows_data as $row_data) {

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($row_data->date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $row_data->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $row_data->from_warehouse_name);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $row_data->to_warehouse_name);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $row_data->quantity);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $row_data->unit);

                        $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(30);
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':F' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('E' . $row . ':F' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':F' . $row)->getFont()
                            ->setName('Times New Roman')
                            ->setSize(12);

                        $styleArray = array(
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )
                        );

                        $this->excel->getActiveSheet()->getStyle('A2:F2')->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':F' . $row)->applyFromArray($styleArray);

                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);

                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'customer_balance_' . date('Y_m_d_H_i_s');

                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));

                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT);
                        $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                        //Margins:
                        $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.35);
                        $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $styleArray = array(
                            'font' => array(
                                'bold' => true
                            )
                        );

                        $header_style = array(
                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                            ),
                            'font' => array(
                                'bold' => true
                            )
                        );

                        $body_style = array(
                            'alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                            )
                        );

                        /* $this->excel->getActiveSheet()->getStyle("E" . $rw . ":J" . $rw)->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                         $this->excel->getActiveSheet()->getStyle("E" . $rw)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                         $this->excel->getActiveSheet()->getStyle("F" . $rw)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                         $this->excel->getActiveSheet()->getStyle("G" . $rw)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                         $this->excel->getActiveSheet()->getStyle("H" . $rw)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                         $this->excel->getActiveSheet()->getStyle("I" . $rw)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                         $this->excel->getActiveSheet()->getStyle("J" . $rw)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);*/

                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }

                    if ($this->input->post('form_action') == 'export_excel') {
                        $new_row = $row;

                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT);
                        $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                        //Margins:
                        $this->excel->getActiveSheet()->getPageMargins()->setTop(2);
                        $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.35);
                        $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');
                        $styleArray = array(
                            'font' => array(
                                'bold' => true
                            )
                        );

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }
                }
            } else {
                $this->session->set_flashdata('error', validation_errors());
                redirect($_SERVER["HTTP_REFERER"]);
            }
        }
    }

	
	function deliveries($start_date = NULL, $end_date = NULL)
    {
       $this->erp->checkPermissions('by_delivery_person',NULL,'sale_report');
		
		if (!$start_date) {
            //$start = $this->db->escape(date('Y-m') . '-1');
           // $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            //$end = $this->db->escape(date('Y-m-d H:i'));
            //$end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }

        $data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
		
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('sales'), 'page' => lang('sales')), array('link' => '#', 'page' => lang('deliveries')));
        $meta = array('page_title' => lang('deliveries'), 'bc' => $bc);
        $this->page_construct('reports/deliveries', $meta, $this->data);
    }
	function deliveriess($start_date=null,$end_date=null)
	{
		
		
		if (!$start_date) {
            //$start = $this->db->escape(date('Y-m') . '-1');
           // $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
		
        if (!$end_date) {
            //$end = $this->db->escape(date('Y-m-d H:i'));
            //$end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        } 
        $data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
		
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('sales'), 'page' => lang('sales')), array('link' => '#', 'page' => lang('sale_by_delivery_person')));
        $meta = array('page_title' => lang('deliveries'), 'bc' => $bc);
        $this->page_construct('reports/deliveries', $meta, $this->data);
	}
	
	function getDeliveries($start = NULL, $end = NULL)
    {        
		$print_cabon_link = anchor('sales/view_delivery_cabon/$1', '<i class="fa fa-file-text-o"></i> ' . lang('print_cabon'), 'data-toggle="modal" data-target="#myModal"');
        $detail_link = anchor('sales/view_delivery/$1', '<i class="fa fa-file-text-o"></i> ' . lang('delivery_details'), 'data-toggle="modal" data-target="#myModal"');
        $email_link = anchor('sales/email_delivery/$1', '<i class="fa fa-envelope"></i> ' . lang('email_delivery'), 'data-toggle="modal" data-target="#myModal"');
        $edit_link = anchor('sales/edit_delivery/$1', '<i class="fa fa-edit"></i> ' . lang('edit_delivery'), 'data-toggle="modal" data-target="#myModal"');
        $pdf_link = anchor('sales/pdf_delivery/$1', '<i class="fa fa-file-pdf-o"></i> ' . lang('download_pdf'));
        $delete_link = "<a href='#' class='po' title='<b>" . lang("delete_delivery") . "</b>' data-content=\"<p>"
						. lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . site_url('sales/delete_delivery/$1') . "'>"
						. lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
						. lang('delete_delivery') . "</a>";
					$action = '<div class="text-center"><div class="btn-group text-left">'
						. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
						. lang('actions') . ' <span class="caret"></span></button>
				<ul class="dropdown-menu pull-right" role="menu">
					<li>' . $print_cabon_link . '</li> 
					<li>' . $pdf_link . '</li> 
				</ul>
			</div></div>';

        $this->load->library('datatables');
             
		$this->datatables
            ->select("
			deliveries.id as id, 
			deliveries.date, 
			username, 
			deliveries.do_reference_no, 
			sale_reference_no, 
			SUM(
                erp_delivery_items.quantity_received *
                IF (
                    erp_delivery_items.option_id,
                    (
                        SELECT
                            erp_product_variants.qty_unit
                        FROM
                            erp_product_variants
                        WHERE
                            erp_product_variants.id = erp_delivery_items.option_id
                    ),
                    1
                )
            ) AS qty_received,
			deliveries.delivery_status")
            ->from('deliveries')
            ->join('delivery_items', 'deliveries.id=delivery_items.delivery_id', 'left')
			->join('users', 'deliveries.delivery_by=users.id', 'left')
            ->group_by('deliveries.id');
			if(!$this->Owner && !$this->Admin){
				 $warehouse_id = $this->session->userdata('warehouse_id');
				 $warehouses = explode(',',$warehouse_id);
				 $this->data['warehouse_id'] = $warehouse_id;
				 $this->datatables->where_in('erp_delivery_items.warehouse_id',$warehouses);
			}
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right')==0){
				$user = $this->session->userdata('user_id');
				$this->datatables->where('erp_deliveries.delivery_by',$user);
			}
		if($start && $end){
			$this->datatables->where('date BETWEEN "' . $start . '" AND "' . $end . '"');
		}		
        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }
	
	function return_sales($warehouse_id = NULL)
    {
        $this->erp->checkPermissions();

        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->Owner) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        } else {
            $user = $this->site->getUser();
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $user->warehouse_id;
            $this->data['warehouse'] = $user->warehouse_id ? $this->site->getWarehouseByID($user->warehouse_id) : NULL;
        }

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('return_sales')));
        $meta = array('page_title' => lang('return_sales'), 'bc' => $bc);
        $this->page_construct('reports/return_sales', $meta, $this->data);
    }
	
    function getQuotesReport($pdf = NULL, $xls = NULL)
    {

        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
        if ($pdf || $xls) {

            $this->db
                ->select("date, reference_no, biller, customer, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('quote_items') . ".product_name, ' (', " . $this->db->dbprefix('quote_items') . ".quantity, ')') SEPARATOR '<br>') as iname, grand_total, status", FALSE)
                ->from('quotes')
                ->join('quote_items', 'quote_items.quote_id=quotes.id', 'left')
                ->join('warehouses', 'warehouses.id=quotes.warehouse_id', 'left')
                ->group_by('quotes.id');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('quotes.created_by', $user);
				}
			}
            if ($product) {
                $this->db->like('quote_items.product_id', $product);
            }
            if ($biller) {
                $this->db->where('quotes.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('quotes.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('quotes.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('quotes.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('quotes').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('quotes_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'quotes_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $user_id = $this->session->userdata('user_id');
            $user_biller_id = $this->session->userdata('biller_id');

            $this->load->library('datatables');
            $this->datatables
                ->select("date, reference_no, biller, customer, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('quote_items') . ".product_name, '__', " . $this->db->dbprefix('quote_items') . ".quantity) SEPARATOR '___') as iname, grand_total, status", FALSE)
                ->from('quotes')
                ->join('users', 'quotes.created_by = users.id', 'left')
                ->join('quote_items', 'quote_items.quote_id=quotes.id', 'left')
                ->join('warehouses', 'warehouses.id=quotes.warehouse_id', 'left')
                ->group_by('quotes.id');

//            if($user_biller_id != NULL){
//                $this->db->where('users.biller_id', $user_biller_id);
//            }
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user_id) {
					$this->datatables->where('quotes.created_by', $user_id);
				}
			}
            if ($product) {
                $this->datatables->where('quote_items.product_id', $product);
            }
            if ($biller) {
                $this->datatables->where_in('quotes.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('quotes.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('quotes.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('quotes.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('quotes').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }
	
	function getQuotesReport2($pdf = NULL, $xls = NULL)
    {

        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
        if ($pdf || $xls) {

            $this->db
                ->select("date, reference_no, biller, customer, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('quote_items') . ".product_name, ' (', " . $this->db->dbprefix('quote_items') . ".quantity, ')') SEPARATOR '<br>') as iname, grand_total, status", FALSE)
                ->from('quotes')
                ->join('quote_items', 'quote_items.quote_id=quotes.id', 'left')
                ->join('warehouses', 'warehouses.id=quotes.warehouse_id', 'left')
                ->group_by('quotes.id');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('quotes.created_by', $user);
				}
			}
            if ($product) {
                $this->db->like('quote_items.product_id', $product);
            }
            if ($biller) {
                $this->db->where('quotes.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('quotes.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('quotes.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('quotes.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('quotes').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('quotes_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'quotes_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("date, reference_no, biller, customer, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('quote_items') . ".product_name, '__', " . $this->db->dbprefix('quote_items') . ".quantity) SEPARATOR '___') as iname, grand_total, status", FALSE)
                ->from('quotes')
                ->join('quote_items', 'quote_items.quote_id=quotes.id', 'left')
                ->join('warehouses', 'warehouses.id=quotes.warehouse_id', 'left')
                ->group_by('quotes.id');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('quotes.created_by', $user);
				}
			}
            if ($product) {
                $this->datatables->like('quote_items.product_id', $product);
            }
            if ($biller) {
                $this->datatables->where('quotes.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('quotes.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('quotes.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('quotes.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('quotes').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }

    function getTransfersReport($pdf = NULL, $xls = NULL)
    {
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }

        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('transfers') . ".date, transfer_no, (CASE WHEN " . $this->db->dbprefix('transfers') . ".status = 'completed' THEN  GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('purchase_items') . ".product_name, ' (', " . $this->db->dbprefix('purchase_items') . ".quantity, ')') SEPARATOR '<br>') ELSE GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('transfer_items') . ".product_name, ' (', " . $this->db->dbprefix('transfer_items') . ".quantity, ')') SEPARATOR '<br>') END) as iname, from_warehouse_name as fname, from_warehouse_code as fcode, to_warehouse_name as tname,to_warehouse_code as tcode, grand_total, " . $this->db->dbprefix('transfers') . ".status")
                ->from('transfers')
                ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'left')
                ->join('purchase_items', 'purchase_items.transfer_id=transfers.id', 'left')
                ->group_by('transfers.id')->order_by('transfers.date desc');
            if ($product) {
                $this->db->where($this->db->dbprefix('purchase_items') . ".product_id", $product);
                $this->db->or_where($this->db->dbprefix('transfer_items') . ".product_id", $product);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('transfers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('transfer_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse') . ' (' . lang('from') . ')');
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse') . ' (' . lang('to') . ')');
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->transfer_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->fname . ' (' . $data_row->fcode . ')');
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->tname . ' (' . $data_row->tcode . ')');
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'transfers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:C' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('transfers') . ".date, transfer_no, (CASE WHEN " . $this->db->dbprefix('transfers') . ".status = 'completed' THEN  GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('purchase_items') . ".product_name, '__', " . $this->db->dbprefix('purchase_items') . ".quantity) SEPARATOR '___') ELSE GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('transfer_items') . ".product_name, '__', " . $this->db->dbprefix('transfer_items') . ".quantity) SEPARATOR '___') END) as iname, from_warehouse_name as fname, from_warehouse_code as fcode, to_warehouse_name as tname,to_warehouse_code as tcode, grand_total, " . $this->db->dbprefix('transfers') . ".status", FALSE)
                ->from('transfers')
                ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'left')
                ->join('purchase_items', 'purchase_items.transfer_id=transfers.id', 'left')
                ->group_by('transfers.id');
            if ($product) {
                $this->datatables->where(" (({$this->db->dbprefix('purchase_items')}.product_id = {$product}) OR ({$this->db->dbprefix('transfer_items')}.product_id = {$product})) ", NULL, FALSE);
            }
            $this->datatables->edit_column("fname", "$1 ($2)", "fname, fcode")
                ->edit_column("tname", "$1 ($2)", "tname, tcode")
                ->unset_column('fcode')
                ->unset_column('tcode');
            echo $this->datatables->generate();
        }
    }

    function getTransfersReportByProID($pdf = NULL, $xls = NULL)
    {
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }

        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('transfers') . ".date, transfer_no, (CASE WHEN " . $this->db->dbprefix('transfers') . ".status = 'completed' THEN  GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('purchase_items') . ".product_name, ' (', " . $this->db->dbprefix('purchase_items') . ".quantity, ')') SEPARATOR '<br>') ELSE GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('transfer_items') . ".product_name, ' (', " . $this->db->dbprefix('transfer_items') . ".quantity, ')') SEPARATOR '<br>') END) as iname, from_warehouse_name as fname, from_warehouse_code as fcode, to_warehouse_name as tname,to_warehouse_code as tcode, grand_total, " . $this->db->dbprefix('transfers') . ".status")
                ->from('transfers')
                ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'left')
                ->join('purchase_items', 'purchase_items.transfer_id=transfers.id', 'left')
                ->group_by('transfers.id')->order_by('transfers.date desc');
            if ($product) {
                $this->db->where($this->db->dbprefix('purchase_items') . ".product_id", $product);
                $this->db->or_where($this->db->dbprefix('transfer_items') . ".product_id", $product);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('transfers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('transfer_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse') . ' (' . lang('from') . ')');
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse') . ' (' . lang('to') . ')');
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->transfer_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->fname . ' (' . $data_row->fcode . ')');
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->tname . ' (' . $data_row->tcode . ')');
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'transfers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:C' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('transfers') . ".date, transfer_no, (CASE WHEN " . $this->db->dbprefix('transfers') . ".status = 'completed' THEN  GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('purchase_items') . ".product_name, '__', " . $this->db->dbprefix('purchase_items') . ".quantity) SEPARATOR '___') ELSE GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('transfer_items') . ".product_name, '__', " . $this->db->dbprefix('transfer_items') . ".quantity) SEPARATOR '___') END) as iname, from_warehouse_name as fname, from_warehouse_code as fcode, to_warehouse_name as tname,to_warehouse_code as tcode, " . $this->db->dbprefix('transfers') . ".status", FALSE)
                ->from('transfers')
                ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'left')
                ->join('purchase_items', 'purchase_items.transfer_id=transfers.id', 'left')
                ->group_by('transfers.id');
            if ($product) {
                $this->datatables->where(" (({$this->db->dbprefix('purchase_items')}.product_id = {$product}) OR ({$this->db->dbprefix('transfer_items')}.product_id = {$product})) ", NULL, FALSE);
            }
            $this->datatables->edit_column("fname", "$1 ($2)", "fname, fcode")
                ->edit_column("tname", "$1 ($2)", "tname, tcode")
                ->unset_column('fcode')
                ->unset_column('tcode');
            echo $this->datatables->generate();
        }
    }

    function getReturnsReport($pdf = NULL, $xls = NULL)
    {
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
		
		if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }

        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }

        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('return_sales') . ".date as date, " . $this->db->dbprefix('return_sales') . ".reference_no as ref, " . $this->db->dbprefix('sales') . ".reference_no as sal_ref, " . $this->db->dbprefix('return_sales') . ".biller, " . $this->db->dbprefix('return_sales') . ".customer, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('return_items') . ".product_name, ' (', " . $this->db->dbprefix('return_items') . ".quantity, ')') SEPARATOR '<br>') as iname, " . $this->db->dbprefix('return_sales') . ".surcharge, " . $this->db->dbprefix('return_sales') . ".grand_total, " . $this->db->dbprefix('return_sales') . ".id as id", FALSE)
                ->join('sales', 'sales.id=return_sales.sale_id', 'left')
                ->from('return_sales')
                ->join('return_items', 'return_items.return_id=return_sales.id', 'left')
                ->group_by('return_sales.id')->order_by('return_sales.date desc');
            if ($product) {
                $this->db->like($this->db->dbprefix('return_items') . ".product_id", $product);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_return_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sal_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->surcharge);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->grand_total);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $filename = 'sales_return_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $user_id = $this->session->userdata('user_id');
            $user_biller_id = $this->session->userdata('biller_id');

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('return_sales') . ".date as date, " . $this->db->dbprefix('return_sales') . ".reference_no as ref, " . $this->db->dbprefix('sales') . ".reference_no as sal_ref, " . $this->db->dbprefix('return_sales') . ".biller, " . $this->db->dbprefix('return_sales') . ".customer, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('return_items') . ".product_name, '__', " . $this->db->dbprefix('return_items') . ".quantity) SEPARATOR '___') as iname, " . $this->db->dbprefix('return_sales') . ".surcharge, " . $this->db->dbprefix('return_sales') . ".grand_total, " . $this->db->dbprefix('return_sales') . ".id as id", FALSE)
                ->from('return_sales')
                ->join('users', 'return_sales.created_by = users.id', 'left')
                ->join('sales', 'sales.id=return_sales.sale_id', 'left')
                ->join('return_items', 'return_items.return_id=return_sales.id', 'left')
                ->where('sales.pos <>',1)
                ->group_by('return_sales.id');
            
//            if($user_biller_id != NULL){
//                $this->db->where_in('sales.biller_id', json_decode($user_biller_id));
//            }

            // View Rights
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user_id) {
                    $this->db->where('return_sales.created_by', $user_id);
                }
            }
            if ($biller) {
                $this->datatables->where_in('return_sales.biller_id', $biller);
            }
			if ($customer) {
                $this->datatables->where($this->db->dbprefix('return_sales') . ".customer_id", $customer);
            }
			
            if ($product) {
                $this->datatables->like($this->db->dbprefix('return_items') . ".product_id", $product);
            }
            echo $this->datatables->generate();
        }
    }
	
	function getDepositsReport($pdf = NULL, $xls = NULL)
    {
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }

        if ($pdf || $xls) {
            $this->db
                ->select("deposits.id as id, date, amount, paid_by, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by", FALSE)
                ->from('deposits')
                ->join('users', 'users.id=deposits.created_by', 'inner')
				->where('deposits.company_id', $customer);
            if ($customer) {
                $this->db->like($this->db->dbprefix('deposits') . ".company_id", $customer);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_return_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sal_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->surcharge);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->grand_total);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $filename = 'sales_return_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $user_id = $this->session->userdata('user_id');
            $user_biller_id = $this->session->userdata('biller_id');

            $this->load->library('datatables');
            $this->datatables
                ->select("deposits.id as id, date,reference, amount, paid_by, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by", false)
                ->from("deposits")
                ->join('users', 'users.id=deposits.created_by', 'inner')
                ->where('deposits.company_id', $customer)
                ->add_column("Actions", "<div class=\"text-center\"><a class=\"tip\" title='" . lang("deposit_note") . "' href='" . site_url('customers/deposit_note/$1') . "' data-toggle='modal' data-target='#myModal2'><i class=\"fa fa-file-text-o\"></i></a> </a>    </a></div>", "id")
            ->unset_column('id');

//            if($user_biller_id != NULL){
//                $this->db->where('users.biller_id', $user_biller_id);
//            }

            // View Rights
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user_id) {
                    $this->db->where('deposits.created_by', $user_id);
                }
            }

            echo $this->datatables->generate();
        }
    }
	
	function getProductsReports2()
	{
		if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
		if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
		$this->load->library('datatables');
		$this->datatables
			->select("sales.id as id, 
			reference_no, 
			products.code, 
			products.name as pname, 
			categories.name as cname, 
			sum(erp_sale_items.quantity), 
			variants.name", false)
			->from("sales")
			->join('sale_items', 'sales.id=sale_items.sale_id', 'inner')
			->join('products', 'products.id=sale_items.product_id', 'left')
			->join('variants', 'variants.id = products.unit', 'left')
			->join('categories', 'products.category_id=categories.id', 'left')
			->group_by('products.id')
			->where('sales.customer_id', $customer);

		if ($start_date) {
			$this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
		}
		echo $this->datatables->generate();
	}

    function purchases($biller_id = NULL)
    {
        $this->erp->checkPermissions('index');
		$user = $this->site->getUser();
		$datt =$this->reports_model->getLastDate("purchases","date");
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		 if (!$this->input->post('start_date')) {
            $this->data['start_date']= $datt;
        } 
		
        if (!$this->input->post('end_date')) {
            $this->data['end_date']= $datt;
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('purchases_report')));
        $meta = array('page_title' => lang('purchases_report'), 'bc' => $bc);
        $this->page_construct('reports/purchases', $meta, $this->data);
    }
    
	function adjustment_report()
    {
        $this->erp->checkPermissions('adjustments', NULL, 'products');
        $datt = $this->reports_model->getLastDate("erp_adjustments", "date");
        $this->load->library("pagination");
		$wid = $this->reports_model->getWareByUserID();
		$str="";
		$reference_no = "";
		$warehouse_id = "";
		$created_by = "";
		$end_date = "";
		$start_date = "";
	    if($this->input->get('reference_no')){
			 $reference_no = $this->input->get('reference_no');
			 $str.="&reference_no".$reference_no;
			 $this->data['reference_no'] =$reference_no;
		}
		if($this->input->get('warehouse')){
			$warehouse_id =$this->input->get('warehouse');
		    $str.="&warehouse=".$warehouse_id;
			$this->data['warehouse'] =$warehouse_id;
		}
		if($this->input->get('created_by')){
			$created_by =$this->input->get('created_by');
			$str.="&created_by=".$created_by;
			$this->data['created_by'] = $created_by;
		}
		if($this->input->get('start_date')){
			$start_date=$this->erp->fsd($this->input->get('start_date'));
			$str.="&start_date=".$start_date;
			$this->data['start_date'] =$start_date;
		}else{
			$start_date= $datt;
			$this->data['start_date'] =$datt;
		}
	    if($this->input->get('end_date')){
			$end_date=$this->erp->fsd($this->input->get('end_date'));
			$str.="&end_date=".$end_date;
			$this->data['end_date'] =$end_date;
		}else{
			$end_date= $datt;
			$this->data['end_date'] =$datt;
		}
		
		$this->db->select("erp_adjustments.*");  
		if($reference_no){
		    $this->db->where("erp_adjustments.reference_no",$reference_no); 	
		}
		if($created_by){
			$this->db->where("erp_adjustments.created_by",$created_by);
		}
		if($warehouse_id){
			$this->db->where("erp_adjustments.warehouse_id",$warehouse_id);
		}else{
			if($wid){
				$this->db->where("erp_adjustments.warehouse_id IN ($wid)");
			}
		}
		if($start_date){
			$this->db->where("erp_adjustments.date BETWEEN '$start_date' AND '$end_date'");
		}
	    $this->db->group_by('reference_no');
		$adjusts=$this->db->get('adjustments')->num_rows();
		
		$config = array();
		$config['suffix'] = "?v=1".$str;
        $config["base_url"] = base_url() . "reports/adjustment_report/";
		$config["total_rows"] = $adjusts;
		$config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] = 50; 
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '<li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '<li>';
		$config['cur_tag_open'] = '<li class="active"><a href="#">';
		$config['cur_tag_close'] = '</a><li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '<li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '<li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		
		
		$this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);
		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links(); 
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error'); 
        $this->data['items'] = $this->reports_model->getAlladjustment($reference_no,$warehouse_id,$wid,$created_by,$start_date,$end_date,$config["per_page"],$config["ob_set"]);
        //$this->data['warehouses'] = $this->site->getAllWarehouses();
		
		$this->data['created'] =$this->site->getAllUsers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('adjustment_report')));
        $meta = array('page_title' => lang('adjustment_report'), 'bc' => $bc);
        $this->page_construct('reports/adjustment_report', $meta, $this->data);
    }
    
	function getPurchasesReport($pdf = NULL, $xls = NULL)
    {
        $datt =$this->reports_model->getLastDate("purchases","date");
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
		
		if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }
		
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date =$datt;
        }
		
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('purchases') . ".id, date, reference_no, " . 
				 $this->db->dbprefix('warehouses') . ".name as wname, 
				 supplier, 
				 (SELECT GROUP_CONCAT(pi.product_name SEPARATOR '<br/>') FROM " . $this->db->dbprefix('purchase_items') . " pi WHERE pi.purchase_id = " . $this->db->dbprefix('purchase_items') . ".purchase_id) AS iname,  
				 GROUP_CONCAT(ROUND(" . $this->db->dbprefix('purchase_items') . ".quantity) SEPARATOR '<br/>') as iqty, 
				 grand_total, 
				 paid, 
				 " . $this->db->dbprefix('purchases') . ".status", FALSE)
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
				->join('companies', 'companies.id = purchase_items.supplier_id', 'left')
                ->group_by('purchases.id')
                ->order_by('purchases.date desc');

            if (!$this->Owner && !$this->Admin) {
				if ($user) {
					$this->db->where('purchases.created_by', $user);
				}
			}
			if ($biller_id) {
                $this->db->where('purchases.biller_id', $biller_id);
            }
            if ($product) {
                $this->db->like('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where('date_format('.$this->db->dbprefix('purchases').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iqty);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("G" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $filename = 'purchase_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
					 ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
						 'wrap'       => true
					 ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $user_biller_id = json_decode($this->session->userdata('biller_id'));
            $this->load->library('datatables');
            //$this->erp->print_arrays($user_biller_id);
            $this->datatables->select($this->db->dbprefix('purchases') . ".id, 
            ".$this->db->dbprefix('purchases') . ".date, 
            reference_no, 
            " .$this->db->dbprefix('warehouses') . ".name as wname, 
            companies.company as supplier,
            grand_total, 
            paid, 
            (grand_total-paid) as balance, 
            " . $this->db->dbprefix('purchases') . ".status,CONCAT(erp_users.first_name,' ',erp_users.last_name) as create_by", FALSE)
            ->from('purchases')
            ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
            ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
            ->join('companies', 'companies.id = purchases.supplier_id', 'left')
            ->join('users', 'users.id = purchases.created_by', 'left')
            ->group_by('purchases.id');


            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				if ($user) {
					$this->datatables->where('purchases.created_by', $user);
				}
            }

            if(!$this->Owner && !$this->Admin){
                if ($user_biller_id != NULL) {
                    $this->db->where_in('purchases.biller_id', $user_biller_id);
                }
            }
            if ($product) {
                $this->datatables->where('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($biller_id) {
                $this->datatables->where_in('purchases.biller_id', json_decode($biller_id));
            }
            if ($user) {
                $this->datatables->where_in('purchases.created_by', $user);
            }
            if ($warehouse) {
                $this->datatables->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date && $end_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('purchases').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }

    function getPurchasesReportForProjectReport($pdf = NULL, $xls = NULL)
    {
        $datt =$this->reports_model->getLastDate("purchases","date");
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }

        if ($this->input->get('biller')) {
            $biller_id = $this->input->get('biller');
        } else {
            $biller_id = NULL;
        }

        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date =$datt;
        }

        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('purchases') . ".id, date, reference_no, " .
                    $this->db->dbprefix('warehouses') . ".name as wname, 
				 supplier, 
				 (SELECT GROUP_CONCAT(pi.product_name SEPARATOR '<br/>') FROM " . $this->db->dbprefix('purchase_items') . " pi WHERE pi.purchase_id = " . $this->db->dbprefix('purchase_items') . ".purchase_id) AS iname,  
				 GROUP_CONCAT(ROUND(" . $this->db->dbprefix('purchase_items') . ".quantity) SEPARATOR '<br/>') as iqty, 
				 grand_total, 
				 paid, 
				 " . $this->db->dbprefix('purchases') . ".status", FALSE)
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
                ->join('companies', 'companies.id = purchase_items.supplier_id', 'left')
                ->group_by('purchases.id')
                ->order_by('purchases.date desc');

            if (!$this->Owner && !$this->Admin) {
                if ($user) {
                    $this->db->where('purchases.created_by', $user);
                }
            }
            if ($biller_id) {
                $this->db->where('purchases.biller_id', $biller_id);
            }
            if ($product) {
                $this->db->like('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where('date_format('.$this->db->dbprefix('purchases').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iqty);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("G" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $filename = 'purchase_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                        array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
                        ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                        array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                            'wrap'       => true
                        ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $user_biller_id = json_decode($this->session->userdata('biller_id'));
            $this->load->library('datatables');
            //$this->erp->print_arrays($user_biller_id);
            $this->datatables->select($this->db->dbprefix('purchases') . ".id, 
            ".$this->db->dbprefix('purchases') . ".date, 
            reference_no, 
            " .$this->db->dbprefix('warehouses') . ".name as wname, 
            companies.company as supplier,
            grand_total, 
            paid, 
            (grand_total-paid) as balance, 
            " . $this->db->dbprefix('purchases') . ".status,CONCAT(erp_users.first_name,' ',erp_users.last_name) as create_by", FALSE)
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
                ->join('companies', 'companies.id = purchases.supplier_id', 'left')
                ->join('users', 'users.id = purchases.created_by', 'left')
                ->group_by('purchases.id');


            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                if ($user) {
                    $this->datatables->where('purchases.created_by', $user);
                }
            }

            if($biller_id){
                $this->db->where('purchases.biller_id', $biller_id);
            }
            if ($product) {
                $this->datatables->where('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date && $end_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('purchases').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }

    function getPurchasesReportByProID($pdf = NULL, $xls = NULL)
    {
        $datt =$this->reports_model->getLastDate("purchases","date");
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }

        if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }

        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date =NULL;
        }

        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = NULL;
        }


        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('purchases') . ".id, date, reference_no, " .
                    $this->db->dbprefix('warehouses') . ".name as wname, 
				 supplier, 
				 (SELECT GROUP_CONCAT(pi.product_name SEPARATOR '<br/>') FROM " . $this->db->dbprefix('purchase_items') . " pi WHERE pi.purchase_id = " . $this->db->dbprefix('purchase_items') . ".purchase_id) AS iname,  
				 GROUP_CONCAT(ROUND(" . $this->db->dbprefix('purchase_items') . ".quantity) SEPARATOR '<br/>') as iqty, 
				 grand_total, 
				 paid, 
				 " . $this->db->dbprefix('purchases') . ".status", FALSE)
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
                ->join('companies', 'companies.id = purchase_items.supplier_id', 'left')
                ->group_by('purchases.id')
                ->order_by('purchases.date desc');

            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user) {
                    $this->db->where('purchases.created_by', $user);
                }
            }
            if ($biller_id) {
                $this->db->where('purchases.biller_id', $biller_id);
            }
            if ($product) {
                $this->db->like('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where('date_format('.$this->db->dbprefix('purchases').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iqty);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("G" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $filename = 'purchase_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                        array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
                        ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                        array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                            'wrap'       => true
                        ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $user_biller_id = $this->session->userdata('biller_id');
            $this->load->library('datatables');

            $this->datatables->select($this->db->dbprefix('purchases') . ".id, 
            ".$this->db->dbprefix('purchases') . ".date, 
            reference_no, 
            " .$this->db->dbprefix('warehouses') . ".name as wname, 
            companies.name as supplier,
            purchase_items.product_name, 
            purchase_items.quantity,
            purchases.grand_total,
            purchases.paid,
            (grand_total-paid) as balance, 
            " . $this->db->dbprefix('purchases') . ".status,CONCAT(erp_users.first_name,' ',erp_users.last_name) as create_by", FALSE)
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
                ->join('companies', 'companies.id = purchases.supplier_id', 'left')
                ->join('users', 'users.id = purchases.created_by', 'left')
                ->group_by('purchases.id');

            if($user_biller_id != NULL){
                $this->db->where('purchases.biller_id', $user_biller_id);
            }

            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user) {
                    $this->datatables->where('purchases.created_by', $user);
                }
            }

            if ($biller_id) {
                $this->datatables->where('purchases.biller_id', $biller_id);
            }
            if ($product) {
                $this->datatables->where('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date && $end_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('purchases').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }
    /* OPening Stock By RAVY */
    function getOpeningStocksReportByProID($pdf = NULL, $xls = NULL)
    {
        $datt =$this->reports_model->getLastDate("purchases","date");
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }

        if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }

        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date =NULL;
        }

        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = NULL;
        }


        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('purchases') . ".id, date, reference_no, " .
                    $this->db->dbprefix('warehouses') . ".name as wname, 
				 supplier, 
				 (SELECT GROUP_CONCAT(pi.product_name SEPARATOR '<br/>') FROM " . $this->db->dbprefix('purchase_items') . " pi WHERE pi.purchase_id = " . $this->db->dbprefix('purchase_items') . ".purchase_id) AS iname,  
				 GROUP_CONCAT(ROUND(" . $this->db->dbprefix('purchase_items') . ".quantity) SEPARATOR '<br/>') as iqty, 
				 grand_total, 
				 paid, 
				 " . $this->db->dbprefix('purchases') . ".status", FALSE)
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
                ->join('companies', 'companies.id = purchase_items.supplier_id', 'left')
                ->group_by('purchases.id')
                ->order_by('purchases.date desc');

            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user) {
                    $this->db->where('purchases.created_by', $user);
                }
            }
            if ($biller_id) {
                $this->db->where('purchases.biller_id', $biller_id);
            }
            if ($product) {
                $this->db->like('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where('date_format('.$this->db->dbprefix('purchases').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iqty);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("G" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $filename = 'purchase_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                        array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
                        ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                    $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                        array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                            'wrap'       => true
                        ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $user_biller_id = $this->session->userdata('biller_id');
            $this->load->library('datatables');

            $this->datatables->select(
                'purchase_items.date,
                warehouses.name,
                products.name as product_name,
                purchase_items.quantity,
                purchase_items.unit_cost,
                (erp_purchase_items.unit_cost*erp_purchase_items.quantity) as amount'
            )
            ->from('purchase_items')
            ->join('warehouses','purchase_items.warehouse_id=warehouses.id','left')
            ->join('products','purchase_items.product_id=products.id','left')
            ->where('purchase_items.transaction_type','OPENING QUANTITY');
            if ($product) {
                $this->datatables->where('purchase_items.product_id', $product);
            }
            echo $this->datatables->generate();
        }
    }
	//========= sokhan export purchase =============//
	function getPurchasesReport2($pdf = NULL, $xls = NULL)
    {
        $datt =$this->reports_model->getLastDate("purchases","date");
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
		
		if ($this->input->get('biller_id')) {
            $biller = $this->input->get('biller_id');
        } else {
            $biller = NULL;
        }
		
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date =  $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }

        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('purchases') . ".id, purchases.date, reference_no, " . 
						 $this->db->dbprefix('warehouses') . ".name as wname, supplier , 
						 grand_total, paid, " . $this->db->dbprefix('purchases') . ".status", FALSE)
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
				->join('companies', 'companies.id = purchase_items.supplier_id', 'left')
                ->group_by('purchases.id')
                ->order_by('purchases.date desc');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('purchases.created_by', $user);
				}
			}
			if ($biller) {
                $this->db->where('purchases.biller_id', $biller);
            }
            if ($product) {
                $this->db->like('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where('date_format('.$this->db->dbprefix('purchases').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iqty);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("G" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $filename = 'purchase_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
					 ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
						 'wrap'       => true
					 ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else { 
			
            $user_id = $this->session->userdata('user_id');
            $user_biller_id = JSON_decode($this->session->userdata('biller_id'));

            $this->load->library('datatables');
            $this->datatables
            ->select('purchases.id, purchases.date, purchases.order_ref, purchases.reference_no,
                    warehouses.name as wname, purchases.supplier,
                    purchases.grand_total,
                    COALESCE ((SELECT SUM(erp_payments.discount)FROM erp_payments WHERE erp_payments.purchase_id=erp_purchases.id),0) AS discount,
                    payments.amount as paid,
                    (erp_purchases.grand_total - erp_purchases.paid) as balance,
                    purchases.status')
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
                ->join('payments', 'payments.purchase_id = erp_purchases.id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
                ->join('companies', 'companies.id = purchase_items.supplier_id', 'left')
                ->group_by('purchases.id');

            if($user_biller_id != NULL){
                $this->db->where_in('purchases.biller_id', $user_biller_id);
            }

            // View Rights
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user_id) {
                    $this->db->where('purchases.created_by', $user_id);
                }
            }
			
			if ($user) {
					$this->datatables->where('purchases.created_by', $user);
				}
			if ($biller) {
                $this->datatables->where('purchases.biller_id', $biller);
            }else{
                $this->datatables->where_in('purchases.biller_id', $user_biller_id);
            }
            if ($product) {
                $this->datatables->like('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('purchases').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }
	
	function getSalesDiscountReport($pdf = NULL, $xls = NULL)
    {
		$datt =$this->reports_model->getLastDate("sales","date");
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date =  $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }
       
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('payments') . ".id as idd, ". $this->db->dbprefix('sales') . ".suspend_note as noted," . $this->db->dbprefix('payments') . ".date, " . $this->db->dbprefix('payments') . ".reference_no as payment_ref, " . $this->db->dbprefix('sales') . ".reference_no as sale_ref, " . $this->db->dbprefix('purchases') . ".reference_no as purchase_ref, " . $this->db->dbprefix('payments') . ".note, paid_by, amount, type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date desc');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('payments.created_by', $user);
				}
			}
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($start_date) {
				$this->datatables->where('date_format('.$this->db->dbprefix('sales').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_reference'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('type'));
                $row = 2;
                $total = 0;
				
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->type);
                    if ($data_row->type == 'returned' || $data_row->type == 'sent') {
                        $total -= $data_row->amount;
                    } else {
                        $total += $data_row->amount;
                    }
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'payments_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables->select("
			sales.id as idd, 
			sales.date,
            sales.customer,			
			sale_items.product_code, 
			sale_items.product_name, 
			 
			sale_items.unit_price ,
			sale_items.quantity, 
			sale_items.discount,
			(CASE WHEN erp_sale_items.discount = '100%' THEN 
				'free'
			ELSE
				erp_sales.payment_status
			END
			) AS s_status")
			->from('sale_items')
			->join('sales', 'sales.id = sale_items.sale_id', 'left')
			->join('products', 'products.id = sale_items.product_id', 'left')
			->where('sale_items.discount <>', 0);
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('sales.created_by', $user);
				}
			}
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if (isset($biller)) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if (isset($payment_ref)) {
                $this->datatables->like('sales.reference_no', $payment_ref, 'both');
            }
            if (isset($sale_ref)) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('sales').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }
	
	function sales_discount()
    {
		$datt =$this->reports_model->getLastDate("sales","date");
        $this->erp->checkPermissions('disccount',NULL,'sale_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		  if ($this->input->post('start_date')) {
            $this->data['start_date'] =  $this->erp->fsd($this->input->post('start_date'));
        } else {
            $this->data['start_date']= $datt;
        }
        if ($this->input->post('end_date')) {
            $this->data['end_date'] = $this->erp->fsd($this->input->post('end_date'));
        } else {
            $this->data['end_date'] = $datt;
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_discount_report')));
        $meta = array('page_title' => lang('sales_discount_report'), 'bc' => $bc);
        $this->page_construct('reports/sales_discount', $meta, $this->data);
    }
	
    function payments($biller_id = NULL)
    {
        $datt =$this->reports_model->getLastDate("payments","date");
		$this->erp->checkPermissions('payments',NULL,'report_profit');
		$user = $this->site->getUser();
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			$this->data['biller_id'] = "";
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		 if ($this->input->post('start_date')) {
            $start_date = $this->erp->fsd($this->input->post('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->post('end_date')) {
            $end_date = $this->erp->fsd($this->input->post('end_date'));
        } else {
            $end_date = $datt;
        }
		$this->data['start_date2'] = $start_date;
		$this->data['end_date2'] = $end_date;
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('payments_report')));
        $meta = array('page_title' => lang('payments_report'), 'bc' => $bc);
        $this->page_construct('reports/payments', $meta, $this->data);
    }

    function getPaymentsReport($pdf = NULL, $xls = NULL)
    {
		$datt =$this->reports_model->getLastDate("payments","date");
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
		if ($this->input->get('biller_id')) {
            $biller = $this->input->get('biller_id');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('payment_ref')) {
            $payment_ref = $this->input->get('payment_ref');
        } else {
            $payment_ref = NULL;
        }
        if ($this->input->get('sale_ref')) {
            $sale_ref = $this->input->get('sale_ref');
        } else {
            $sale_ref = NULL;
        }
        if ($this->input->get('purchase_ref')) {
            $purchase_ref = $this->input->get('purchase_ref');
        } else {
            $purchase_ref = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }
        
        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('payments') . ".id as idd, ". $this->db->dbprefix('sales') . ".suspend_note as noted," . $this->db->dbprefix('payments') . ".date, " . $this->db->dbprefix('payments') . ".reference_no as payment_ref, " . $this->db->dbprefix('sales') . ".reference_no as sale_ref, " . $this->db->dbprefix('purchases') . ".reference_no as purchase_ref, " . $this->db->dbprefix('payments') . ".note,payments.paid_by, amount, payments.type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('payments.created_by', $user);
				}
			}
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
			if ($biller) {
                $this->db->where('payments.biller_id', $biller);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
				$this->datatables->where('date_format('.$this->db->dbprefix('payments').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}

            $q = $this->db->get();
			
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_reference'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('type'));

                $row = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->type);
                    if ($data_row->type == 'returned') {
                        $total -= $data_row->amount;
                    } else {
                        $total += $data_row->amount;
                    }
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'payments_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $user_id = $this->session->userdata('user_id');
            $user_biller_id = JSON_decode($this->session->userdata('biller_id'));

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('payments') . ".id as idd, ". $this->db->dbprefix('payments'). ".date, " . $this->db->dbprefix('payments') . ".reference_no as payment_ref, " . $this->db->dbprefix('sales') . ".reference_no as sale_ref, " . $this->db->dbprefix('purchases') . ".reference_no as purchase_ref, 
                (
                    CASE 
                        WHEN " . $this->db->dbprefix('payments') . ".note = ' ' THEN 
                                ".$this->db->dbprefix('sales') . ".suspend_note 
                        WHEN " . $this->db->dbprefix('sales') . ".suspend_note != ''  THEN 
                                CONCAT(".$this->db->dbprefix('sales') . ".suspend_note, ' - ',  " . $this->db->dbprefix('payments') . ".note) 
                    ELSE " . $this->db->dbprefix('payments') . ".note END
                ) as note,
                ,payments.paid_by,COALESCE(discount,0) as discount,amount, erp_payments.type,CONCAT(erp_users.first_name,' ',erp_users.last_name) as create_by")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id');

            if ($user_biller_id != NULL) {
                $this->db->where_in('payments.biller_id', $user_biller_id);
            }

            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user_id) {
                    $this->datatables->where('payments.created_by', $user_id);
                }
            }
            
            if ($user) {
                    $this->datatables->where('payments.created_by', $user);
				}

			if ($biller) {
                $this->datatables->where('payments.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('payments').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }
	
	function getPaymentsReportStaff($pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('staff', NULL, 'sale_report');

        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('payment_ref')) {
            $payment_ref = $this->input->get('payment_ref');
        } else {
            $payment_ref = NULL;
        }
        if ($this->input->get('sale_ref')) {
            $sale_ref = $this->input->get('sale_ref');
        } else {
            $sale_ref = NULL;
        }
        if ($this->input->get('purchase_ref')) {
            $purchase_ref = $this->input->get('purchase_ref');
        } else {
            $purchase_ref = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
        
        if ($pdf || $xls) {

            $this->db
                ->select("" . $this->db->dbprefix('payments') . ".date, " . $this->db->dbprefix('payments') . ".reference_no as payment_ref, " . $this->db->dbprefix('sales') . ".reference_no as sale_ref, " . $this->db->dbprefix('purchases') . ".reference_no as purchase_ref, " . $this->db->dbprefix('payments') . ".note, " . $this->db->dbprefix('payments') . ".paid_by, amount, " . $this->db->dbprefix('payments') . ".type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date desc');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('payments.created_by', $user);
				}
			}
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
				$this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_reference'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('type'));

                $row = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->type);
                    if ($data_row->type == 'returned' || $data_row->type == 'sent') {
                        $total -= $data_row->amount;
                    } else {
                        $total += $data_row->amount;
                    }
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'payments_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $user_id = $this->session->userdata('user_id');
            $user_biller_id = $this->session->userdata('biller_id');

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('payments') . ".date, " . $this->db->dbprefix('payments') . ".reference_no as payment_ref, " . $this->db->dbprefix('sales') . ".reference_no as sale_ref, " . $this->db->dbprefix('purchases') . ".reference_no as purchase_ref, " . $this->db->dbprefix('payments') . ".note," . $this->db->dbprefix('payments') . ".paid_by,amount, " . $this->db->dbprefix('payments') . ".type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id');

            if($user_biller_id != NULL){
                $this->db->where('payments.biller_id', $user_biller_id);
            }

			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user_id) {
					$this->datatables->where('payments.created_by', $user_id);
				}
			}
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }
	
    function customers()
    {
		$datt =$this->reports_model->getLastDate("erp_deliveries","date");
        $this->erp->checkPermissions('customer',NULL,'sale_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['areas'] =  $this->site->getArea();
		$this->data['customer_groups'] =  $this->site->getCustomerGroup();
		$this->data['customers'] = $this->site->getCustomers();
		$this->data['billers'] = $this->reports_model->getAllCompanies('biller');
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
		if ($this->input->post('start_date')){
            $this->data['start_date'] = $this->erp->fsd($this->input->post('start_date'));
        }else{
            $this->data['start_date'] = $datt;
        }
		if ($this->input->post('end_date')){
            $this->data['end_date'] = $this->erp->fsd($this->input->post('end_date'));
        }else{
            $this->data['end_date'] = $datt;
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customers_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->page_construct('reports/customers', $meta, $this->data);
    }

    function getCustomers($pdf = NULL, $xls = NULL)
    {
        
        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('companies') . ".id as idd, company, name, phone, email, group_areas.areas_group, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, (CASE WHEN (COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) < 0 THEN 0 ELSE (COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) END) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id=companies.id')
				->join('group_areas','group_areas.areas_g_code = companies.group_areas_id')
                ->where('companies.group_name', 'customer')
                ->order_by('companies.company asc')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatNumber($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($data_row->balance));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'customers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			if ($this->input->get('group_area')) {
            $group_area = $this->input->get('group_area');
				
			} else {
				$group_area = NULL;
			}
			if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
				
			} else {
				$customer = NULL;
			}
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . ".id as idd, company, name, phone, email, group_areas.areas_group, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, (CASE WHEN (COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) < 0 THEN 0 ELSE (COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) END) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id=companies.id')
				->join('group_areas','group_areas.areas_g_code = companies.group_areas_id','left')
                ->where('companies.group_name', 'customer')
                ->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/customer_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "idd")
                ->unset_column('id');
			if ($group_area) {
				$this->datatables->where('companies.group_areas_id', $group_area);
			}
			if ($customer) {
				$this->datatables->where('companies.id', $customer);
			}
            echo $this->datatables->generate();
        }

    }
	
	function getSellers($pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('customers', TRUE);

        if ($pdf || $xls) {
            $this->db
               ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id=companies.id')
                ->where('companies.group_name', 'customer')
				->order_by('companies.company asc')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatNumber($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($data_row->balance));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'customers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id=companies.id')
                ->where('companies.group_name', 'customer')
                ->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/customer_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id")
                ->unset_column('id');
            echo $this->datatables->generate();

        }

    }

    function customer_report($user_id = NULL)
    {
        $this->erp->checkPermissions('customers', TRUE);
        if (!$user_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_customer_selected"));
            redirect('reports/customers');
        }
        $date   = null;
        $this->data['sales'] = $this->reports_model->getSalesTotals($user_id);
        $this->data['total_sales'] = $this->reports_model->getCustomerSales($user_id);
        $this->data['total_quotes'] = $this->reports_model->getCustomerQuotes($user_id);
        $this->data['total_sales_order'] = $this->reports_model->getSalesOrder($user_id);
        $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
		$this->data['total_deposits'] = $this->reports_model->getCustomerDeposits($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
			
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
		
		$this->data['date'] = $date;
		
        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customers_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
		
        $this->page_construct('reports/customer_report', $meta, $this->data);

    }
	
	function biller_report($user_id = NULL, $warehouse_id = NULL)
    {	
        // $this->erp->print_arrays($warehouse_id);
        $this->erp->checkPermissions('project', false, 'sale_report');
        if (!$user_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_customer_selected"));
            redirect('reports/customer_report');
        }
		$this->data['categories'] = $this->site->getAllCategories();
        $this->data['sales'] = $this->reports_model->getSalesTotals($user_id);
        $this->data['total_sales'] = $this->reports_model->getCustomerSales($user_id);
        $this->data['total_quotes'] = $this->reports_model->getCustomerQuotes($user_id);
        $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        // $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['wares']   = $this->site->getCompanyByID($user_id);

        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
            
        } else {
            
            $this->data['warehouses'] = $this->products_model->getUserWarehouses();
            if($warehouse_id){
                $this->data['warehouse_id'] = $warehouse_id;
                $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
            }else{
                //$this->erp->print_arrays(str_replace(',', '-',$this->session->userdata('warehouse_id')));
                $this->data['warehouse_id'] = str_replace(',', '-',$this->session->userdata('warehouse_id'));
                $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->products_model->getUserWarehouses() : NULL;
            }
        }
		
		$this->data['date'] = isset($date);
		
        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('project_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->page_construct('reports/biller_report', $meta, $this->data);

    }

    function suppliers()
    {
        $this->erp->checkPermissions('supplier',NULL,'purchase_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('suppliers_report')));
        $meta = array('page_title' => lang('suppliers_report'), 'bc' => $bc);
        $this->page_construct('reports/suppliers', $meta, $this->data);
    }

    function getSuppliers($pdf = NULL, $xls = NULL)
    {
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(erp_purchases.id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('purchases', 'purchases.supplier_id=companies.id')
                ->where('companies.group_name', 'supplier')
                ->order_by('companies.company asc')
                ->group_by('companies.id');
				if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('purchases.created_by', $user);
				}
			}		
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('suppliers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_purchases'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatNumber($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($data_row->balance));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'suppliers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $user_biller_id = JSON_decode($this->session->userdata('biller_id'));

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . ".id as idd, companies.company, name, companies.phone, companies.email, count(" . $this->db->dbprefix('purchases') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('purchases', 'purchases.supplier_id=companies.id')
                ->join('users', 'users.id=purchases.created_by', 'left')
                ->where('companies.group_name', 'supplier')
                ->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/supplier_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "idd")
                ->unset_column('id');

                if($user_biller_id){
                    $this->db->where_in('purchases.biller_id', $user_biller_id);
                }

				
				if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('purchases.created_by', $user);
				}
			}		
				
            echo $this->datatables->generate();

        }

    }

    function supplier_report($user_id = NULL, $biller_id = NULL)
    {
        $this->erp->checkPermissions('supplier', false, 'purchase_report');
        if (!$user_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_supplier_selected"));
            redirect('reports/suppliers');
        }

		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			$this->data['biller_id'] = "";
		}
        $user = $this->site->getUser();

		if(!$this->Owner && !$this->Admin) {
			if(isset($user->biller_id)? $user->biller_id :""){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}

		if ($this->input->post('start_date')) {
            $this->data['start_date1']  = $this->erp->fsd($this->input->post('start_date'));
        } else {
            $this->data['start_date1']  = null;
        }
        if ($this->input->post('end_date')) {
            $this->data['end_date1'] =  $this->erp->fsd($this->input->post('end_date'));
        } else {
            $this->data['end_date1']  = null;	
        }
		
		if ($this->input->post('pay_start_date')) {
			$this->data['start_date2']  = $this->erp->fsd($this->input->post('pay_start_date'));
        } else {
			$this->data['start_date2']  = null;
        }
        if ($this->input->post('pay_end_date')) {
			$this->data['end_date2'] =  $this->erp->fsd($this->input->post('pay_end_date'));
        } else {
			$this->data['end_date2']  = null;
        }
		
		if ($this->input->post('start_date2')) {
			$this->data['start_date3']  = $this->erp->fsd($this->input->post('start_date2'));
        } else {
			$this->data['start_date3']  = null;
        }
        if ($this->input->post('end_date2')) {
			$this->data['end_date3'] =  $this->erp->fsd($this->input->post('end_date2'));
        } else {
			$this->data['end_date3']  = null;
        }
		$this->data['categories'] = $this->site->getAllCategories();
        $this->data['purchases'] = $this->reports_model->getPurchasesTotals($user_id);
        $this->data['total_purchases'] = $this->reports_model->getSupplierPurchases($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
		$this->data['products']     = $this->reports_model->getAllProducts();

        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');

        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('suppliers_report')));
        $meta = array('page_title' => lang('suppliers_report'), 'bc' => $bc);
        $this->page_construct('reports/supplier_report', $meta, $this->data);

    }
    
    function getSupplierByItems($pdf = NULL, $xls = NULL)
    {
       
        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(purchases.id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('purchases', 'purchases.supplier_id=companies.id')
                ->where('companies.group_name', 'supplier')
                ->order_by('companies.company asc')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('suppliers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_purchases'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatNumber($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($data_row->balance));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'suppliers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . ".id as idd, company, name, phone, email, count(" . $this->db->dbprefix('purchases') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('purchases', 'purchases.supplier_id=companies.id')
                ->where('companies.group_name', 'supplier')
                ->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/supplier_by_items_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "idd")
                ->unset_column('id');
            echo $this->datatables->generate();

        }

    }

    function supplier_by_items_report($user_id = NULL, $biller_id = NULL)
    {
        $this->erp->checkPermissions('suppliers', false, 'product_report');

        if (!$user_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_supplier_selected"));
            redirect('reports/suppliers');
        }
		
		$user = $this->site->getUser();
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		
        $this->data['purchases'] = $this->reports_model->getPurchasesTotals($user_id);
        $this->data['total_purchases'] = $this->reports_model->getSupplierPurchases($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();

        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');

        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('supplier_by_items_report')));
        $meta = array('page_title' => lang('suppliers_by_items_report'), 'bc' => $bc);
        $this->page_construct('reports/supplier_by_items_report', $meta, $this->data);

    }
    
    function supplier_by_items()
    {
        $this->erp->checkPermissions('suppliers',NULL,'product_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('supplier_by_items_report')));
        $meta = array('page_title' => lang('supplier_by_items_report'), 'bc' => $bc);
        $this->page_construct('reports/supplier_by_items', $meta, $this->data);
    }

    function project_manager()
    {
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('staff_report')));
        $meta = array('page_title' => lang('staff_report'), 'bc' => $bc);
        $this->page_construct('reports/project_managers', $meta, $this->data);
    }
	
	function users()
    {
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('staff_report')));
        $meta = array('page_title' => lang('staff_report'), 'bc' => $bc);
        $this->page_construct('reports/users', $meta, $this->data);
    }

    function getUsers()
    {
        $this->load->library('datatables');
        $this->datatables
            ->select($this->db->dbprefix('users').".id as id, first_name, last_name, email, company, ".$this->db->dbprefix('groups').".name, active")
            ->from("users")
            ->join('groups', 'users.group_id=groups.id', 'left')
            ->group_by('users.id')
            ->where('company_id', NULL);
        if (!$this->Owner) {
            $this->datatables->where('group_id !=', 1);
        }
		
		if (!$this->Customer || !$this->Supplier || !$this->Owner || !$this->Admin) {
            $this->datatables->where('users.biller_id', $this->session->userdata('biller_id'));
        }
		
        $this->datatables
            ->edit_column('active', '$1__$2', 'active, id')
            ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/staff_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id")
            ->unset_column('id');
        echo $this->datatables->generate();
    }
	
	function getProjectUsers()
    {
        $this->load->library('datatables');
        $this->datatables
            ->select($this->db->dbprefix('users').".id as id, first_name, last_name, email, company, ".$this->db->dbprefix('groups').".name, active")
            ->from("users")
            ->join('groups', 'users.group_id=groups.id', 'left')
            ->group_by('users.id')
            ->where('company_id', NULL);
        if (!$this->Owner) {
            $this->datatables->where('group_id !=', 1);
        }
        $this->datatables
            ->edit_column('active', '$1__$2', 'active, id')
            ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/project_users_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id")
            ->unset_column('id');
        echo $this->datatables->generate();
    }
	
	function project_users_report($user_id = NULL, $year = NULL, $month = NULL, $pdf = NULL, $cal = 0)
    {
        if (!$user_id) {
            $this->session->set_flashdata('error', lang("no_user_selected"));
            redirect('reports/project_manager');
        }
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['purchases'] = $this->reports_model->getStaffPurchases($user_id);
        $this->data['sales'] = $this->reports_model->getStaffSalemanProject($user_id);
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getAllWarehouses();

        if (!$year) {
            $year = date('Y');
        }
        if (!$month || $month == '#monthly-con') {
            $month = date('m');
        }
        if ($pdf) {
            if ($cal) {
                $this->monthly_sales($year, $pdf, $user_id);
            } else {
                $this->daily_sales($year, $month, $pdf, $user_id);
            }
        }
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/staff_report/'.$user_id),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $config['template'] = '{table_open}<table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
		{heading_row_start}<tr>{/heading_row_start}
		{heading_previous_cell}<th class="text-center"><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
		{heading_title_cell}<th class="text-center" colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
		{heading_next_cell}<th class="text-center"><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
		{heading_row_end}</tr>{/heading_row_end}
		{week_row_start}<tr>{/week_row_start}
		{week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
		{week_row_end}</tr>{/week_row_end}
		{cal_row_start}<tr class="days">{/cal_row_start}
		{cal_cell_start}<td class="day">{/cal_cell_start}
		{cal_cell_content}
		<div class="day_num">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content}
		{cal_cell_content_today}
		<div class="day_num highlight">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content_today}
		{cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
		{cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
		{cal_cell_blank}&nbsp;{/cal_cell_blank}
		{cal_cell_end}</td>{/cal_cell_end}
		{cal_row_end}</tr>{/cal_row_end}
		{table_close}</table>{/table_close}';

        $this->load->library('calendar', $config);
        $sales = $this->reports_model->getStaffDailySaleman($user_id, $year, $month);

        if (!empty($sales)) {
            foreach ($sales as $sale) {
                $daily_sale[$sale->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang("discount") . "</td><td>" . $this->erp->formatMoney($sale->discount) . "</td></tr><tr><td>" . lang("product_tax") . "</td><td>" . $this->erp->formatMoney($sale->tax1) . "</td></tr><tr><td>" . lang("order_tax") . "</td><td>" . $this->erp->formatMoney($sale->tax2) . "</td></tr><tr><td>" . lang("total") . "</td><td>" . $this->erp->formatMoney($sale->total) . "</td></tr><tr><td>" . lang("award_points") . "</td><td>" . intval($sale->total / $this->Settings->each_sale) . "</td></tr></table>";
            }
        } else {
            $daily_sale = array();
        }
        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
        if ($this->input->get('pdf')) {

        }
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        $this->data['msales'] = $this->reports_model->getStaffMonthlySaleman($user_id, $year);
        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('staff_report')));
        $meta = array('page_title' => lang('staff_report'), 'bc' => $bc);
        $this->page_construct('reports/staff_report', $meta, $this->data);

    }

    function staff_report($user_id = NULL, $year = NULL, $month = NULL, $pdf = NULL, $cal = 0)
    {
        if (!$user_id) {
            $this->session->set_flashdata('error', lang("no_user_selected"));
            redirect('reports/users');
        }
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['purchases'] = $this->reports_model->getStaffPurchases($user_id);
        $this->data['sales'] = $this->reports_model->getStaffSaleman($user_id);
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getAllWarehouses();

        if (!$year) {
            $year = date('Y');
        }
        if (!$month || $month == '#monthly-con') {
            $month = date('m');
        }
        if ($pdf) {
            if ($cal) {
                $this->monthly_sales($year, $pdf, $user_id);
            }else {
                $this->daily_sales($year, $month, $pdf, $user_id);
            }
        }
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/staff_report/'.$user_id),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $config['template'] = '{table_open}<table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
		{heading_row_start}<tr>{/heading_row_start}
		{heading_previous_cell}<th class="text-center"><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
		{heading_title_cell}<th class="text-center" colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
		{heading_next_cell}<th class="text-center"><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
		{heading_row_end}</tr>{/heading_row_end}
		{week_row_start}<tr>{/week_row_start}
		{week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
		{week_row_end}</tr>{/week_row_end}
		{cal_row_start}<tr class="days">{/cal_row_start}
		{cal_cell_start}<td class="day">{/cal_cell_start}
		{cal_cell_content}
		<div class="day_num">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content}
		{cal_cell_content_today}
		<div class="day_num highlight">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content_today}
		{cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
		{cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
		{cal_cell_blank}&nbsp;{/cal_cell_blank}
		{cal_cell_end}</td>{/cal_cell_end}
		{cal_row_end}</tr>{/cal_row_end}
		{table_close}</table>{/table_close}';

        $this->load->library('calendar', $config);
        $sales = $this->reports_model->getStaffDailySaleman($user_id, $year, $month);

        if (!empty($sales)) {
			$grand_total=0;
            foreach ($sales as $sale) {
				$grand_total = ($sale->total - $sale->discount - $sale->t_return + $sale->tax2);
                $daily_sale[$sale->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang("total") . "</td><td>" . $this->erp->formatMoney($sale->total) . "</td></tr><tr><td>" . lang("discount") . "</td><td>" . $this->erp->formatMoney($sale->discount) . "</td></tr><tr><td>" . lang("product_tax") . "</td><td>" . $this->erp->formatMoney($sale->tax1) . "</td></tr><tr><td>" . lang("refund") . "</td><td>" . $this->erp->formatMoney($sale->t_return) . "</td></tr><tr><td>" . lang("order_tax") . "</td><td>" . $this->erp->formatMoney($sale->tax2) . "</td></tr><tr><td>" . lang("grand_total") . "</td><td>" . $this->erp->formatMoney($grand_total) . "</td></tr><tr><td>" . lang("award_points") . "</td><td>" . intval($sale->total / $this->Settings->each_sale) . "</td></tr></table>";
            }
        } else {
            $daily_sale = array();
        }
        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
		
        /* purchase daily */
		
		$configs = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/staff_report/'.$user_id),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $configs['template'] = '{table_open}<table border="0" cellpadding="0" cellspacing="0" class="tables table-bordered dfTable">{/table_open}
		{heading_row_start}<tr>{/heading_row_start}
		{heading_previous_cell}<th class="text-center"><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
		{heading_title_cell}<th class="text-center" colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
		{heading_next_cell}<th class="text-center"><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
		{heading_row_end}</tr>{/heading_row_end}
		{week_row_start}<tr>{/week_row_start}
		{week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
		{week_row_end}</tr>{/week_row_end}
		{cal_row_start}<tr class="days">{/cal_row_start}
		{cal_cell_start}<td class="day">{/cal_cell_start}
		{cal_cell_content}
		<div class="day_nums">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content}
		{cal_cell_content_today}
		<div class="day_num highlight">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content_today}
		{cal_cell_no_content}<div class="day_nums">{day}</div>{/cal_cell_no_content}
		{cal_cell_no_content_today}<div class="day_nums highlight">{day}</div>{/cal_cell_no_content_today}
		{cal_cell_blank}&nbsp;{/cal_cell_blank}
		{cal_cell_end}</td>{/cal_cell_end}
		{cal_row_end}</tr>{/cal_row_end}
		{table_close}</table>{/table_close}';

        $this->load->library('calendar', $configs);
        $purchase = $this->reports_model->getStaffDailySaleman1($user_id, $year, $month);

        if (!empty($purchase)) {
			$grand_total=0;
            foreach ($purchase as $pur){
				$grand_total = ($pur->total - $pur->discount + $pur->tax2);
                $daily_purchase[$pur->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang("total") . "</td><td>" . $this->erp->formatMoney($pur->total) . "</td></tr><tr><td>" . lang("discount") . "</td><td>" . $this->erp->formatMoney($pur->discount) . "</td></tr><tr><td>" . lang("product_tax") . "</td><td>" . $this->erp->formatMoney($pur->tax1) . "</td></tr><tr><td>" . lang("order_tax") . "</td><td>" . $this->erp->formatMoney($pur->tax2) . "</td></tr><tr><td>" . lang("grand_total") . "</td><td>" . $this->erp->formatMoney($grand_total) . "</td></tr><tr><td>" . lang("award_points") . "</td><td>" . intval($pur->total / $this->Settings->each_sale) . "</td></tr></table>";
            }
        } else {
            $daily_purchase = array();
        }
        $this->data['calenders'] = $this->calendar->generate($year, $month, $daily_purchase);
		
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        $this->data['msales'] = $this->reports_model->getStaffMonthlySaleman($user_id, $year);
        $this->data['msales1'] = $this->reports_model->getStaffMonthlySaleman1($user_id, $year);
		$this->data['mpurchases'] = $this->reports_model->getStaffMonthlyPurchases($user_id, $year);
        $this->data['user_id'] = $user_id;
        $this->data['products'] = $this->site->getProducts();

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('staff_report')));
        $meta = array('page_title' => lang('staff_report'), 'bc' => $bc);
        $this->page_construct('reports/staff_report', $meta, $this->data);

    }

    function getUserLogins($id = NULL, $pdf = NULL, $xls = NULL)
    {
        if ($this->input->get('login_start_date')) {
            $login_start_date = $this->input->get('login_start_date');
        } else {
            $login_start_date = NULL;
        }
        if ($this->input->get('login_end_date')) {
            $login_end_date = $this->input->get('login_end_date');
        } else {
            $login_end_date = NULL;
        }
        if ($login_start_date) {
            $login_start_date = $this->erp->fld($login_start_date);
            $login_end_date = $login_end_date ? $this->erp->fld($login_end_date) : date('Y-m-d H:i:s');
        }
        if ($pdf || $xls) {

            $this->db
                ->select("login, ip_address, time")
                ->from("user_logins")
                ->where('user_id', $id)
                ->order_by('time desc');
            if ($login_start_date) {
                $this->datatables->where('time BETWEEN "' . $login_start_date . '" and "' . $login_end_date . '"', FALSE);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('staff_login_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('ip_address'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('time'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->login);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->ip_address);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->erp->hrld($data_row->time));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);

                $filename = 'staff_login_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:C' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("login, ip_address, time")
                ->from("user_logins")
                ->where('user_id', $id);

            if ($login_start_date) {
                $this->datatables->where('time BETWEEN "' . $login_start_date . '" and "' . $login_end_date . '"', FALSE);
            }
            echo $this->datatables->generate();

        }

    }
	
    function getSaleProduct($id = NULL, $pdf = NULL, $xls = NULL) {
        // if ($this->input->get($Sdate)) {
        if ($this->input->get('product_id')) {
            $product_id = $this->input->get('product_id');
        } else {
            $product_id = null;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date = null;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = null;
        }
        if ($pdf || $xls) {

            $this->db
                ->select("erp_sales.date,erp_sales.reference_no,erp_sale_items.product_code,erp_sale_items.product_name,erp_sale_items.quantity,erp_product_variants. NAME,erp_sale_items.net_unit_price,(erp_sale_items.net_unit_price * erp_sale_items.quantity) AS TotalPrice")
                ->from("erp_sales")
                ->join('erp_sale_items','erp_sale_items.sale_id = erp_sales.id','left')
                ->join('erp_products','erp_sale_items.product_id = erp_products.id','left')
                ->join('erp_product_variants','erp_sale_items.option_id = erp_product_variants.id','left')
                ->where('erp_sales.created_by', $id);

                if ($start_date) {
                    $this->datatables->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"', FALSE);
                }

                $q = $this->db->get();
                if ($q->num_rows() > 0) {
                    foreach (($q->result()) as $row) {
                        $data[] = $row;
                    }
                } else {
                    $data = NULL;
                }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('staff_SaleProduct_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('qty'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('unit_price'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('amount'));

                $row = 2;
                $total_quantity = $total_net_unit_price = $total_TotalPrice = 0;
                foreach ($data as $data_row) {
                    $total_quantity += $data_row->quantity;
                    $total_net_unit_price += $data_row->net_unit_price;
                    $total_TotalPrice += $data_row->TotalPrice;

                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->product_code);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->NAME);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->net_unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->TotalPrice);
                    $new_row = $row+1;
                    $this->excel->getActiveSheet()->SetCellValue('E' . $new_row, $total_quantity);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $new_row, $total_net_unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $new_row, $total_TotalPrice);

                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(17);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(17);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                $filename = 'staff_SaleProduct_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');
                    $styleArray = array(
                            'font'  => array(
                                'bold'  => true
                            )
                        );
                        
                    $this->excel->getActiveSheet()->getStyle('A1:H1')->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getStyle('A1:H1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('G' . $new_row.'')->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('H' . $new_row.'')->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('E' . $new_row.'')->getFont()->setBold(true);
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:C' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    $styleArray = array(
                            'font'  => array(
                                'bold'  => true
                            )
                        );
                        
                    $this->excel->getActiveSheet()->getStyle('A1:H1')->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getStyle('A1:H1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('G' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                    $this->excel->getActiveSheet()->getStyle('G' . $new_row.'')->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('H' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                    $this->excel->getActiveSheet()->getStyle('H' . $new_row.'')->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('E' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                    $this->excel->getActiveSheet()->getStyle('E' . $new_row.'')->getFont()->setBold(true);
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $user_biller_id = $this->session->userdata('biller_id');

            $this->load->library('datatables');
            $this->datatables
                ->select("erp_products.image,erp_sales.date,erp_sales.reference_no,erp_sale_items.product_code,erp_sale_items.product_name,erp_sale_items.quantity,erp_product_variants. NAME,erp_sale_items.net_unit_price,(erp_sale_items.net_unit_price * erp_sale_items.quantity) AS TotalPrice")
                ->from("erp_sales")
                ->join('erp_sale_items','erp_sale_items.sale_id = erp_sales.id','left')
                ->join('erp_products','erp_sale_items.product_id = erp_products.id','left')
                ->join('erp_product_variants','erp_sale_items.option_id = erp_product_variants.id','left')
                ->where('erp_sales.created_by', $id);

                if($user_biller_id != NULL){
                    $this->db->where('erp_sales.biller_id', $user_biller_id);
                }

                if ($product_id) {
                    $this->datatables->where('erp_sale_items.product_id', $product_id);
                }

                if ($start_date) {
                    $this->datatables->where('date BETWEEN "' . $start_date . '" and "' . $end_date.'"');
                }
                echo $this->datatables->generate();

        }
    }

	function email_receipt($sale_id = NULL)
    {
        $this->erp->checkPermissions('index');
        if ($this->input->post('id')) {
            $sale_id = $this->input->post('id');
        } else {
            die();
        }
        if ($this->input->post('email')) {
            $to = $this->input->post('email');
        }
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['message'] = $this->session->flashdata('message');

        $this->data['rows'] = $this->pos_model->getAllInvoiceItems($sale_id);
        $inv = $this->pos_model->getInvoiceByID($sale_id);
        $biller_id = $inv->biller_id;
        $customer_id = $inv->customer_id;
        $this->data['biller'] = $this->pos_model->getCompanyByID($biller_id);
        $this->data['customer'] = $this->pos_model->getCompanyByID($customer_id);

        $this->data['payments'] = $this->pos_model->getInvoicePayments($sale_id);
        $this->data['pos'] = $this->pos_model->getSetting();
        $this->data['barcode'] = $this->barcode($inv->reference_no, 'code39', 30);
        $this->data['inv'] = $inv;
        $this->data['sid'] = $sale_id;
        $this->data['page_title'] = $this->lang->line("invoice");

        if (!$to) {
            $to = $this->data['customer']->email;
        }
        if (!$to) {
            echo json_encode(array('msg' => $this->lang->line("no_meil_provided")));
        }
        $receipt = $this->load->view($this->theme . 'pos/email_receipt', $this->data, TRUE);

        if ($this->erp->send_email($to, 'Receipt from ' . $this->data['biller']->company, $receipt)) {
            echo json_encode(array('msg' => $this->lang->line("email_sent")));
        } else {
            echo json_encode(array('msg' => $this->lang->line("email_failed")));
        }

    }
	
	function email_profit($date=null)
    {
        $this->erp->checkPermissions('index');
        if ($this->input->post('email')) {
            $to = $this->input->post('email');
        }
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['message'] = $this->session->flashdata('message');
		 if ( ! $this->Owner) {
			$this->session->set_flashdata('error', lang('access_denied'));
			$this->erp->md();
		}
		if ( ! $date) { $date = date('Y-m-d'); }
		$this->data['revenues'] = $this->reports_model->getDailySaleRevenues($date);
		$this->data['costing'] = $this->reports_model->getCosting($date);
		$this->data['expenses'] = $this->reports_model->getExpenses($date);
		$this->data['discount_date'] = $this->reports_model->getTotalDiscountDate($date);
		$refund =  $this->reports_model->getSalesReturnDate($date);
		$this->data['refunds'] =$refund;
		$this->data['discount'] = $refund->order_discount;
		$this->data['count_dis'] = $this->reports_model->Count_Sale_discount($date);
		$this->data['date'] = $date;
		$this->data['sendemail'] = '1';
		
		$receipt = $this->load->view($this->theme . 'reports/profit', $this->data, TRUE);
		
        //$receipt = $this->load->view($this->theme . 'pos/email_receipt', $this->data, TRUE);

        if ($this->erp->send_email($to, 'Profit', $receipt)) {
            echo json_encode(array('msg' => $this->lang->line("email_sent")));
        } else {
            echo json_encode(array('msg' => $this->lang->line("email_failed")));
        }

    }
	
    function getCustomerLogins($id = NULL)
    {
        if ($this->input->get('login_start_date')) {
            $login_start_date = $this->input->get('login_start_date');
        } else {
            $login_start_date = NULL;
        }
        if ($this->input->get('login_end_date')) {
            $login_end_date = $this->input->get('login_end_date');
        } else {
            $login_end_date = NULL;
        }
        if ($login_start_date) {
            $login_start_date = $this->erp->fld($login_start_date);
            $login_end_date = $login_end_date ? $this->erp->fld($login_end_date) : date('Y-m-d H:i:s');
        }
        $this->load->library('datatables');
        $this->datatables
            ->select("login, ip_address, time")
            ->from("user_logins")
            ->where('customer_id', $id);
        if ($login_start_date) {
            $this->datatables->where('time BETWEEN "' . $login_start_date . '" and "' . $login_end_date . '"');
        }
        echo $this->datatables->generate();
    }

    function profit_loss($start_date = NULL, $end_date = NULL, $biller_id = NULL)
    {
		$this->erp->checkPermissions('index', NULL, 'report_profit');

        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
		if($biller_id != NULL && biller_id != ""){
			$this->data['biller_id'] = $biller_id;
		}else{
			$this->data['biller_id'] = "";
		}
		$this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $this->data['total_purchases'] = $this->reports_model->getTotalPurchases($start, $end);
        $this->data['total_sales'] = $this->reports_model->getTotalSales($start, $end);
        $this->data['total_received'] = $this->reports_model->getTotalReceivedAmount($start, $end);
        $this->data['total_received_cash'] = $this->reports_model->getTotalReceivedCashAmount($start, $end);
        $this->data['total_received_cc'] = $this->reports_model->getTotalReceivedCCAmount($start, $end);
        $this->data['total_received_cheque'] = $this->reports_model->getTotalReceivedChequeAmount($start, $end);
        $this->data['total_received_ppp'] = $this->reports_model->getTotalReceivedPPPAmount($start, $end);
        $this->data['total_received_stripe'] = $this->reports_model->getTotalReceivedStripeAmount($start, $end);
        $this->data['total_returned'] = $this->reports_model->getTotalReturnedAmount($start, $end);
        $this->data['total_paid'] = $this->reports_model->getTotalPaidAmount($start, $end);
        $this->data['total_expenses'] = $this->reports_model->getTotalExpenses($start, $end);
		$this->data['total_costs'] = $this->reports_model->getTotalCosts($start, $end);
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('profit_loss')));
        $meta = array('page_title' => lang('profit_loss'), 'bc' => $bc);
        $this->page_construct('reports/profit_loss', $meta, $this->data);
    }

    function profit_loss_pdf($start_date = NULL, $end_date = NULL)
    {
        $this->erp->checkPermissions('profit_loss');
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }

        $this->data['total_purchases'] = $this->reports_model->getTotalPurchases($start, $end);
        $this->data['total_sales'] = $this->reports_model->getTotalSales($start, $end);
        $this->data['total_expenses'] = $this->reports_model->getTotalExpenses($start, $end);
        $this->data['total_paid'] = $this->reports_model->getTotalPaidAmount($start, $end);
        $this->data['total_received'] = $this->reports_model->getTotalReceivedAmount($start, $end);
        $this->data['total_received_cash'] = $this->reports_model->getTotalReceivedCashAmount($start, $end);
        $this->data['total_received_cc'] = $this->reports_model->getTotalReceivedCCAmount($start, $end);
        $this->data['total_received_cheque'] = $this->reports_model->getTotalReceivedChequeAmount($start, $end);
        $this->data['total_received_ppp'] = $this->reports_model->getTotalReceivedPPPAmount($start, $end);
        $this->data['total_received_stripe'] = $this->reports_model->getTotalReceivedStripeAmount($start, $end);
        $this->data['total_returned'] = $this->reports_model->getTotalReturnedAmount($start, $end);
		$this->data['total_costs'] = $this->reports_model->getTotalCosts($start, $end);
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);

        $html = $this->load->view($this->theme . 'reports/profit_loss_pdf', $this->data, true);
        $name = lang("profit_loss") . "-" . str_replace(array('-', ' ', ':'), '_', $this->data['start']) . "-" . str_replace(array('-', ' ', ':'), '_', $this->data['end']) . ".pdf";
        $this->erp->generate_pdf($html, $name, false, false, false, false, false, 'L');
    }

    function register()
    {
        $this->erp->checkPermissions('index', NULL, 'report_profit');

        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('register_report')));
        $meta = array('page_title' => lang('register_report'), 'bc' => $bc);
        $this->page_construct('reports/register', $meta, $this->data);
    }

    function getRrgisterlogs($pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('index', NULL, 'report_profit');

        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }

        if ($pdf || $xls) {

            $this->db
                ->select("date, closed_at, CONCAT(" . $this->db->dbprefix('users') . ".first_name, ' ', " . $this->db->dbprefix('users') . ".last_name, ' (', users.email, ')') as user, cash_in_hand, total_cc_slips, total_cheques, total_cash, total_cc_slips_submitted, total_cheques_submitted,total_cash_submitted, pos_register.note", FALSE)
                ->from("pos_register")
                ->join('users', 'users.id=pos_register.user_id', 'left')
                ->order_by('date desc');
            //->where('status', 'close');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('pos_register.user_id', $user);
				}
			}
            if ($start_date) {
                $this->db->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('register_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('open_time'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('close_time'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('cash_in_hand'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('cc_slips'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('cheques'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('total_cash'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('cc_slips_submitted'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('cheques_submitted'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('total_cash_submitted'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('note'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->closed_at);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->user);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->cash_in_hand);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->total_cc_slips);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->total_cheques);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->total_cash);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->total_cc_slips_submitted);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->total_cheques_submitted);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->total_cash_submitted);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->note);
                    if($data_row->total_cash_submitted < $data_row->total_cash || $data_row->total_cheques_submitted < $data_row->total_cheques || $data_row->total_cc_slips_submitted < $data_row->total_cc_slips) {
                        $this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row)->applyFromArray(
                                array( 'fill' => array('type' => PHPExcel_Style_Fill::FILL_SOLID, 'color' => array('rgb' => 'F2DEDE')) )
                                );
                    }
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(35);
                $filename = 'register_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    //$this->excel->getActiveSheet()->getStyle('C2:C' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $user_id = $this->session->userdata('user_id');
            
            $this->load->library('datatables');
            $this->datatables
                ->select("erp_pos_register.id as idd, date, closed_at, CONCAT(" . $this->db->dbprefix('users') . ".first_name, ' ', " . $this->db->dbprefix('users') . ".last_name) as user, cash_in_hand, CONCAT(total_cc_slips, ' (', total_cc_slips_submitted, ')'), CONCAT(total_cheques, ' (', total_cheques_submitted, ')'), CONCAT(total_member_slips, ' (', total_member_slips_submitted, ')'),CONCAT(total_voucher_slips, ' (', total_voucher_slips_submitted, ')'), CONCAT(total_cash, ' (', total_cash_submitted, ')'), pos_register.note", FALSE)
                ->from("pos_register")
                ->join('users', 'users.id = pos_register.user_id', 'left');

			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user_id) {
					$this->datatables->where('pos_register.user_id', $user_id);
				}
			}

            if ($start_date) {
                $this->datatables->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }
	
	function view_sale_detail($product_code = NULL)
    {		
        $this->erp->checkPermissions('product', false, 'product_report');
        $this->data['sale_details'] = $this->reports_model->getSaleDetail($product_code);	
		
        $this->load->view($this->theme . 'reports/view_sale_detail', $this->data);
		 //$this->page_construct('reports/index', $meta, $this->data);
    }
	
	function view_purchase_detail($product_code = NULL, $supplier_id = NULL)
    {		
        $this->erp->checkPermissions('product', false, 'product_report');
		if($supplier_id){
			$this->data['purchase_details'] = $this->reports_model->getPurchaseDetailSupplier($product_code, $supplier_id);	
		}else{
			$this->data['purchase_details'] = $this->reports_model->getPurchaseDetail($product_code);	
		}

        $this->load->view($this->theme . 'reports/view_purchase_detail', $this->data);
		 //$this->page_construct('reports/index', $meta, $this->data);
    }
	
	function view_sale_detail_in_out($product_code = NULL)
    {		
        $this->erp->checkPermissions('in_out', false, 'product_report');
        $this->data['sale_details'] = $this->reports_model->getSaleDetail($product_code);	
		
        $this->load->view($this->theme . 'reports/view_sale_detail_in_out', $this->data);
		 //$this->page_construct('reports/index', $meta, $this->data);
    }
	
	function view_purchase_detail_in_out($product_code = NULL)
    {		
        $this->erp->checkPermissions('in_out', false, 'product_report');
        $this->data['purchase_details'] = $this->reports_model->getPurchaseDetail($product_code);	
		
        $this->load->view($this->theme . 'reports/view_purchase_detail_in_out', $this->data);
		 //$this->page_construct('reports/index', $meta, $this->data);
    }
	
	function view_profit_lost_purchase($start_date=null, $end_date=null)
    {
       $end_date_time=explode('_',$end_date);
	   $end_date=$end_date_time[0]." ".str_replace('-',':',$end_date_time[1]);
       $this->erp->checkPermissions(false, true);
        /*Fix total Purchases paid by RAVY*/
       $this->data['purchase_info']= $this->db
                ->select('erp_purchases.id, erp_purchases.date, erp_purchases.reference_no, erp_purchases.supplier, erp_purchases.status, erp_purchases.grand_total,(select sum(erp_payments.discount) from erp_payments where erp_payments.purchase_id=erp_purchases.id) as discount ,(select sum(erp_payments.amount) from erp_payments where erp_payments.purchase_id=erp_purchases.id) as paid, (erp_purchases.grand_total-paid) as balance, erp_purchases.payment_status')
                ->from('erp_purchases')
				->where('erp_purchases.status', 'received')
				->where('erp_purchases.date >=',$start_date)
				->where('erp_purchases.date <=',$end_date)
				->get();
         $this->load->view($this->theme . 'reports/modal_profit_lost_purchase', $this->data);
    }
	
    function view_profit_lost_sale($start_date=null,$end_date=null)
	{
		$end_date_time=explode('_',$end_date);
		$end_date=$end_date_time[0]." ".str_replace('-',':',$end_date_time[1]);
		$this->erp->checkPermissions(false,true);
		$this->data['sale_info']=$this->db
				->select("
				sales.id,
				sales.date,
				sales.reference_no,biller,
				sales.customer,
				sales.sale_status,
				erp_sales.grand_total,
				(erp_sales.grand_total-paid) as balance,
				sales.payment_status")
				->from('sales')

				->where('sales.date >=',$start_date)
				->where('sales.date <=',$end_date)

				->get();
		$this->load->view($this->theme .'reports/modal_profit_lost_sale',$this->data);
	}
	
	function view_expense($start_date=null,$end_date=null)
	{
		$end_date_time=explode('_',$end_date);
		$end_date=$end_date_time[0]." ".str_replace('-',':',$end_date_time[1]);
		$this->erp->checkPermissions(false,true);
		$this->data['expense_info']=$this->db
				->select("id,date,reference,amount,note,created_by")
				->from("expenses")
				->where('date>=',$start_date)
				->where("date<=",$end_date)
				->get();
		$this->load->view($this->theme.'reports/modal_view_expense',$this->data);
	}
	
	function view_profit_payment($start_date=null,$end_date=null)
	{
		$end_date_time=explode('_',$end_date);
		$end_date=$end_date_time[0]." ".str_replace('-',':',$end_date_time[1]);
		$this->erp->checkPermissions(false,true);
		
		$this->data['payment_info']=$this->db	
				->select("payments.id as id,payments.date as date1,payments.reference_no as ref_no1,sales.reference_no as sale_ref1,purchases.reference_no as pur_ref1,payments.paid_by as paid_by1,payments.amount as amount1,payments.type as type1")
				->from('payments')
				->join('sales','sales.id=payments.id','left')
				->join('purchases','purchases.id=payments.id','left')
				->where('payments.date >= ',$start_date)
				->where('payments.date <=',$end_date)
				->get();
				
		$this->load->view($this->theme.'reports/modal_view_payment',$this->data);
	}
	
	function view_profit_payments_received($start_date=null,$end_date=null)
	{
		$end_date_time=explode('_',$end_date);
		$end_date=$end_date_time[0]." ".str_replace('-',':',$end_date_time[1]);
		$this->erp->checkPermissions(false,true);
		$this->data['payment_received_info']=$this->db	
				->select("payments.id as id,payments.date as date,payments.reference_no as ref_no,sales.reference_no as sale_ref,purchases.reference_no as pur_ref,payments.paid_by as paid_by,payments.amount as amount,payments.type as type")
				->from('payments')
				->join('sales','sales.id=payments.id','left')
				->join('purchases','purchases.id=payments.id','left')
				->where('payments.date >= ',$start_date)
				->where('payments.date <=',$end_date)
				->where('payments.type=','received')
				->get();
		$this->load->view($this->theme.'reports/modal_view_payment_received',$this->data);
	}
	
	function view_profit_payment_sent($start_date=null,$end_date=null)
	{
		$end_date_time=explode('_',$end_date);
		$end_date=$end_date_time[0]." ".str_replace('-',':',$end_date_time[1]);
		$this->erp->checkPermissions(false,true);
		$this->data['payment_sent_info']=$this->db
				->select("payments.id as id,payments.date as date,payments.reference_no as ref_no,sales.reference_no as sale_ref,purchases.reference_no as pur_ref,payments.paid_by as paid_by,payments.amount as amount,payments.type as type")
				->from('payments')
				->join('sales','sales.id=payments.id','left')
				->join('purchases','purchases.id=payments.id','left')
				->where('payments.date >=',$start_date)
				->where('payments.date <=',$end_date)
				->where('payments.type=','sent')
				->get();
		$this->load->view($this->theme.'reports/modal_view_payment_sent',$this->data);
	}
	
	function view_profit_payment_return($start_date=null,$end_date=null)
	{
		$end_date_time=explode('_',$end_date);
		$end_date=$end_date_time[0]." ".str_replace('-',':',$end_date_time[1]);
		$this->erp->checkPermissions(false,true);
		$this->data['payment_returned_info']=$this->db
				->select("payments.id as id,payments.date as date,payments.reference_no as ref_no,sales.reference_no as sale_ref,purchases.reference_no as pur_ref,payments.paid_by as paid_by,payments.amount as amount,payments.type as type")
				->from("payments")
				->join('sales','sales.id=payments.id','left')
				->join('purchases','purchases.id=payments.id','left')
				->where('payments.date >=',$start_date)
				->where('payments.date <=',$end_date)
				->where('payments.type=','returned')
				->get();
		$this->load->view($this->theme.'reports/modal_view_payment_return',$this->data);
	}
	
	function billReceipt()
    {
        $this->erp->checkPermissions('payments');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('payments_report')));
        $meta = array('page_title' => lang('payments_report'), 'bc' => $bc);
        $this->page_construct('reports/bill_reciept', $meta, $this->data);
    }
	
	function getBillReciept($pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('payments', TRUE);
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('payment_ref')) {
            $payment_ref = $this->input->get('payment_ref');
        } else {
            $payment_ref = NULL;
        }
        if ($this->input->get('sale_ref')) {
            $sale_ref = $this->input->get('sale_ref');
        } else {
            $sale_ref = NULL;
        }
        if ($this->input->get('purchase_ref')) {
            $purchase_ref = $this->input->get('purchase_ref');
        } else {
            $purchase_ref = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fsd($start_date);
            $end_date = $this->erp->fsd($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {

            $this->db
                ->select("" . $this->db->dbprefix('payments') . ".date, 
				" . $this->db->dbprefix('payments') . ".reference_no as payment_ref, 
				" . $this->db->dbprefix('sales') . ".reference_no as sale_ref,customer,paid_by, amount, type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date asc');
				$this->db->where('payments.type != "sent"');
			//	$this->db->where('sales.customer !=""');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('payments.created_by', $user);
				}
			}
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('type'));

                $row = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->type);
                    if ($data_row->type == 'returned' || $data_row->type == 'sent') {
                        $total -= $data_row->amount;
                    } else {
                        $total += $data_row->amount;
                    }
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'payments_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('payments') . ".id,
				" . $this->db->dbprefix('sales') . ".suspend_note AS noted,
				" . $this->db->dbprefix('payments') . ".date AS date,
				" . $this->db->dbprefix('payments') . ".reference_no as payment_ref, 
				" . $this->db->dbprefix('sales') . ".reference_no as sale_ref, customer,paid_by, amount, type", $this->db->dbprefix('payments') . ".id")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
				->order_by('payments.date desc');
				$this->db->where('payments.type != "sent"');
				$this->db->where('sales.customer !=""');
            
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if (isset($user)) {
                    $this->datatables->where('payments.created_by', $user);
                }
            }
            if (isset($customer)) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if (isset($supplier)) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if (isset($biller)) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if (isset($customer)) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if (isset($payment_ref)) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if (isset($sale_ref)) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
			if (isset($customers)){
				$this->datatables->like('sales.customers',$customers,'both');
			}
            if (isset($purchase_ref)) {
                $this->datatables->like('payments.paid_bys', $purchase_ref, 'both');
            }
			if (isset($grand_total)) {
                $this->datatables->like('sales.grand_total', $grand_total, 'both');
            }
            if (isset($start_date)) {
                $this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
           

            echo $this->datatables->generate();

        }

    }
	
	function billPayable()
    {
        $this->erp->checkPermissions('payments');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('Bill Payable Report')));
        $meta = array('page_title' => lang('payments_report'), 'bc' => $bc);
        $this->page_construct('reports/bill_payable', $meta, $this->data);
    }
	
	function getBillPaymentReport($pdf = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('payments', TRUE);
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('payment_ref')) {
            $payment_ref = $this->input->get('payment_ref');
        } else {
            $payment_ref = NULL;
        }
        if ($this->input->get('sale_ref')) {
            $sale_ref = $this->input->get('sale_ref');
        } else {
            $sale_ref = NULL;
        }
        if ($this->input->get('purchase_ref')) {
            $purchase_ref = $this->input->get('purchase_ref');
        } else {
            $purchase_ref = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fsd($start_date);
            $end_date = $this->erp->fsd($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('purchases') . ".date, 
				" . $this->db->dbprefix('purchases') . ".reference_no,
				" . $this->db->dbprefix('purchases') . ".supplier as purchase_ref,
				" . $this->db->dbprefix('payments') . ".paid_by,
				" . $this->db->dbprefix('purchases') . ".paid,
				" . $this->db->dbprefix('purchases') . ".grand_total,
				" . $this->db->dbprefix('purchases') . ".payment_status")
                ->from('purchases')
				->JOIN('payments','purchases.id=payments.purchase_id','left')
                ->group_by('purchases.id');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->db->where('payments.created_by', $user);
				}
			}
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('bill_payable'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('paid_by'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('type'));

                $row = 2;
                $total = 0;
				$paid=0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, lang($data_row->paid_by));
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->type);
					$paid+=$data_row->paid;
					$total+=$data_row->grand_total;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				$this->excel->getActiveSheet()->setCellValue('E'.$row,$paid);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'payments_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('purchases') . ".date, 
				" . $this->db->dbprefix('purchases') . ".reference_no as payment_ref,
				" . $this->db->dbprefix('purchases') . ".supplier as purchase_ref,
				" . $this->db->dbprefix('payments') . ".paid_by,
				" . $this->db->dbprefix('purchases') . ".paid,
				" . $this->db->dbprefix('purchases') . ".grand_total,
				" . $this->db->dbprefix('purchases') . ".payment_status")
                ->from('purchases')
				->JOIN('payments','purchases.id=payments.purchase_id','left')
                ->group_by('purchases.id');
			
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('payments.created_by', $user);
				}
			}
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }

    /**
     * @param null $start_date
     * @param null $end_date
     * @param null $pdf
     * @param null $xls
     * @param null $biller_id
     * @return mixed
     * @throws PHPExcel_Reader_Exception
     * @throws PHPExcel_Writer_Exception
     */
    function income_statement($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $biller_id = NULL)
    {
        $no_search_date = true;
        if ($start_date && $end_date) {
            $no_search_date = false;
        }
        $this->erp->checkPermissions('income_statement', NULL, 'account_report');
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $user = $this->site->getUser();
        if ($biller_id != NULL) {
            $this->data['biller_id_no_sep'] = $biller_id;
            $biller_sep = explode('-', $biller_id);

            $bills = '';
            for ($i = 0; $i < count($biller_sep); $i++) {
                $bills .= $biller_sep[$i] . ',';
            }
            $biller_id = rtrim($bills, ',');
            $this->data['biller_id'] = $biller_id;
        } else {
            if ($user->biller_id) {
                $this->data['biller_id'] = $user->biller_id;
                $biller_id = $user->biller_id;
            } else {
                $this->data['biller_id'] = "";
            }
        }

        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $billers = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $billers = $this->site->getAllCompanies('biller');
            }
        }else{
            $billers = $this->site->getAllCompanies('biller', $biller_id, $xls);
        }

        $this->data['billers'] = $billers;
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
        $totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('income_statement')));
        $meta = array('page_title' => lang('income_statement'), 'bc' => $bc);
        $from_date = date('Y-m-d',strtotime(urldecode($start_date)));//'2014-08-01';
        $to_date = date('Y-m-d', strtotime(urldecode($end_date)));//'2015-09-01';
        $this->data['from_date'] = $from_date;
        $this->data['to_date'] = $to_date;

        $dataIncome = $this->accounts_model->getStatementByBalaneSheetDate('40,70',$from_date,$to_date,$biller_id);

        $dataCost = $this->accounts_model->getStatementByBalaneSheetDate('50',$from_date,$to_date,$biller_id);
        $dataExpense = $this->accounts_model->getStatementByBalaneSheetDate('60,80,90',$from_date,$to_date,$biller_id);
        $IncomeData = $this->accounts_model->getStatementByBalaneSheetDate('40,70',$from_date,$to_date,$biller_id);
        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
        $this->data['dataIncome'] = $dataIncome;
        $this->data['dataCost'] = $dataCost;
        $this->data['dataExpense'] = $dataExpense;

        /*if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/income_statement', $this->data, true);
            $name = lang("income_statement") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_income_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }*/

        if($xls || $pdf){

            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => 'FFFFFF'),
                    'size'  => 12,
                    'name'  => 'Times New Roman'
                )
            );
            $bold = array(
                'font' => array(
                    'bold' => true
                )
            );

            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('Income Statement'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('account_name'));

            $alphabet  = array('B','C','D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            $alphabet1 = array('B1','C1','D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1');

            $num_col=2;
            $tBiller = 0;
            $new_billers = array();
            foreach ($billers as $b1) {
                if($this->uri->segment(7)){
                    $biller_sep = explode('-', $this->uri->segment(7));
                    for($i=0; $i < count($biller_sep); $i++){
                        $this->excel->getActiveSheet()->SetCellValue($alphabet1[$tBiller], $b1->company);
                        $this->excel->getActiveSheet()->getColumnDimension($alphabet[$tBiller])->setWidth(25);
                        $tBiller++;
                        $j = $tBiller;
                        $new_billers[] = array('id' => $b1->id);

                    }
                }else{
                    $new_billers = $billers;
                    $this->excel->getActiveSheet()->SetCellValue($alphabet1[$tBiller], $b1->company);
                    $this->excel->getActiveSheet()->getColumnDimension($alphabet[$tBiller])->setWidth(25);
                    $tBiller++;
                    $j = $tBiller;
                }
                $num_col++;
            }
            $this->excel->getActiveSheet()->SetCellValue($alphabet1[$j], lang('total'));

            // Header Styles
            $this->excel->getActiveSheet()->getStyle('A1:'. $alphabet1[$j])->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(25);
            $this->excel->getActiveSheet()->getColumnDimension($alphabet[$j])->setWidth(15);
            $this->excel->getActiveSheet()->getStyle('A1:'. $alphabet1[$j])->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('B1:'. $alphabet1[$j])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A1:'. $alphabet1[$j])->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => '428bca')
                    )
                )
            );
            //$this->erp->print_arrays($j);
            $this->excel->getActiveSheet()->SetCellValue('A2', lang('income'));
            $this->excel->getActiveSheet()->getRowDimension(2)->setRowHeight(20);
            $this->excel->getActiveSheet()->mergeCells('A2:'.$alphabet[$j].'2');
            $this->excel->getActiveSheet()->getStyle('A2')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A2')->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            $new_row = 2;
            $total_income = 0;
            $totalBeforeAyear_income = 0;
            $total_income_array = array();
            $total_cost_array = array();
            $total_op_array = array();
            $sum_total_income = array();
            $sum_total_cost = array();
            $sum_total_op = array();
            $sum_total_gross = array();
            $from = explode("%",$this->uri->segments["3"])[0];
            $to = explode("%",$this->uri->segments["4"])[0];
            $from_st = !empty($from)? "&start_date=".$this->erp->hrld($from) : "";
            $to_st = !empty($to)? "&end_date=".$this->erp->hrld($to) : "";

            foreach($dataIncome->result() as $row) {
                $j3 = 0;
                $index = 0;
                $total_per_income = 0;
                for ($i = 1; $i <= count($new_billers); $i++) {
                    $bill_id = 0;
                    if ($this->uri->segment(7)) {
                        $bill_id = $new_billers[$index]['id'];
                    } else {
                        $bill_id = $new_billers[$index]->id;
                    }
                    $query = $this->db->query("SELECT
                                SUM(COALESCE(erp_gl_trans.amount, 0)) AS amount
                            FROM
                                erp_gl_trans
                            WHERE
                                 account_code = '" . $row->account_code . "'
								AND erp_gl_trans.biller_id = '" . $bill_id . "'
								AND DATE_FORMAT(erp_gl_trans.tran_date, '%Y-%m-%d') BETWEEN '$from_date' AND '$to_date';");

                    $totalBeforeAyearRows = $query->row();
                    $amount_income = (-1) * $totalBeforeAyearRows->amount;
                    if ($amount_income < 0) {
                        $amount_income = '( ' . $this->erp->formatMoney(abs($totalBeforeAyearRows->amount)) . ' )';
                    } else {
                        $amount_income = $this->erp->formatMoney(abs($totalBeforeAyearRows->amount));
                    }

                    if (($index + 1) == 1) {

                        $new_row++;
                        $this->excel->getActiveSheet()->SetCellValue('A'. $new_row, $row->account_code .' - '.$row->accountname);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$j3].$new_row, $amount_income);
                        $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
                        $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle($alphabet[$j3].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                        $total_income_array[] = array(
                            'id' => $bill_id,
                            'amount' => (-1) * $totalBeforeAyearRows->amount
                        );

                    } else {
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$j3].$new_row, $amount_income);
                        $total_income_array[] = array(
                            'id' => $bill_id,
                            'amount' => (-1) * $totalBeforeAyearRows->amount
                        );
                    }
                    $total_per_income += (-1) * $totalBeforeAyearRows->amount;
                    $this->excel->getActiveSheet()->getStyle($alphabet[$j3].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $j3++;
                    $index++;
                }

                if ($total_per_income < 0) {
                    $total_per_income = '( ' . $this->erp->formatMoney(abs($total_per_income)) . ' )';
                } else {
                    $total_per_income = $this->erp->formatMoney(abs($total_per_income));
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j3].$new_row, $total_per_income);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j3].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j3].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            }

            $col1 = 2;
            $colbot = 0;

            if($this->uri->segment(7)){
                //$col1 = 2;
                $colbot = 3;
            }else{
                $colcount = count($new_billers);
                //$col1 = $colcount-1;
                $colbot = $colcount + 2;
            }

            $inc_amt_arr = array();

            for($c= 0; $c <= count($new_billers); $c++){
                $in_bill_id1 = 0;
                if($this->uri->segment(7)){
                    $in_bill_id1 = $new_billers[$c]['id'];
                }else{
                    $in_bill_id1 = $new_billers[$c]->id;
                }
                $total_inc_amt = 0;
                foreach($total_income_array as $new_arr){
                    if($new_arr['id'] == $in_bill_id1){
                        $total_inc_amt += $new_arr['amount'];
                    }
                }
                $inc_amt_arr[] = array(
                    'id' => $in_bill_id1,
                    'amount' => $total_inc_amt
                );
            }
            // Total Income Styles
            $this->excel->getActiveSheet()->getStyle('A')->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            // $this->excel->getActiveSheet()->getStyle('A:'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A'. $new_row, lang("total_income"));
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);

            $j4 = 0;
            for($i = 0; $i < count($new_billers); $i++){
                $biller_id = 0;
                if($this->uri->segment(7)){
                    $biller_id = $new_billers[$i]['id'];
                }else{
                    $biller_id = $new_billers[$i]->id;
                }

                $total_amt_inc = 0;
                foreach ($total_income_array as $val) {
                    if($biller_id == $val['id']){
                        $total_amt_inc += $val['amount'];
                    }
                }
                $total_income += $total_amt_inc;
                $sum_total_income[] = array(
                    'biller_id' => $bill_id,
                    'amount' => $total_amt_inc
                );
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j4].$new_row, $this->erp->formatMoney(abs($total_amt_inc)));
                $this->excel->getActiveSheet()->getStyle($alphabet[$j4].$new_row)->getFont()
                    ->setSize(12)
                    ->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j4].$new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j4].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j4].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $j4++;
            }
            $total_income_display = '';
            if($total_income < 0){
                $total_income_display = '( '.$this->erp->formatMoney(abs($total_income)).' )';
            }else{
                $total_income_display = $this->erp->formatMoney(abs($total_income));
            }
            $this->excel->getActiveSheet()->SetCellValue($alphabet[$j4].$new_row, $total_income_display);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j4].$new_row)->getFont()
                ->setSize(12)
                ->setBold(true);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j4].$new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j4].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j4].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A'. $new_row, lang("cost_of_goods_sold"));
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->mergeCells('A'. $new_row.':'.$alphabet[$j].$new_row);


            $total_cost = 0;
            $totalBeforeAyear_cost = 0;
            foreach($dataCost->result() as $rowcost){
                $costRow = 0;
                $index1 = 0;
                $total_per_cost = 0;
                for($j = 1; $j <= count($new_billers); $j++){

                    $bill_id = 0;
                    if($this->uri->segment(7)){
                        $bill_id = $new_billers[$index1]['id'];
                    }else{
                        $bill_id = $new_billers[$index1]->id;
                    }

                    $query = $this->db->query("SELECT
										sum(erp_gl_trans.amount) AS amount
									FROM
										erp_gl_trans
									WHERE
										account_code = '" . $rowcost->account_code . "'
										AND erp_gl_trans.biller_id = '" . $bill_id . "'
										AND DATE_FORMAT(erp_gl_trans.tran_date, '%Y-%m-%d') BETWEEN '$from_date' AND '$to_date';");
                    $totalBeforeAyearRows = $query->row();
                    $totalBeforeAyear_cost += $totalBeforeAyearRows->amount;

                    $amount_cost = 0;
                    if($totalBeforeAyearRows->amount < 0){
                        $amount_cost = '( '.$this->erp->formatMoney(abs($totalBeforeAyearRows->amount)).' )';
                    }else{
                        $amount_cost = $this->erp->formatMoney(abs($totalBeforeAyearRows->amount));
                    }

                    if(($index1+1)==1){
                        $new_row++;
                        $total_cost_array[] = array(
                            'id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );
                        $this->excel->getActiveSheet()->SetCellValue('A'. $new_row, $rowcost->account_code .' - '. $rowcost->accountname);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$costRow].$new_row, $amount_cost);
                        $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle($alphabet[$costRow].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
                        $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getFont()
                            ->setName('Times New Roman')
                            ->setSize(11)
                            ->setBold(false);
                    }else{
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$costRow].$new_row, $amount_cost);
                        $total_cost_array[] = array(
                            'id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );
                    }
                    $total_per_cost += $this->erp->formatDecimal($totalBeforeAyearRows->amount);
                    $this->excel->getActiveSheet()->getStyle($alphabet[$costRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $index1++;
                    $costRow++;
                }
                if($total_per_cost < 0){
                    $total_per_cost = '( '.$this->erp->formatMoney(abs($total_per_cost)).' )';
                }else{
                    $total_per_cost = $this->erp->formatMoney(abs($total_per_cost));
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$costRow]. $new_row, $total_per_cost);
                $this->excel->getActiveSheet()->getStyle($alphabet[$costRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            }

            $tCostRow = 0;
            $gMarginRow = 0;

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A'. $new_row, lang("total_cost"));
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);

            for($in = 0; $in < count($new_billers); $in++){

                $in_bill_id = 0;
                if($this->uri->segment(7)){
                    $in_bill_id = $new_billers[$in]['id'];
                }else{
                    $in_bill_id = $new_billers[$in]->id;
                }
                $total_amt_cost = 0;
                foreach ($total_cost_array as $val) {
                    if($in_bill_id == $val['id']){
                        $total_amt_cost += $val['amount'];
                    }
                }
                $total_cost += $total_amt_cost;
                $sum_total_cost[] = array(
                    'biller_id' => $in_bill_id,
                    'amount' => $total_amt_cost
                );

                if($total_amt_cost < 0){
                    $total_amt_cost = '( '.$this->erp->formatMoney(abs($total_amt_cost)).' )';
                }else{
                    $total_amt_cost = $this->erp->formatMoney(abs($total_amt_cost));
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$tCostRow].$new_row, $total_amt_cost);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow].$new_row)->getFont()
                    ->setSize(12)
                    ->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow].$new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $tCostRow++;
            }
            $total_cost_display = '';
            if($total_cost < 0){
                $total_cost_display = '( '.$this->erp->formatMoney(abs($total_cost)).' )';
            }else{
                $total_cost_display = $this->erp->formatMoney(abs($total_cost));
            }
            $this->excel->getActiveSheet()->SetCellValue($alphabet[$tCostRow].$new_row, $total_cost_display);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow].$new_row)->getFont()
                ->setSize(12)
                ->setBold(true);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow].$new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A'. $new_row, lang("gross_margin"));
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);

            for($i =0; $i < count($sum_total_income); $i++){
                $amount_per_gross =0;
                $amount_per_inc = 0;
                $amount_per_cost = 0;
                $amount_per_inc = $sum_total_income[$i]['amount'];
                $amount_per_cost = $sum_total_cost[$i]['amount'];
                $amount_per_gross = $amount_per_inc - $amount_per_cost;
                $sum_total_gross[] = array(
                    'biller_id' => $sum_total_cost[$i]['biller_id'],
                    'amount' => $amount_per_gross
                );
                if($amount_per_gross < 0){
                    $total_amount_per_gross = '('.$this->erp->formatMoney(abs($amount_per_gross)).')';
                }else{
                    $total_amount_per_gross = $this->erp->formatMoney(abs($amount_per_gross));
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow].$new_row, $total_amount_per_gross);
                $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow].$new_row)->getFont()
                    ->setSize(12)
                    ->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $gMarginRow++;
            }
            if(($total_income - $total_cost) < 0){
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow].$new_row, "(".$this->erp->formatMoney(abs($total_income - $total_cost)).")");
            }else{
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow].$new_row, $this->erp->formatMoney(abs($total_income - $total_cost)));
            }
            $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow].$new_row)->getFont()
                ->setSize(12)
                ->setBold(true);
            $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A'. $new_row, lang("operating_expense"));
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->mergeCells('A'. $new_row.':'.$alphabet[$j-1].$new_row);

            $total_expense = 0;
            $totalBeforeAyear_expense = 0;
            foreach($dataExpense->result() as $row){
                $total_expense += $row->amount;
                $in_op = 0;
                $total_per_op = 0;
                $oExpenseRow = 0;
                for($i = 1; $i <= count($new_billers); $i++){
                    $bill_id = 0;
                    if($this->uri->segment(7)){
                        $bill_id = $new_billers[$in_op]['id'];
                    }else{
                        $bill_id = $new_billers[$in_op]->id;
                    }

                    $query = $this->db->query("SELECT
                                                    SUM(COALESCE(erp_gl_trans.amount, 0)) AS amount
                                                FROM
                                                    erp_gl_trans
                                                WHERE
                                                    account_code = '" . $row->account_code . "'
                                                    AND biller_id = '" . $bill_id . "' 
                                                    AND DATE_FORMAT(erp_gl_trans.tran_date, '%Y-%m-%d') BETWEEN '$from_date' AND '$to_date';");
                    $totalBeforeAyearRows = $query->row();
                    $totalBeforeAyear_expense += $totalBeforeAyearRows->amount;
                    $amount_op = 0;
                    if($totalBeforeAyearRows->amount < 0){
                        $amount_op = '( '.$this->erp->formatMoney(abs($totalBeforeAyearRows->amount)).' )';
                    }else{
                        $amount_op = $this->erp->formatMoney(abs($totalBeforeAyearRows->amount));
                    }

                    if($i==1){
                        $new_row++;
                        $total_op_array[] = array(
                            'id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );
                        $this->excel->getActiveSheet()->SetCellValue('A'.$new_row, $row->account_code .' - '. $row->accountname);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$oExpenseRow].$new_row, $amount_op);
                        $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle($alphabet[$oExpenseRow].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
                        $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getFont()
                            ->setName('Times New Roman')
                            ->setSize(11)
                            ->setBold(false);
                    }else{
                        $total_op_array[] = array(
                            'id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$oExpenseRow].$new_row, $amount_op);
                    }
                    $total_per_op += $totalBeforeAyearRows->amount;
                    $this->excel->getActiveSheet()->getStyle($alphabet[$oExpenseRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle($alphabet[$oExpenseRow].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $in_op++;
                    $oExpenseRow++;
                }
                if($total_per_op < 0){
                    $total_per_op = '( '.$this->erp->formatMoney(abs($total_per_op)).' )';
                }else{
                    $total_per_op = $this->erp->formatMoney(abs($total_per_op));
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$oExpenseRow].$new_row, $total_per_op);
                $this->excel->getActiveSheet()->getStyle($alphabet[$oExpenseRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$oExpenseRow].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            }
            $tOperatingExpenseRow = 0;
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A'. $new_row, lang("total_expense"));
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);

            for($i = 0; $i < count($new_billers); $i++){
                $bill_id = 0;
                if($this->uri->segment(7)){
                    $bill_id = $new_billers[$i]['id'];
                }else{
                    $bill_id = $new_billers[$i]->id;
                }
                $total_amt_op = 0;
                foreach ($total_op_array as $val) {
                    if($bill_id == $val['id']){
                        $total_amt_op += $val['amount'];
                    }
                }

                $sum_total_op[] = array(
                    'biller_id' => $bill_id,
                    'amount' => $total_amt_op
                );

                if($total_amt_op < 0){
                    $total_amt_op = '( '.$this->erp->formatMoney(abs($total_amt_op)).' )';
                }else{
                    $total_amt_op = $this->erp->formatMoney(abs($total_amt_op));
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$tOperatingExpenseRow].$new_row, $total_amt_op);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow].$new_row)->getFont()
                    ->setSize(12)
                    ->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow].$new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $tOperatingExpenseRow++;
            }
            $total_expense_display = '';
            if($total_expense < 0){
                $total_expense_display = '( '.$this->erp->formatMoney(abs($total_expense)).' )';
            }else{
                $total_expense_display = $this->erp->formatMoney(abs($total_expense));
            }
            $this->excel->getActiveSheet()->SetCellValue($alphabet[$tOperatingExpenseRow].$new_row, $total_expense_display);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow].$new_row)->getFont()
                ->setSize(12)
                ->setBold(true);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow].$new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $profit_row = 0;
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A'. $new_row, lang("profits"));
            $this->excel->getActiveSheet()->getStyle('A'. $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);

            for($i = 0; $i < count($sum_total_gross); $i++){
                $per_gross = 0;
                $per_exp = 0;
                $per_gross = $sum_total_gross[$i]['amount'];
                $per_exp = $sum_total_op[$i]['amount'];
                $total_per_op_ex = ($per_gross - $per_exp);
                if($total_per_op_ex < 0){
                    $total_per_op_ex = '( '.$this->erp->formatMoney(abs($total_per_op_ex)).' )';
                }else{
                    $total_per_op_ex = $this->erp->formatMoney(abs($total_per_op_ex));
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$profit_row].$new_row, $total_per_op_ex);
                $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row].$new_row)->getFont()
                    ->setSize(12)
                    ->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $profit_row++;
            }

            $total_profit_per = ($total_income - $total_cost)-$total_expense;
            $total_profit_loss_display = '';
            if($total_profit_per < 0){
                $total_profit_loss_display = '( '.$this->erp->formatMoney(abs($total_profit_per)).' )';
            }else{
                $total_profit_loss_display = $this->erp->formatMoney(abs($total_profit_per));
            }
            $this->excel->getActiveSheet()->SetCellValue($alphabet[$profit_row].$new_row, $total_profit_loss_display);
            $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row].$new_row)->getFont()
                ->setSize(12)
                ->setBold(true);
            $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row].$new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row].$new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $filename = 'Income_Statement' . date('Y_m_d_H_i_s');

            if ($pdf) {
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                return $objWriter->save('php://output');
            }

            if ($xls) {

                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                //Margins:
                $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }
            redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->page_construct('reports/income_statement', $meta, $this->data);
    }
	function income_statement_by_customer($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $customer_id = NULL)
    {
		$no_search_date = true;
		if($start_date && $end_date){
			$no_search_date = false;
		}
        $this->erp->checkPermissions('income_statement_by_customer',NULL,'account_report');
		if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
		$user = $this->site->getUser();
		if($customer_id != NULL){			
			$customer_sep = explode('-', $customer_id);
			
			$customers = '';
			for($i=0; $i < count($customer_sep); $i++){
				$customers .= $customer_sep[$i] . ',';
			}
			$customer_id =  rtrim($customers, ',');
			$this->data['customer_id'] = $customer_id;
		}else{
			$this->data['customer_id'] = "";
		}
		
		$this->data['customers'] = $this->site->getAllCompanies('customer');
		
		
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
        $totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('income_statement_by_customer')));
        $meta = array('page_title' => lang('income_statement_by_customer'), 'bc' => $bc);
		$from_date = date('Y-m-d',strtotime(urldecode($start_date)));//'2014-08-01';
		$to_date = date('Y-m-d',strtotime(urldecode($end_date. ' +1 day')));//'2015-09-01';
		$this->data['from_date'] = $from_date;
		$this->data['to_date'] = $to_date;
		
		$dataIncome = $this->accounts_model->getStatementByBalaneSheetDateByCustomer('40,70',$from_date,$to_date,$customer_id);
	
		$dataCost = $this->accounts_model->getStatementByBalaneSheetDateByCustomer('50',$from_date,$to_date,$customer_id);
		$dataExpense = $this->accounts_model->getStatementByBalaneSheetDateByCustomer('60,80,90',$from_date,$to_date,$customer_id);
		$IncomeData = $this->accounts_model->getStatementByBalaneSheetDateByCustomer('40,70',$from_date,$to_date,$customer_id);
        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
		$this->data['dataIncome'] = $dataIncome;		
		$this->data['dataCost'] = $dataCost;
		$this->data['dataExpense'] = $dataExpense;
		
		if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/income_statement_by_customer', $this->data, true);
            $name = lang("income_statement_by_customer") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_income_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
		
		if($xls){
			$styleArray = array(
				'font'  => array(
					'bold'  => true,
					'color' => array('rgb' => '000000'),
					'size'  => 10,
					'name'  => 'Verdana'
				)
			);
			$bold = array(
				'font' => array(
					'bold' => true
				)
			);
			$header_title = array(
				'font'  => array(
					'bold'  => true,
					'size'  => 12,
					'name'  => 'Verdana'
				)
			);
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->setTitle(lang('Income Statement'));
			$this->excel->getActiveSheet()->setTitle(lang('Balance Sheet'));
			$this->excel->getActiveSheet()->SetCellValue('B1', lang('income_statement'));
			$this->excel->getActiveSheet()->getStyle('B1')->applyFromArray($header_title);
			$this->excel->getActiveSheet()->getStyle('B1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->SetCellValue('A3', lang('account_name'));							
			$this->excel->getActiveSheet()->SetCellValue('B3', lang('amount'));
			$this->excel->getActiveSheet()->SetCellValue('C3', lang('total'));			
			$this->excel->getActiveSheet()->getStyle('A4:B4')->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A4:B4')->setCellValue('A4' , lang('income'));
			$this->excel->getActiveSheet()->mergeCells('C4:D4');
			$total_income = 0;
			$totalBeforeAyear_income = 0;
			$income = 5;
			foreach($dataIncome->result() as $row){
				$total_income += $row->amount;

				$query = $this->db->query("SELECT
					sum(erp_gl_trans.amount) AS amount
				FROM
					erp_gl_trans
				WHERE
					DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $row->account_code . "';");
				$totalBeforeAyearRows = $query->row();
				$totalBeforeAyear_income += $totalBeforeAyearRows->amount;
				$this->excel->getActiveSheet()->SetCellValue('A' . $income, $row->account_code.' - '.$row->accountname);
				$this->excel->getActiveSheet()->SetCellValue('B' . $income, number_format(abs($row->amount),2));
				$this->excel->getActiveSheet()->SetCellValue('C' . $income, '');
				$income++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A3:A'.($income-1))->getAlignment()->setIndent(2);	
			$this->excel->getActiveSheet()->mergeCells('A'.$income.':B'.$income)->setCellValue('A'.$income , lang('total_income'));
			$this->excel->getActiveSheet()->SetCellValue('C' . $income, number_format((-1)*($total_income),2));
			$this->excel->getActiveSheet()->getStyle('A'.($income + 1).':B'.($income +1))->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.($income + 1).':B'.($income +1))->setCellValue('A'. ($income + 1) , lang('cost'));
			$total_cost = 0;
			$totalBeforeAyear_cost = 0;
			$cost = $income + 2;
			foreach($dataCost->result() as $rowcost){
				$total_cost += $rowcost->amount;

				$query = $this->db->query("SELECT
					sum(erp_gl_trans.amount) AS amount
				FROM
					erp_gl_trans
				WHERE
					DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $rowcost->account_code . "';");
				$totalBeforeAyearRows = $query->row();
				$totalBeforeAyear_cost += $totalBeforeAyearRows->amount;
				$this->excel->getActiveSheet()->SetCellValue('A' . $cost, $rowcost->account_code.' - '.$rowcost->accountname);
				$this->excel->getActiveSheet()->SetCellValue('B' . $cost, number_format(abs($rowcost->amount),2));
				$this->excel->getActiveSheet()->SetCellValue('C' . $cost, '');
				$cost++;
			}

			$this->excel->getActiveSheet()->getStyle('A'.($income+2).':A'.($cost-1))->getAlignment()->setIndent(2);	
			$this->excel->getActiveSheet()->mergeCells('A'.$cost.':B'.$cost)->setCellValue('A'.$cost , lang('total_cost'));
			$this->excel->getActiveSheet()->SetCellValue('C' . $cost, number_format((-1)*$total_cost,2));
			
			$this->excel->getActiveSheet()->getStyle('C'.($cost + 1).':D'.($cost + 1))->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.($cost + 1).':B'.($cost + 1))->setCellValue('A'.($cost + 1) , lang('gross_margin'));
			$this->excel->getActiveSheet()->SetCellValue('C' . ($cost +1), number_format((-1)*($total_cost+$total_income),2));
			
			$this->excel->getActiveSheet()->getStyle('A'.($cost + 2).':B'.($cost + 2))->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.($cost + 2).':B'.($cost + 2))->setCellValue('A'. ($cost + 2) , lang('operating_expense'));
			
			$total_expense = 0;
			$totalBeforeAyear_expense = 0;
			$expene = $cost + 3;
			foreach($dataExpense->result() as $row){
				$total_expense += $row->amount;

				$query = $this->db->query("SELECT
					sum(erp_gl_trans.amount) AS amount
				FROM
					erp_gl_trans
				WHERE
					DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $row->account_code . "';");
				$totalBeforeAyearRows = $query->row();
				$totalBeforeAyear_expense += $totalBeforeAyearRows->amount;
				$this->excel->getActiveSheet()->SetCellValue('A' . $expene, $row->account_code.' - '.$row->accountname);
				$this->excel->getActiveSheet()->SetCellValue('B' . $expene, number_format(abs($row->amount),2));
				$this->excel->getActiveSheet()->SetCellValue('C' . $expene, '');
			}
			$this->excel->getActiveSheet()->mergeCells('A'.$expene.':B'.$expene)->setCellValue('A'.$expene , lang('total_expense'));
			$this->excel->getActiveSheet()->SetCellValue('C' . $expene, number_format((-1)*$total_expense,2));
			$this->excel->getActiveSheet()->getStyle('A'.($expene + 1).':C'.($expene + 1))->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.($expene + 1).':B'.($expene + 1))->setCellValue('A'. ($expene + 1) , lang('profits'));
			$this->excel->getActiveSheet()->SetCellValue('C' . ($expene + 1), number_format((-1)*$total_income-($total_cost+$total_expense),2));
			$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
			$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
			$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
			$filename = 'income_statement_by_customer' . date('Y_m_d_H_i_s');
			if ($xls) {
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
				header('Cache-Control: max-age=0');

				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				return $objWriter->save('php://output');
			}

			redirect($_SERVER["HTTP_REFERER"]);	
		}
		
        $this->page_construct('reports/income_statement_by_customer', $meta, $this->data);
	}
	
	function income_statement_detail($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $biller_id = NULL)
    {
        $this->erp->checkPermissions('income_statement_detail',NULL,'account_report');

		$no_search_date = true;
		if($start_date && $end_date){
			$no_search_date = false;
		}
		
		if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
		$user = $this->site->getUser();
        if ($biller_id != NULL) {
            $this->data['biller_id_no_sep'] = $biller_id;
            $biller_sep = explode('-', $biller_id);

            $bills = '';
            for ($i = 0; $i < count($biller_sep); $i++) {
                $bills .= $biller_sep[$i] . ',';
            }
            $biller_id = rtrim($bills, ',');
            $this->data['biller_id'] = $biller_id;
        } else {
            if ($user->biller_id) {
                $this->data['biller_id'] = $user->biller_id;
                $biller_id = $user->biller_id;
            } else {
                $this->data['biller_id'] = "";
            }
        }
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
                $billers = $this->site->getCompanyByArray($user->biller_id);
				$this->data['billers'] = $this->site->getCompanyByArray(json_decode($user->biller_id));
			}else{
                $billers = $this->site->getAllCompanies('biller');
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
            $billers = $this->site->getAllCompanies('biller', $biller_id, $xls);
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}

        $this->data['billers'] = $billers;
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
		
        $totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;
		
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
      
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('income_statement_detail')));
        $meta = array('page_title' => lang('income_statement_detail'), 'bc' => $bc);
		
		$from_date = date('Y-m-d H:m',strtotime(urldecode($start_date)));//'2014-08-01';
		$to_date = date('Y-m-d H:m',strtotime(urldecode($end_date. ' +1 day')));//'2015-09-01';
		
		$this->data['from_date'] = $from_date;
		$this->data['to_date'] = $to_date;
		
		$acc_setting = $this->site->get_Acc_setting();
		$this->data['acc_setting'] = $acc_setting;

		$dataIncome = $this->accounts_model->getStatementByDate('40,70',$from_date,$to_date,json_decode($biller_id));
		$IncomeData = $this->accounts_model->getStatementByDate('40,70',$from_date,$to_date,json_decode($biller_id));
		$dataCost = $this->accounts_model->getStatementByDate('50',$from_date,$to_date,json_decode($biller_id));
		
		$income_couple = $this->accounts_model->getStatementDetailByAccCode($acc_setting->default_receivable, '40,70,10',$from_date,$to_date,json_decode($biller_id));
		
		$cost_couple = $this->accounts_model->getStatementDetailByAccCode($acc_setting->default_stock, '50',$from_date,$to_date,json_decode($biller_id));
		$dataExpense = $this->accounts_model->getStatementByDate('60,80,90',$from_date,$to_date,json_decode($biller_id));

		$this->data['from_date'] = $from_date;
		$this->data['to_date'] = $to_date;
        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
		
		
		$this->data['dataIncome'] = $dataIncome;
		$this->data['idetails'] = $income_couple->result();
		
		$this->data['dataCost'] = $dataCost;
		$this->data['cdetail'] = $cost_couple->result();
		//$this->erp->print_arrays($cost_couple->resutt());
		
		$this->data['dataExpense'] = $dataExpense;
		
		if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/income_statement', $this->data, true);
            $name = lang("income_statement") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_income_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
		
		if($xls){
			$styleArray = array(
				'font'  => array(
					'bold'  => true,
					'color' => array('rgb' => '000000'),
                    'size' => 11,
					'name'  => 'Verdana'
				)
			);
			$bold = array(
				'font' => array(
					'bold' => true
				)
			);
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->setTitle(lang('Income Statement Detail'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('type'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
            $this->excel->getActiveSheet()->SetCellValue('C1', lang('invoice_reference'));
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('name'));
            $this->excel->getActiveSheet()->SetCellValue('E1', lang('description'));

            $alphabet0 = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            $alphabet = array('F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            $alphabet1 = array('F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1');

            $num_col = 6;
            $tBiller = 0;
            $new_billers = array();
            foreach ($billers as $b1) {
                if ($this->uri->segment(7)) {
                    $biller_sep = explode('-', $this->uri->segment(7));
                    for ($i = 0; $i < count($biller_sep); $i++) {
                        if ($biller_sep[$i] == $b1->id) {
                            $this->excel->getActiveSheet()->SetCellValue($alphabet1[$tBiller], $b1->company);
                            $this->excel->getActiveSheet()->getColumnDimension($alphabet[$tBiller])->setWidth(20);
                            $new_billers[] = array('id' => $b1->id);
                        }
                        $tBiller++;
                        $j = $tBiller;
                    }
                } else {
                    $new_billers = $billers;
                    $this->excel->getActiveSheet()->SetCellValue($alphabet1[$tBiller], $b1->company);
                    $this->excel->getActiveSheet()->getColumnDimension($alphabet[$tBiller])->setWidth(20);
                    $tBiller++;
                    $j = $tBiller;
                }
                $num_col++;
            }

            if ($this->uri->segment(7)) {
                $count_bill = count($new_billers);
                $col1 = $count_bill + 5;
            } else {
                $count_bill = count($new_billers);
                $col1 = 6;
            }

            $this->excel->getActiveSheet()->SetCellValue($alphabet1[$j], lang('total'));

            // Header Styles
            $this->excel->getActiveSheet()->getStyle('A1:' . $alphabet1[$j])->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(25);
            $this->excel->getActiveSheet()->getColumnDimension($alphabet[$j])->setWidth(20);
            $this->excel->getActiveSheet()->getStyle('A1:' . $alphabet1[$j])->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A1:' . $alphabet1[$j])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A1:' . $alphabet1[$j])->applyFromArray(
                array(
                    'font' => array(
                        'bold' => true,
                        'color' => array('rgb' => 'FFFFFF'),
                        'size' => 11,
                        'name' => 'Times New Roman'
                    ),
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => '428BCA')
                    )
                )
            );

            $this->excel->getActiveSheet()->SetCellValue('A2', lang('income'));
            $this->excel->getActiveSheet()->getRowDimension(2)->setRowHeight(20);
            $this->excel->getActiveSheet()->mergeCells('A2:' . $alphabet[$j] . '2');
            $this->excel->getActiveSheet()->getStyle('A2')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A2')->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            // INCOME
            $new_row = 3;
            $total_income_array = array();
            $total_cost_array = array();
            $total_op_array = array();

            $sum_total_income = array();
            $sum_total_cost = array();
            $sum_total_op = array();
            $sum_total_gross = array();

            $sum_income_per_acc = array();
            $sum_cost_per_acc = array();
            $sum_op_per_acc = array();

            $total_income = 0;
            $totalBeforeAyear_income = 0;
            foreach ($dataIncome->result() as $row) {
                $total_income += $row->amount;

                $query = $this->db->query("SELECT
                sum(erp_gl_trans.amount) AS amount
            FROM
                erp_gl_trans
            WHERE
                account_code = '" . $row->account_code . "'
                AND erp_gl_trans.tran_date BETWEEN '$from_date' AND '$to_date' ;");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_income += $totalBeforeAyearRows->amount;

                $itotal_amount = 0;
                $incDetails = $this->accounts_model->getBalanceSheetDetailByAccCode($row->account_code, '40,70,10', $from_date, $to_date, json_decode($biller_id));

                if ($incDetails->num_rows() > 0) {

                    $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, $row->account_code . ' - ' . $row->accountname);
                    $this->excel->getActiveSheet()->mergeCells('A' . $new_row . ':' . $alphabet[$j] . $new_row);

                    foreach ($incDetails->result() as $ide) {
                        $j3 = 0;
                        $total_income_array[] = array(
                            'biller_id' => $ide->biller_id,
                            'amount' => (-1) * $ide->amount
                        );

                        $itotal_amount += (-1) * $ide->amount;
                        $new_row++;


                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j3] . $new_row, $ide->tran_type);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j3 + 1] . $new_row, $ide->tran_date);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j3 + 2] . $new_row, $ide->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j3 + 3] . $new_row, $ide->customer);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j3 + 4] . $new_row, $this->erp->decode_html(strip_tags($ide->note)));
                        $this->excel->getActiveSheet()->getColumnDimension($alphabet0[$j3])->setWidth(30);
                        $this->excel->getActiveSheet()->getColumnDimension($alphabet0[$j3 + 1])->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension($alphabet0[$j3 + 2])->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension($alphabet0[$j3 + 3])->setWidth(20);
                        $this->excel->getActiveSheet()->getColumnDimension($alphabet0[$j3 + 4])->setWidth(20);
                        $this->excel->getActiveSheet()->getStyle($alphabet0[$j3] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                        foreach ($new_billers as $biG) {
                            $biG_biller = 0;
                            if ($this->uri->segment(7)) {
                                $biG_biller = $biG['id'];
                            } else {
                                $biG_biller = $biG->id;
                            }

                            if ($biG_biller == $ide->biller_id) {
                                $sum_income_per_acc[] = array(
                                    'biller_id' => $ide->biller_id,
                                    'amount' => (-1) * ($ide->amount)
                                );
                                $ide_display = (-1) * ($ide->amount);
                                if ($ide_display < 0) {
                                    $ide_display = '( ' . $this->erp->formatMoney(abs($ide->amount)) . ' )';
                                } else {
                                    $ide_display = $this->erp->formatMoney(abs($ide->amount));
                                }
                                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j3] . $new_row, $ide_display);
                            } else {
                                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j3] . $new_row, $this->erp->formatMoney(0));
                            }

                            $this->excel->getActiveSheet()->getStyle($alphabet[$j3] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                            $j3++;
                        }

                        $ide_display1 = (-1) * ($ide->amount);
                        if ($ide_display1 < 0) {
                            $ide_display1 = '( ' . $this->erp->formatMoney(abs($ide->amount)) . ' )';
                        } else {
                            $ide_display1 = $this->erp->formatMoney(abs($ide->amount));
                        }

                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$j3] . $new_row, $ide_display1);
                        $this->excel->getActiveSheet()->getStyle($alphabet[$j3] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    }
                } else {
                    $itotal_amount = $row->amount;
                }

                $new_row++;
                $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total"));
                $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
                $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);

                $j4 = 0;
                foreach ($new_billers as $bi2) {
                    $bill_id = 0;
                    if ($this->uri->segment(7)) {
                        $bill_id = $bi2['id'];
                    } else {
                        $bill_id = $bi2->id;
                    }

                    $s_total = 0;
                    foreach ($sum_income_per_acc as $sac) {
                        if ($bill_id == $sac['biller_id']) {
                            $s_total += $sac['amount'];
                        }
                    }
                    if ($s_total < 0) {
                        $s_total = '( ' . $this->erp->formatMoney(abs($s_total)) . ' )';
                    } else {
                        $s_total = $this->erp->formatMoney(abs($s_total));
                    }
                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$j4] . $new_row, $s_total);

                    $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getFont()
                        ->setName('Times New Roman')
                        ->setSize(11)
                        ->setBold(true);

                    $j4++;
                }

                $sum_income_per_acc = array();
                $itotal_display = $itotal_amount;
                if ($itotal_display < 0) {
                    $itotal_display = '( ' . $this->erp->formatMoney(abs($itotal_amount)) . ' )';
                } else {
                    $itotal_display = $this->erp->formatMoney(abs($itotal_amount));
                }

                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j4] . $new_row, $itotal_display);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);
            }

            // TOTAL INCOME
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total_income"));
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            $j5 = 0;
            for ($i = 0; $i < count($new_billers); $i++) {
                $bill_id = 0;
                if ($this->uri->segment(7)) {
                    $bill_id = $new_billers[$i]['id'];
                } else {
                    $bill_id = $new_billers[$i]->id;
                }
                $total_amt_inc = 0;
                foreach ($total_income_array as $val) {
                    if ($bill_id == $val['biller_id']) {
                        $total_amt_inc += $val['amount'];
                    }
                }
                $sum_total_income[] = array(
                    'biller_id' => $bill_id,
                    'amount' => $total_amt_inc
                );
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j5] . $new_row, $this->erp->formatMoney(abs($total_amt_inc)));

                $this->excel->getActiveSheet()->getStyle($alphabet[$j5] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j5] . $new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j5] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);

                $j5++;
            }

            $this->excel->getActiveSheet()->SetCellValue($alphabet[$j5] . $new_row, $this->erp->formatMoney((-1) * $total_income));

            $this->excel->getActiveSheet()->getStyle($alphabet[$j5] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j5] . $new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j5] . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);
            // END TOTAL INCOME

            // COST
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("cost"));
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->mergeCells('A' . $new_row . ':' . $alphabet[$j] . $new_row);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            $total_cost = 0;
            $totalBeforeAyear_cost = 0;
            foreach ($dataCost->result() as $rowcost) {
                $total_cost += $rowcost->amount;

                $query = $this->db->query("SELECT
                    sum(erp_gl_trans.amount) AS amount
                FROM
                    erp_gl_trans
                WHERE
                    account_code = '" . $rowcost->account_code . "'
                    AND erp_gl_trans.tran_date BETWEEN '$from_date' AND '$to_date' ;");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_cost += $totalBeforeAyearRows->amount;

                $new_row++;
                $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, $rowcost->account_code . '-' . $rowcost->accountname);


                $ctotal_amount = 0;
                $cost_couple = $this->accounts_model->getBalanceSheetDetailPurByAccCode($rowcost->account_code, '50', $from_date, $to_date, json_decode($biller_id));

                foreach ($cost_couple->result() as $cde) {
                    $j6 = 0;
                    $ctotal_amount += ($cde->amount);

                    $new_row++;
                    $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j6] . $new_row, $cde->tran_type);
                    $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j6 + 1] . $new_row, $cde->tran_date);
                    $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j6 + 2] . $new_row, $cde->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j6 + 3] . $new_row, $cde->customer);
                    $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j6 + 4] . $new_row, $cde->note);
                    $this->excel->getActiveSheet()->getStyle($alphabet0[$j6] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);


                    $cost_display = $cde->amount;
                    if ($cost_display < 0) {
                        $cost_display = '( ' . $this->erp->formatMoney(abs($cde->amount)) . ' )';
                    } else {
                        $cost_display = $this->erp->formatMoney(abs($cde->amount));
                    }


                    foreach ($new_billers as $bi2) {
                        if ($this->uri->segment(7)) {
                            $sum_cost_per_acc[] = array(
                                'biller_id' => $cde->biller_id,
                                'amount' => $cde->amount
                            );
                            $total_cost_array[] = array(
                                'biller_id' => $cde->biller_id,
                                'amount' => $cde->amount
                            );
                            $this->excel->getActiveSheet()->SetCellValue($alphabet[$j6] . $new_row, $cost_display);
                        } else {

                            if ($bi2->id == $cde->biller_id) {
                                $sum_cost_per_acc[] = array(
                                    'biller_id' => $cde->biller_id,
                                    'amount' => $cde->amount
                                );

                                $total_cost_array[] = array(
                                    'biller_id' => $cde->biller_id,
                                    'amount' => $cde->amount
                                );

                                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j6] . $new_row, $cost_display);

                            } else {
                                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j6] . $new_row, $this->erp->formatMoney(0));
                            }
                        }

                        $this->excel->getActiveSheet()->getStyle($alphabet[$j6] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                        $j6++;
                    }

                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$j6] . $new_row, $cost_display);
                    $this->excel->getActiveSheet()->getStyle($alphabet[$j6] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                }

                $t_cost_display = $ctotal_amount;

                if ($t_cost_display < 0) {
                    $t_cost_display = '( ' . $this->erp->formatMoney(abs($ctotal_amount)) . ' )';
                } else {
                    $t_cost_display = $this->erp->formatMoney(abs($ctotal_amount));
                }
                // END COST

                // TOTAL
                $new_row++;
                $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total"));
                $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
                $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);

                $j7 = 0;
                foreach ($new_billers as $bi2) {
                    $bill_id = 0;
                    if ($this->uri->segment(7)) {
                        $bill_id = $bi2['id'];
                    } else {
                        $bill_id = $bi2->id;
                    }

                    $s_total = 0;
                    foreach ($sum_cost_per_acc as $sac) {
                        if ($bill_id == $sac['biller_id']) {
                            $s_total += $sac['amount'];
                        }
                    }
                    if ($s_total < 0) {
                        $s_total = '( ' . $this->erp->formatMoney(abs($s_total)) . ' )';
                    } else {
                        $s_total = $this->erp->formatMoney(abs($s_total));
                    }

                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$j7] . $new_row, $s_total);
                    $this->excel->getActiveSheet()->getStyle($alphabet[$j7] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle($alphabet[$j7] . $new_row)->getFont()
                        ->setName('Times New Roman')
                        ->setSize(11)
                        ->setBold(true);
                    $j7++;
                }
                $sum_cost_per_acc = array();

                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j7] . $new_row, $t_cost_display);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j7] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j7] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);

            }
            // END TOTAL

            // TOTAL COST
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total_cost"));
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            $j8 = 0;
            for ($in = 0; $in < count($new_billers); $in++) {
                $in_bill_id = 0;
                if ($this->uri->segment(7)) {
                    $in_bill_id = $new_billers[$in]['id'];
                } else {
                    $in_bill_id = $new_billers[$in]->id;
                }
                $total_amt_cost = 0;
                foreach ($total_cost_array as $val) {
                    if ($in_bill_id == $val['biller_id']) {
                        $total_amt_cost += $val['amount'];
                    }
                }

                $sum_total_cost[] = array(
                    'biller_id' => $in_bill_id,
                    'amount' => $total_amt_cost
                );

                if ($total_amt_cost < 0) {
                    $total_amt_cost = '( ' . $this->erp->formatMoney(abs($total_amt_cost)) . ' )';
                } else {
                    $total_amt_cost = $this->erp->formatMoney(abs($total_amt_cost));
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j8] . $new_row, $total_amt_cost);

                $this->excel->getActiveSheet()->getStyle($alphabet[$j8] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j8] . $new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j8] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);

                $j8++;
            }
            $total_cost_display = '';
            if ($total_cost < 0) {
                $total_cost_display = '( ' . $this->erp->formatMoney(abs($total_cost)) . ' )';
            } else {
                $total_cost_display = $this->erp->formatMoney(abs($total_cost));
            }

            $this->excel->getActiveSheet()->SetCellValue($alphabet[$j8] . $new_row, $total_cost_display);

            $this->excel->getActiveSheet()->getStyle($alphabet[$j8] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j8] . $new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j8] . $new_row)->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j8] . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);
            // END TOTAL COST

            // GROSS PROFIT/LOSS
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("gross_margin"));
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            $j9 = 0;
            for ($i = 0; $i < count($sum_total_income); $i++) {
                $amount_per_gross = 0;
                $amount_per_inc = 0;
                $amount_per_cost = 0;

                $amount_per_inc = $sum_total_income[$i]['amount'];
                $amount_per_cost = $sum_total_cost[$i]['amount'];

                $amount_per_gross = $amount_per_inc - $amount_per_cost;

                $sum_total_gross[] = array(
                    'biller_id' => $sum_total_cost[$i]['biller_id'],
                    'amount' => $amount_per_gross
                );
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j9] . $new_row, $this->erp->formatMoney($amount_per_gross));

                $this->excel->getActiveSheet()->getStyle($alphabet[$j9] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j9] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);
                $j9++;
            }

            if ((-1) * $total_income - $total_cost < 0) {
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j9] . $new_row, "(" . $this->erp->formatMoney(abs((-1) * $total_income - $total_cost)) . ")");
            } else {
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j9] . $new_row, $this->erp->formatMoney(abs((-1) * $total_income - $total_cost)));
            }

            $this->excel->getActiveSheet()->getStyle($alphabet[$j9] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j9] . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            // END GROSS PROFIT/LOSS

            // OPERATING EXPENSE
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("operating_expense"));
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->mergeCells('A' . $new_row . ':' . $alphabet[$j] . $new_row);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            $total_expense = 0;
            $totalBeforeAyear_expense = 0;
            foreach ($dataExpense->result() as $row) {
                $total_expense += $row->amount;

                $query = $this->db->query("SELECT
                    SUM(erp_gl_trans.amount) AS amount
                FROM
                    erp_gl_trans
                WHERE
                    account_code = '" . $row->account_code . "'
                    AND erp_gl_trans.tran_date BETWEEN '$from_date' AND '$to_date' ;");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_expense += $totalBeforeAyearRows->amount;
                $total_op_per = 0;

                $new_row++;
                $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, $row->account_code . ' - ' . $row->accountname);

                $ex_details = $this->accounts_model->getBalanceSheetDetailByAccCode($row->account_code, '60,80,90', $from_date, $to_date, json_decode($biller_id));
                if ($ex_details->num_rows() > 0) {
                    foreach ($ex_details->result() as $ex) {
                        $j10 = 0;
                        $total_op_per += $ex->amount;
                        $ex_amount = 0;
                        $ex_amount = $ex->amount;
                        if ($ex_amount < 0) {
                            $ex_amount = '( ' . $this->erp->formatMoney(abs($ex->amount)) . ' )';
                        } else {
                            $ex_amount = $this->erp->formatMoney(abs($ex->amount));
                        }
                        $new_row++;
                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j10] . $new_row, $ex->tran_type);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j10 + 1] . $new_row, $this->erp->hrld($ex->tran_date));
                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j10 + 2] . $new_row, $ex->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j10 + 3] . $new_row, $ex->customer);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet0[$j10 + 4] . $new_row, $this->erp->decode_html(strip_tags($ex->note)));
                        $this->excel->getActiveSheet()->getStyle($alphabet0[$j10] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                        foreach ($billers as $bi2) {
                            if ($this->uri->segment(7)) {
                                if ($bi2->id == $this->uri->segment(7)) {
                                    $total_op_array[] = array(
                                        'biller_id' => $ex->biller_id,
                                        'amount' => $ex->amount
                                    );

                                    $sum_op_per_acc[] = array(
                                        'biller_id' => $ex->biller_id,
                                        'amount' => $ex->amount
                                    );

                                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$j10] . $new_row, $ex_amount);
                                }
                            } else {

                                if ($bi2->id == $ex->biller_id) {
                                    $sum_op_per_acc[] = array(
                                        'biller_id' => $ex->biller_id,
                                        'amount' => $ex->amount
                                    );

                                    $total_op_array[] = array(
                                        'biller_id' => $ex->biller_id,
                                        'amount' => $ex->amount
                                    );

                                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$j10] . $new_row, $ex_amount);

                                } else {
                                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$j10] . $new_row, $this->erp->formatMoney(0));
                                }
                            }

                            $this->excel->getActiveSheet()->getStyle($alphabet[$j10] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $j10++;
                        }

                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$j10] . $new_row, $ex_amount);
                        $this->excel->getActiveSheet()->getStyle($alphabet[$j10] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle($alphabet[$j10] . $new_row)->getFont()
                            ->setName('Times New Roman')
                            ->setSize(11)
                            ->setBold(true);

                    }
                } else {
                    $total_op_per = $row->amount;

                }
                if ($total_op_per < 0) {
                    $total_op_per = '( ' . $this->erp->formatMoney(abs($total_op_per)) . ' )';
                } else {
                    $total_op_per = $this->erp->formatMoney(abs($total_op_per));
                }

                // END OPERATING EXPENSE

                $new_row++;
                $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total"));
                $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
                $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);

                $j11 = 0;
                foreach ($new_billers as $bi2) {
                    $bill_id = 0;
                    if ($this->uri->segment(7)) {
                        $bill_id = $bi2['id'];
                    } else {
                        $bill_id = $bi2->id;
                    }

                    $s_total1 = 0;
                    foreach ($sum_op_per_acc as $sac) {
                        if ($bill_id == $sac['biller_id']) {
                            $s_total1 += $sac['amount'];
                        }
                    }
                    if ($s_total1 < 0) {
                        $s_total1 = '( ' . $this->erp->formatMoney(abs($s_total1)) . ' )';
                    } else {
                        $s_total1 = $this->erp->formatMoney(abs($s_total1));
                    }

                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$j11] . $new_row, $s_total1);

                    $this->excel->getActiveSheet()->getStyle($alphabet[$j11] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle($alphabet[$j11] . $new_row)->getFont()
                        ->setName('Times New Roman')
                        ->setSize(11)
                        ->setBold(true);
                    $j11++;
                }
                $sum_op_per_acc = array();

                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j11] . $new_row, $total_op_per);

                $this->excel->getActiveSheet()->getStyle($alphabet[$j11] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j11] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);

            }

            // TOTAL OPERATING EXPENSE
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total_expense"));
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            $j12 = 0;
            for ($i = 0; $i < count($new_billers); $i++) {
                $bill_id = 0;
                if ($this->uri->segment(7)) {
                    $bill_id = $new_billers[$i]['id'];
                } else {
                    $bill_id = $new_billers[$i]->id;
                }
                $total_amt_op = 0;
                foreach ($total_op_array as $val) {
                    if ($bill_id == $val['biller_id']) {
                        $total_amt_op += $val['amount'];
                    }
                }

                $sum_total_op[] = array(
                    'biller_id' => $bill_id,
                    'amount' => $total_amt_op
                );

                if ($total_amt_op < 0) {
                    $total_amt_op = '( ' . $this->erp->formatMoney(abs($total_amt_op)) . ' )';
                } else {
                    $total_amt_op = $this->erp->formatMoney(abs($total_amt_op));
                }

                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j12] . $new_row, $total_amt_op);

                $this->excel->getActiveSheet()->getStyle($alphabet[$j12] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j12] . $new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j12] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);
                $j12++;
            }
            $total_expense_display = '';
            if ($total_expense < 0) {
                $total_expense_display = '( ' . $this->erp->formatMoney(abs($total_expense)) . ' )';
            } else {
                $total_expense_display = $this->erp->formatMoney(abs($total_expense));
            }

            $this->excel->getActiveSheet()->SetCellValue($alphabet[$j12] . $new_row, $total_expense_display);

            $this->excel->getActiveSheet()->getStyle($alphabet[$j12] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j12] . $new_row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j12] . $new_row)->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j12] . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            // END TOTAL OPERATING EXPENSE

            // Profit NET/LOSS
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("profits"));
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            $j13 = 0;
            for ($i = 0; $i < count($sum_total_gross); $i++) {
                $per_gross = 0;
                $per_exp = 0;

                $per_gross = $sum_total_gross[$i]['amount'];
                $per_exp = $sum_total_op[$i]['amount'];

                $total_per_op_ex = ($per_gross - $per_exp);

                if ($total_per_op_ex < 0) {
                    $total_per_op_ex = '( ' . $this->erp->formatMoney(abs($total_per_op_ex)) . ' )';
                } else {
                    $total_per_op_ex = $this->erp->formatMoney(abs($total_per_op_ex));
                }

                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j13] . $new_row, $total_per_op_ex);

                $this->excel->getActiveSheet()->getStyle($alphabet[$j13] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j13] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(11)
                    ->setBold(true);
                $j13++;
            }


            $total_profit_per = ((-1) * $total_income - $total_cost) - $total_expense;
            $total_profit_loss_display = '';
            if ($total_profit_per < 0) {
                $total_profit_loss_display = '( ' . $this->erp->formatMoney(abs($total_profit_per)) . ' )';
            } else {
                $total_profit_loss_display = $this->erp->formatMoney(abs($total_profit_per));
            }

            $this->excel->getActiveSheet()->SetCellValue($alphabet[$j13] . $new_row, $total_profit_loss_display);

            $this->excel->getActiveSheet()->getStyle($alphabet[$j13] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j13] . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            // End Profit NET/LOSS


            $filename = 'Income_Statement Detail' . date('Y_m_d_H_i_s');
			if ($xls) {
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
				header('Cache-Control: max-age=0');

				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				return $objWriter->save('php://output');
			}

			redirect($_SERVER["HTTP_REFERER"]);	
		}
		
        $this->page_construct('reports/income_statement_detail', $meta, $this->data);
	}
	
	function balance_sheet($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $biller_id = NULL)
    {
		$this->erp->checkPermissions('balance_sheet',NULL,'account_report');
		$user = $this->site->getUser();
		if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
			$start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
		
		if($biller_id != NULL){
			
			$this->data['biller_id_no_sep'] = $biller_id;
			$biller_sep = explode('-', $biller_id);
			$this->data['excel_biller_id'] = $biller_id;
			$bills = '';
			for($i=0; $i < count($biller_sep); $i++){
				$bills .= $biller_sep[$i] . ',';
			}
			$biller_id =  rtrim($bills, ',');	
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = json_decode($user->biller_id);
				$biller_id = json_decode($user->biller_id);
			}else{
				$biller_id = array();
				$billers =  $this->site->getAllCompanies('biller');
				foreach($billers as $biller){
					$biller_id[] = $biller->id;
				}
				$biller_id = implode(',', $biller_id);
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
		
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports/balance_sheet')));
        $meta = array('page_title' => lang('balance_sheet'), 'bc' => $bc);
		$from_date = date('Y-m-d',strtotime(urldecode($start_date)));//'2014-08-01';
		$to_date = date('Y-m-d',strtotime(urldecode($end_date)));//'2015-09-01'; before, it use in select query.
		
		$this->data['from_date'] = $from_date;
		$this->data['to_date'] = $to_date;
		
		$rep_space_end=str_replace(' ','_',urldecode($end_date));
		$end_dates=str_replace(':','-',$rep_space_end);//replace  $to_date.
		
		$totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;

        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
		
		$dataAsset = $this->accounts_model->getStatementByBalaneSheetDate('10,11',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataAsset'] = $dataAsset;
		
		$dataLiability = $this->accounts_model->getStatementByBalaneSheetDate('20,21',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataLiability'] = $dataLiability;
		
		$dataEquity = $this->accounts_model->getStatementByBalaneSheetDate('30',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataEquity'] = $dataEquity;
		
		$dataIncome = $this->accounts_model->getStatementByBalaneSheetDate('40,70',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataIncome'] = $dataIncome;
		
		$dataAllIncome = $this->accounts_model->getStatementBalaneSheetByDateBill('40,70',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataAllIncome'] = $dataAllIncome;
		
		$dataAllExpense = $this->accounts_model->getStatementBalaneSheetByDateBill('50,60,80,90',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataAllExpense'] = $dataAllExpense;
		
		$dataExpense = $this->accounts_model->getStatementByBalaneSheetDate('50,60,80,90',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataExpense'] = $dataExpense;
		
		if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/balance_sheet', $this->data, true);
            $name = lang("balance_sheet") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_balance_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }


        if ($xls || $pdf) {

            $styleArray = array(
                'font' => array(
                    'bold' => true,
                    'color' => array('rgb' => 'FFFFFF'),
                    'size' => 12,
                    'name' => 'Times New Roman'
                )
            );
            $bold = array(
                'font' => array(
                    'bold' => true
                )
            );

            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('Balance Sheet'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('account_name'));
            $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $alphabet = array('B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            $alphabet1 = array('B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1');

            $num_col = 2;
            $tBiller = 0;
            $new_billers = array();
            foreach ($billers as $b1) {
                if ($this->uri->segment(7)) {
                    $biller_sep = explode('-', $this->uri->segment(7));
                    for ($i = 0; $i < count($biller_sep); $i++) {
                        $this->excel->getActiveSheet()->SetCellValue($alphabet1[$tBiller], $b1->company);
                        $this->excel->getActiveSheet()->getColumnDimension($alphabet[$tBiller])->setWidth(25);
                        $tBiller++;
                        $j = $tBiller;
                        $new_billers[] = array('id' => $b1->id);

                    }
                } else {
                    $new_billers = $billers;
                    $this->excel->getActiveSheet()->SetCellValue($alphabet1[$tBiller], $b1->company);
                    $this->excel->getActiveSheet()->getColumnDimension($alphabet[$tBiller])->setWidth(25);
                    $tBiller++;
                    $j = $tBiller;
                }
                $num_col++;
            }
            $this->excel->getActiveSheet()->SetCellValue($alphabet1[$j], lang('total_amount'));

            // Header Styles
            $this->excel->getActiveSheet()->getStyle('A1:' . $alphabet1[$j])->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(25);
            $this->excel->getActiveSheet()->getColumnDimension($alphabet[$j])->setWidth(25);
            $this->excel->getActiveSheet()->getStyle('A1:' . $alphabet1[$j])->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('B1:' . $alphabet1[$j])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A1:' . $alphabet1[$j])->applyFromArray(
                array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => '428bca')
                    )
                )
            );
            //$this->erp->print_arrays($j);
            $this->excel->getActiveSheet()->SetCellValue('A2', lang('asset'));
            $this->excel->getActiveSheet()->getRowDimension(2)->setRowHeight(20);
            $this->excel->getActiveSheet()->mergeCells('A2:' . $alphabet[$j] . '2');
            $this->excel->getActiveSheet()->getStyle('A2')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A2')->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);


            $from = explode("%", $this->uri->segments["3"])[0];
            $to = explode("%", $this->uri->segments["4"])[0];
            $from_st = !empty($from) ? "&start_date=" . $this->erp->hrld($from) : "";
            $to_st = !empty($to) ? "&end_date=" . $this->erp->hrld($to) : "";

            $new_row = 2;
            $total_asset = 0;
            $totalBeforeAyear_asset = 0;
            $colbot = 0;
            if ($this->uri->segment(7)) {
                $col1 = 3;
                $colbot = 3;
            } else {
                $colcount = count($new_billers);
                $col1 = $colcount + 2;
                $colbot = $colcount + 2;
            }
            $total_asset_arr = array();
            $total_lib_arr = array();
            $total_eq_arr = array();
            $sum_asset_arr = array();
            $sum_lib_arr = array();
            $sum_eq_arr = array();
            foreach ($dataAsset->result() as $row) {
                $j3 = 0;
                $index = 0;
                $total_per_asset = 0;
                for ($i = 1; $i <= count($new_billers); $i++) {
                    $bill_id = 0;
                    if ($this->uri->segment(7)) {
                        $bill_id = $new_billers[$index]['id'];
                    } else {
                        $bill_id = $new_billers[$index]->id;
                    }

                    $query = $this->db->query("SELECT
                    SUM(CASE WHEN erp_gl_trans.amount < 0 THEN erp_gl_trans.amount ELSE 0 END) as NegativeTotal,
                    SUM(CASE WHEN erp_gl_trans.amount >= 0 THEN erp_gl_trans.amount ELSE 0 END) as PostiveTotal,
                    SUM(
                        COALESCE (erp_gl_trans.amount, 0)
                    ) AS amount
                    FROM
                        erp_gl_trans
                    WHERE
                        biller_id = '$bill_id' AND account_code = '" . $row->account_code . "'
                        AND date(erp_gl_trans.tran_date) >= '$from_date' AND date(erp_gl_trans.tran_date) <= '$to_date' ;");

                    $totalBeforeAyearRows = $query->row();
                    $totalBeforeAyear_asset += ($totalBeforeAyearRows->NegativeTotal + $totalBeforeAyearRows->PostiveTotal);

                    $amount_asset = '';
                    $amount_asset = $totalBeforeAyearRows->amount;

                    if ($totalBeforeAyearRows->amount < 0) {
                        $amount_asset = '( ' . number_format(abs($totalBeforeAyearRows->amount), 2) . ' )';
                    } else {
                        $amount_asset = number_format(abs($totalBeforeAyearRows->amount), 2);
                    }

                    if (($index + 1) == 1) {
                        $total_asset_arr[] = array(
                            'biller_id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );

                        $new_row++;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, $row->account_code . ' - ' . $row->accountname);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$j3] . $new_row, $amount_asset);
                    } else {
                        $total_asset_arr[] = array(
                            'biller_id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$j3] . $new_row, $amount_asset);
                    }

                    $total_per_asset += $totalBeforeAyearRows->amount;
                    $total_asset += $totalBeforeAyearRows->amount;

                    $this->excel->getActiveSheet()->getStyle($alphabet[$j3] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A' . $new_row . ':' . $alphabet[$j3] . $new_row)->applyFromArray(
                        array(
                            'font' => array(
                                'color' => array('rgb' => '428bca'),
                                'name' => 'Times New Roman'
                            )
                        )
                    );

                    $j3++;
                    $index++;
                }

                if ($total_per_asset < 0) {
                    $total_per_asset = '( ' . number_format(abs($total_per_asset), 2) . ' )';
                } else {
                    $total_per_asset = number_format(abs($total_per_asset), 2);
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j3] . $new_row, $total_per_asset);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j3] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j3] . $new_row)->getFont()->setName('Times New Roman');
            }

            // Total Asset Styles
            $this->excel->getActiveSheet()->getStyle('A')->getFont()
                ->setName('Times New Roman')
                ->setSize(11)
                ->setBold(true);

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total_asset"));
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $j4 = 0;
            for ($c = 0; $c < count($new_billers); $c++) {
                $in_bill_id1 = 0;
                if ($this->uri->segment(7)) {
                    $in_bill_id1 = $new_billers[$c]['id'];
                } else {
                    $in_bill_id1 = $new_billers[$c]->id;
                }
                $total_asset_amt = 0;
                foreach ($total_asset_arr as $new_arr) {
                    if ($new_arr['biller_id'] == $in_bill_id1) {
                        $total_asset_amt += $new_arr['amount'];
                    }
                }
                $sum_asset_arr[] = array(
                    'id' => $in_bill_id1,
                    'amount' => $total_asset_amt
                );
                if ($total_asset_amt < 0) {
                    $total_asset_amt = '( ' . number_format(abs($total_asset_amt), 2) . ' )';
                } else {
                    $total_asset_amt = number_format(abs($total_asset_amt), 2);
                }

                $this->excel->getActiveSheet()->SetCellValue($alphabet[$j4] . $new_row, $total_asset_amt);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(12)
                    ->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $j4++;
            }
            $total_asset_display = '';
            if ($total_asset < 0) {
                $total_asset_display = '( ' . number_format(abs($total_asset), 2) . ' )';
            } else {
                $total_asset_display = number_format(abs($total_asset), 2);
            }

            $this->excel->getActiveSheet()->SetCellValue($alphabet[$j4] . $new_row, $total_asset_display);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(12)
                ->setBold(true);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$j4] . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("liabilities"));
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->mergeCells('A' . $new_row . ':' . $alphabet[$j] . $new_row);

            // Liabilities
            $total_liability = 0;
            $totalBeforeAyear_liability = 0;
            foreach ($dataLiability->result() as $rowlia) {

                $costRow = 0;
                $index1 = 0;
                $total_per_lib = 0;
                for ($i = 1; $i <= count($new_billers); $i++) {
                    $bill_id = 0;
                    if ($this->uri->segment(7)) {
                        $bill_id = $new_billers[$index1]['id'];
                    } else {
                        $bill_id = $new_billers[$index1]->id;
                    }

                    $query = $this->db->query("SELECT
                    SUM(CASE WHEN erp_gl_trans.amount < 0 THEN erp_gl_trans.amount ELSE 0 END) as NegativeTotal,
                    SUM(CASE WHEN erp_gl_trans.amount >= 0 THEN erp_gl_trans.amount ELSE 0 END) as PostiveTotal,
                    SUM(
                        COALESCE (erp_gl_trans.amount, 0)
                    ) AS amount
                    FROM
                        erp_gl_trans
                    WHERE
                        biller_id = '$bill_id' AND account_code = '" . $rowlia->account_code . "'
                        AND date(erp_gl_trans.tran_date) BETWEEN '$from_date' AND '$to_date' ;");
                    $totalBeforeAyearRows = $query->row();
                    $totalBeforeAyear_liability += ($totalBeforeAyearRows->NegativeTotal + $totalBeforeAyearRows->PostiveTotal);
                    $amount_lib = '';

                    if ($totalBeforeAyearRows->amount < 0) {
                        $amount_lib = number_format(abs($totalBeforeAyearRows->amount), 2);
                    } else {
                        $amount_lib = '( ' . number_format(abs($totalBeforeAyearRows->amount), 2) . ' )';
                    }

                    if (($index1 + 1) == 1) {
                        $new_row++;
                        $total_lib_arr[] = array(
                            'biller_id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );
                        $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, $rowlia->account_code . ' - ' . $rowlia->accountname);
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$costRow] . $new_row, $amount_lib);
                    } else {
                        $total_lib_arr[] = array(
                            'biller_id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$costRow] . $new_row, $amount_lib);
                    }

                    $total_per_lib += $totalBeforeAyearRows->amount;
                    $total_liability += $totalBeforeAyearRows->amount;

                    $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle($alphabet[$costRow] . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle($alphabet[$costRow] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
                    $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()
                        ->setSize(11)
                        ->setBold(false);

                    $this->excel->getActiveSheet()->getStyle('A' . $new_row . ':' . $alphabet[$costRow] . $new_row)->applyFromArray(
                        array(
                            'font' => array(
                                'color' => array('rgb' => '428bca'),
                                'name' => 'Times New Roman'
                            )
                        )
                    );

                    $index1++;
                    $costRow++;
                }
                $total_per_lib_display = $total_per_lib;
                //$total_liability += $total_per_lib;

                if ($total_per_lib < 0) {
                    $total_per_lib_display = number_format(abs($total_per_lib), 2);
                } else {
                    $total_per_lib_display = '( ' . number_format(abs($total_per_lib), 2) . ' )';
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$costRow] . $new_row, $total_per_lib_display);
                $this->excel->getActiveSheet()->getStyle($alphabet[$costRow] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            }

            $tCostRow = 0;
            $gMarginRow = 0;

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total_liabilities"));
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);

            for ($c = 0; $c < count($new_billers); $c++) {
                $in_bill_id1 = 0;
                if ($this->uri->segment(7)) {
                    $in_bill_id1 = $new_billers[$c]['id'];
                } else {
                    $in_bill_id1 = $new_billers[$c]->id;
                }
                $total_lib_amt = 0;
                foreach ($total_lib_arr as $new_arr) {
                    if ($new_arr['biller_id'] == $in_bill_id1) {
                        $total_lib_amt += $new_arr['amount'];
                    }
                }
                $sum_lib_arr[] = array(
                    'biller_id' => $in_bill_id1,
                    'amount' => $total_lib_amt
                );

                if ($total_lib_amt < 0) {
                    $total_lib_amt = number_format(abs($total_lib_amt), 2);
                } else {
                    $total_lib_amt = number_format(abs($total_lib_amt), 2);
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$tCostRow] . $new_row, $total_lib_amt);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(12)
                    ->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow] . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $tCostRow++;
            }
            $end_total_lib = $total_liability;

            if ($total_liability < 0) {
                $total_cost_display = number_format(abs($total_liability), 2);
            } else {
                $total_cost_display = number_format(abs($total_liability), 2);
            }
            $this->excel->getActiveSheet()->SetCellValue($alphabet[$tCostRow] . $new_row, $total_cost_display);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow] . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(12)
                ->setBold(true);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tCostRow] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("equities"));
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);
            $this->excel->getActiveSheet()->mergeCells('A' . $new_row . ':' . $alphabet[$j] . $new_row);

            $total_income = 0;
            $total_expense = 0;
            $total_retained = 0;
            $total_income_beforeAyear = 0;
            $total_expense_beforeAyear = 0;
            $total_retained_beforeAyear = 0;
            $queryIncom = $this->db->query("SELECT sum(erp_gl_trans.amount) AS amount FROM
                                            erp_gl_trans
                                        INNER JOIN erp_gl_charts ON erp_gl_charts.accountcode = erp_gl_trans.account_code
                                        WHERE DATE(tran_date) = '$totalBeforeAyear' AND erp_gl_trans.sectionid IN ('40,70') 
                    AND date(erp_gl_trans.tran_date) BETWEEN '$from_date' AND '$to_date' GROUP BY erp_gl_trans.account_code;");
            $total_income_beforeAyear = $queryIncom->amount;
            $queryExpense = $this->db->query("SELECT sum(erp_gl_trans.amount) AS amount FROM
                                            erp_gl_trans
                                        INNER JOIN erp_gl_charts ON erp_gl_charts.accountcode = erp_gl_trans.account_code
                                        WHERE DATE(tran_date) = '$totalBeforeAyear' AND erp_gl_trans.sectionid IN ('50,60,80,90') GROUP BY erp_gl_trans.account_code;");
            $total_expense_beforeAyear = $queryExpense->amount;
            $total_retained_beforeAyear = abs($total_income_beforeAyear) - abs($total_expense_beforeAyear);
            $retained_inc_arr = array();
            $retained_exp_arr = array();
            foreach ($dataIncome->result() as $rowincome) {
                $total_income += $rowincome->amount;
            }
            foreach ($dataAllIncome->result() as $rowallinc) {
                $retained_inc_arr[] = array(
                    'biller_id' => $rowallinc->biller_id,
                    'amount' => $rowallinc->amount
                );
            }
            foreach ($dataExpense->result() as $rowexpense) {
                $total_expense += $rowexpense->amount;
            }
            foreach ($dataAllExpense->result() as $rowallexp) {
                $retained_exp_arr[] = array(
                    'biller_id' => $rowallexp->biller_id,
                    'amount' => $rowallexp->amount
                );
            }
            $total_retained = $total_income + $total_expense;

            $retained = $this->db->get("account_settings")->row();

            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, $retained->default_retained_earnings . ' - Retained Earnings');
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getFont()->setBold(false);

            $total_retained_arr = array();
            for ($c = 0; $c < count($new_billers); $c++) {
                $in_bill_id1 = 0;
                if ($this->uri->segment(7)) {
                    $in_bill_id1 = $new_billers[$c]['id'];
                } else {
                    $in_bill_id1 = $new_billers[$c]->id;
                }
                $total_per_retained = 0;

                $k = 0;
                $r_inc_per = 0;
                $r_exp_per = 0;

                if (count($retained_exp_arr) == 0) {
                    foreach ($retained_inc_arr as $exp_row) {
                        if ($exp_row['biller_id'] == $in_bill_id1) {
                            $r_exp_per += $exp_row['amount'];
                        }
                        $k++;
                    }
                }

                foreach ($retained_exp_arr as $exp_row) {
                    if ($exp_row['biller_id'] == $in_bill_id1) {
                        $r_exp_per += $exp_row['amount'];
                    }
                }
                foreach ($retained_inc_arr as $inc_row) {
                    if ($in_bill_id1 == $inc_row['biller_id']) {
                        $r_inc_per += $inc_row['amount'];
                    }
                }

                $total_per_retained = $r_exp_per + $r_inc_per;
                $total_retained_arr[] = array(
                    'biller_id' => $in_bill_id1,
                    'amount' => $total_per_retained
                );
                if ($total_per_retained > 0) {
                    $total_per_retained = '( ' . number_format(abs($total_per_retained), 2) . ' )';
                } else {
                    $total_per_retained = number_format(abs($total_per_retained), 2);
                }

                $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow] . $new_row, $total_per_retained);
                $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow] . $new_row)->getFont()
                    ->setSize(11);
                $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow] . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                $this->excel->getActiveSheet()->getStyle('A' . $new_row . ':' . $alphabet[$gMarginRow] . $new_row)->applyFromArray(
                    array(
                        'font' => array(
                            'color' => array('rgb' => '428bca'),
                            'name' => 'Times New Roman'
                        )
                    )
                );

                $gMarginRow++;
            }

            if ($total_retained > 0) {
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow] . $new_row, number_format(abs($total_retained), 2));
                $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            } else {
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow] . $new_row, number_format(abs($total_retained), 2));
                $this->excel->getActiveSheet()->getStyle($alphabet[$gMarginRow] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

            }


            $total_equity = 0;
            $totalBeforeAyear_equity = 0;
            foreach ($dataEquity->result() as $rowequity) {
                $total_equity += $rowequity->amount;

                $index = 0;
                $total_per_eq = 0;
                for ($i = 1; $i <= count($new_billers); $i++) {
                    $bill_id = 0;
                    if ($this->uri->segment(7)) {
                        $bill_id = $new_billers[$index]['id'];
                    } else {
                        $bill_id = $new_billers[$index]->id;
                    }
                    $query = $this->db->query("SELECT
                            SUM(erp_gl_trans.amount) AS amount
                        FROM
                            erp_gl_trans
                        WHERE
                            biller_id = '$bill_id' AND account_code = '" . $rowequity->account_code . "'
                        AND date(erp_gl_trans.tran_date) BETWEEN '$from_date' AND '$to_date' ;");
                    $totalBeforeAyearRows = $query->row();
                    $totalBeforeAyear_equity += $totalBeforeAyearRows->amount;

                    if (($index + 1) == 1) {
                        $total_eq_arr[] = array(
                            'biller_id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );

                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow] . $new_row, $rowequity->account_code . ' - ' . $rowequity->accountname);

                        if (($total_income - $total_cost) < 0) {
                            $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow] . $new_row, "(" . number_format(abs($totalBeforeAyearRows->amount), 2) . ")");
                        } else {
                            $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow] . $new_row, number_format(abs($totalBeforeAyearRows->amount), 2));
                        }

                    } else {
                        $total_eq_arr[] = array(
                            'biller_id' => $bill_id,
                            'amount' => $totalBeforeAyearRows->amount
                        );
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow] . $new_row, number_format(abs($totalBeforeAyearRows->amount), 2));
                    }
                    $total_per_eq += $totalBeforeAyearRows->amount;
                    $index++;
                }
                if ($total_per_eq <= 0) {
                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow] . $new_row, number_format(abs($total_per_eq), 2));
                } else {
                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$gMarginRow] . $new_row, number_format(abs($total_per_eq), 2));
                }
            }

            $tOperatingExpenseRow = 0;
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total_equities"));
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);

            for ($c = 0; $c < count($new_billers); $c++) {
                $in_bill_id1 = 0;
                if ($this->uri->segment(7)) {
                    $in_bill_id1 = $new_billers[$c]['id'];
                } else {
                    $in_bill_id1 = $new_billers[$c]->id;
                }
                $total_eq_amt = 0;
                $k = 0;
                //if(count($total_eq_arr) == 0){
                foreach ($total_retained_arr as $new_arr) {
                    if ($new_arr['biller_id'] == $in_bill_id1) {
                        $total_eq_amt += $total_retained_arr[$k]['amount'];
                    }
                    $k++;
                }
                //}
                foreach ($total_eq_arr as $new_arr) {
                    if ($new_arr['biller_id'] == $in_bill_id1) {
                        if ($total_retained_arr[$k]['biller_id'] == $in_bill_id1) {
                            $total_eq_amt += $new_arr['amount'] + $total_retained_arr[$k]['amount'];
                        } else {
                            $total_eq_amt += $new_arr['amount'];
                        }
                    }
                    $k++;
                }

                $sum_eq_arr[] = array(
                    'biller_id' => $in_bill_id1,
                    'amount' => $total_eq_amt
                );

                $total_eq_amt = $total_eq_amt;
                if ($total_eq_amt < 0) {
                    $total_eq_amt = number_format(abs($total_eq_amt), 2);
                } else {
                    $total_eq_amt = number_format(abs($total_eq_amt), 2);
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$tOperatingExpenseRow] . $new_row, $total_eq_amt);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(12)
                    ->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow] . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $tOperatingExpenseRow++;
            }

            $total_eq_sum = $total_equity + $total_retained;
            $end_total_eq = $total_eq_sum;

            if ($total_eq_sum < 0) {
                $total_expense_display = number_format(abs($total_eq_sum), 2);
            } else {
                $total_expense_display = number_format(abs($total_eq_sum), 2);
            }
            $this->excel->getActiveSheet()->SetCellValue($alphabet[$tOperatingExpenseRow] . $new_row, $total_expense_display);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow] . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(12)
                ->setBold(true);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($alphabet[$tOperatingExpenseRow] . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

            $profit_row = 0;
            $new_row++;
            $this->excel->getActiveSheet()->SetCellValue('A' . $new_row, lang("total_liabilities_equities"));
            $this->excel->getActiveSheet()->getStyle('A' . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getRowDimension($new_row)->setRowHeight(20);

            for ($c = 0; $c < count($new_billers); $c++) {
                $in_bill_id1 = 0;
                if ($this->uri->segment(7)) {
                    $in_bill_id1 = $new_billers[$c]['id'];
                } else {
                    $in_bill_id1 = $new_billers[$c]->id;
                }
                $total_lib_eq = 0;

                $k = 0;
                foreach ($sum_lib_arr as $lib_row) {
                    if ($lib_row['biller_id'] == $in_bill_id1 && ($lib_row['biller_id'] == $sum_eq_arr[$k]['biller_id'])) {
                        $total_lib_eq += $lib_row['amount'] + $sum_eq_arr[$k]['amount'];
                    }
                    $k++;
                }

                if ($total_lib_eq < 0) {
                    $total_lib_eq = number_format(abs($total_lib_eq), 2);
                } else {
                    $total_lib_eq = number_format(abs($total_lib_eq), 2);
                }
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$profit_row] . $new_row, $total_lib_eq);
                $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row] . $new_row)->getFont()
                    ->setName('Times New Roman')
                    ->setSize(12)
                    ->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row] . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $profit_row++;

            }

            $end_lib_eq = $end_total_lib + $end_total_eq;
            $d = 0;

            if ($end_lib_eq < 0) {
                $total_profit_loss_display = number_format(abs($end_lib_eq), 2);
            } else {
                $total_profit_loss_display = number_format(abs($end_lib_eq), 2);
            }
            $this->excel->getActiveSheet()->SetCellValue($alphabet[$profit_row] . $new_row, $total_profit_loss_display);
            $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row] . $new_row)->getFont()
                ->setName('Times New Roman')
                ->setSize(12)
                ->setBold(true);
            $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row] . $new_row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle($new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle($alphabet[$profit_row] . $new_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);


            $this->excel->getActiveSheet()->SetCellValue($alphabet[$profit_row] . $new_row, number_format(abs($end_lib_eq), 2));

            $filename = 'Balance_Sheet' . date('Y_m_d_H_i_s');

            if ($pdf) {
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                return $objWriter->save('php://output');
            }

            if ($xls) {

                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                //Margins:
                $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }
            redirect($_SERVER["HTTP_REFERER"]);
        }

        $this->page_construct('reports/balance_sheet', $meta, $this->data);
	}
	
	function balance_sheet_details($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $biller_id = NULL)
    {
        $this->erp->checkPermissions('balance_sheet',NULL,'account_report');
		$user = $this->site->getUser();
		if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
			//$gl_ = $this->accounts_model->getGLYearMonth();
			//if($gl_){
				//$gl_full = $gl_->min_year . '-' . $gl_->min_month;
				//$start_date = date('Y-m', strtotime($gl_full)) . '-1';
			//}else{
				$start_date = date('Y-m') . '-1';
			//}
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
		
		if($biller_id != NULL){
			$this->data['biller_id_no_sep'] = $biller_id;
			$biller_sep = explode('-', $biller_id);
			
			$bills = '';
			for($i=0; $i < count($biller_sep); $i++){
				$bills .= $biller_sep[$i] . ',';
			}
			$biller_id =  rtrim($bills, ',');

			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = json_decode($user->biller_id);
				$biller_id = json_decode($user->biller_id);
				
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray(json_decode($user->biller_id));
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
		
		$acc_setting = $this->site->get_Acc_setting();
		$this->data['acc_setting'] = $acc_setting;

        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports/balance_sheet')));
        $meta = array('page_title' => lang('balance_sheet'), 'bc' => $bc);
		$from_date = date('Y-m-d',strtotime(urldecode($start_date)));//'2014-08-01';
		$to_date = date('Y-m-d',strtotime(urldecode($end_date)));//'2015-09-01'; before, it use in select query.
		
		$rep_space_end=str_replace(' ','_',urldecode($end_date));
		$end_dates=str_replace(':','-',$rep_space_end);//replace  $to_date.
		
		$totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;

        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
		$dataAsset = $this->accounts_model->getStatementByDate('10,11',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataAsset'] = $dataAsset;
		
		$dataLiability = $this->accounts_model->getStatementByDate('20,21',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataLiability'] = $dataLiability;
		
		$dataEquity = $this->accounts_model->getStatementByDate('30',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataEquity'] = $dataEquity;
		
		$dataIncome = $this->accounts_model->getStatementByDate('40,70',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataIncome'] = $dataIncome;
		
		$dataAllIncome = $this->accounts_model->getStatementByDateBill('40,70',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataAllIncome'] = $dataAllIncome;
		
		$dataAllExpense = $this->accounts_model->getStatementByDateBill('50,60,80,90',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataAllExpense'] = $dataAllExpense;
		
		$dataExpense = $this->accounts_model->getStatementByDate('50,60,80,90',$from_date,$to_date,json_decode($biller_id));
		$this->data['dataExpense'] = $dataExpense;

		//$this->data['assetDetails'] = $this->accounts_model->getBalanceSheetDetailByAccCode('10,11',$from_date,$to_date,$biller_id);

		$this->data['from_date'] = $from_date;
		$this->data['end_dates'] = $to_date;
		
		if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/balance_sheet', $this->data, true);
            $name = lang("balance_sheet") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_balance_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
		if($xls){
			$styleArray = array(
				'font'  => array(
					'bold'  => true,
					'color' => array('rgb' => '000000'),
					'size'  => 10,
					'name'  => 'Verdana'
				)
			);
			$bold = array(
				'font' => array(
					'bold' => true
				)
			);
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->setTitle(lang('Balance Sheet'));
			$this->excel->getActiveSheet()->SetCellValue('A1', lang('account_name'));
			$this->excel->getActiveSheet()->SetCellValue('B1', lang('debit'));
			$this->excel->getActiveSheet()->SetCellValue('C1', lang('credit'));
			$this->excel->getActiveSheet()->SetCellValue('D1', lang("debit") . ' (' . $totalBeforeAyear . ')');
			$this->excel->getActiveSheet()->SetCellValue('E1', lang("credit") . ' (' . $totalBeforeAyear . ')');
			
			$this->excel->getActiveSheet()->getStyle('A2:B2')->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A2:B2')->setCellValue('A2' , lang('asset'));
			$this->excel->getActiveSheet()->mergeCells('C2:E2');
			$total_asset = 0;
			$totalBeforeAyear_asset = 0;
			$Asset = 3;
			foreach($dataAsset->result() as $row){
				$total_asset += $row->amount;
				$query = $this->db->query("SELECT
				SUM(CASE WHEN erp_gl_trans.amount < 0 THEN erp_gl_trans.amount ELSE 0 END) as NegativeTotal,
				SUM(CASE WHEN erp_gl_trans.amount >= 0 THEN erp_gl_trans.amount ELSE 0 END) as PostiveTotal
				FROM
					erp_gl_trans
				WHERE
					DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $row->account_code . "';");
				$totalBeforeAyearRows = $query->row();
				$totalBeforeAyear_asset += ($totalBeforeAyearRows->NegativeTotal + $totalBeforeAyearRows->PostiveTotal);
				
				if ($row->amount>0){
					$this->excel->getActiveSheet()->SetCellValue('A' . $Asset, $row->account_code.' - '.$row->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $Asset, number_format(abs($row->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $Asset, '');
					$this->excel->getActiveSheet()->SetCellValue('D' . $Asset, number_format(abs($totalBeforeAyearRows->PostiveTotal),2));
					$this->excel->getActiveSheet()->SetCellValue('E' . $Asset, '');
				}else{
					$this->excel->getActiveSheet()->SetCellValue('A' . $Asset, $row->account_code.' - '.$row->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $Asset, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $Asset, number_format(abs($row->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('D' . $Asset, '');
					$this->excel->getActiveSheet()->SetCellValue('E' . $Asset, number_format(abs($totalBeforeAyearRows->NegativeTotal),2));
				}
				$Asset++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A3:A'.($Asset-1))->getAlignment()->setIndent(2);
			
			$this->excel->getActiveSheet()->getStyle('B'.$Asset.':E'.$Asset)->applyFromArray($bold);
			$this->excel->getActiveSheet()->SetCellValue('A' . $Asset, lang('total_asset'));
			$this->excel->getActiveSheet()->SetCellValue('B' . $Asset, number_format(abs($total_asset),2));
			$this->excel->getActiveSheet()->SetCellValue('C' . $Asset, '');
			$this->excel->getActiveSheet()->SetCellValue('D' . $Asset,  number_format(abs($totalBeforeAyear_asset),2));
			$this->excel->getActiveSheet()->SetCellValue('E' . $Asset, '');
			
			$eq = $Asset + 1;
			$this->excel->getActiveSheet()->getStyle('A'.$eq.':B'.$eq)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$eq.':B'.$eq)->setCellValue('A' . $eq , lang('liabilities'));
			$this->excel->getActiveSheet()->mergeCells('C'.$eq.':E'.$eq);
			$total_liability = 0;
			$totalBeforeAyear_liability = 0;
			$Liability = $Asset + 2;
			foreach($dataLiability->result() as $rowlia){
				$total_liability += $rowlia->amount;

				$query = $this->db->query("SELECT
					SUM(CASE WHEN erp_gl_trans.amount < 0 THEN erp_gl_trans.amount ELSE 0 END) as NegativeTotal,
					SUM(CASE WHEN erp_gl_trans.amount >= 0 THEN erp_gl_trans.amount ELSE 0 END) as PostiveTotal
					FROM
						erp_gl_trans
					WHERE
						DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $rowlia->account_code . "';");
				$totalBeforeAyearRows = $query->row();
				$totalBeforeAyear_liability += ($totalBeforeAyearRows->NegativeTotal + $totalBeforeAyearRows->PostiveTotal);
				if ($rowlia->amount>0){
					$this->excel->getActiveSheet()->SetCellValue('A' . $Liability, $rowlia->account_code.' - '.$rowlia->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $Liability, number_format(abs($rowlia->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $Liability, '');
					$this->excel->getActiveSheet()->SetCellValue('D' . $Liability, number_format(abs($totalBeforeAyearRows->PostiveTotal),2));
					$this->excel->getActiveSheet()->SetCellValue('E' . $Liability, '');
				}else{
					$this->excel->getActiveSheet()->SetCellValue('A' . $Liability, $rowlia->account_code.' - '.$rowlia->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $Liability, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $Liability, number_format(abs($rowlia->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('D' . $Liability, '');
					$this->excel->getActiveSheet()->SetCellValue('E' . $Liability, number_format(abs($totalBeforeAyearRows->NegativeTotal),2));
				}
				$Liability++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A'.($Asset+2).':A'.($Liability-1))->getAlignment()->setIndent(2);
			$this->excel->getActiveSheet()->getStyle('B'.$Liability.':E'.$Liability)->applyFromArray($bold);
			$this->excel->getActiveSheet()->SetCellValue('A' . $Liability, lang('total_liabilities'));
			$this->excel->getActiveSheet()->SetCellValue('B' . $Liability, '');
			$this->excel->getActiveSheet()->SetCellValue('C' . $Liability, number_format(abs($total_liability),2));
			$this->excel->getActiveSheet()->SetCellValue('D' . $Liability, '');
			$this->excel->getActiveSheet()->SetCellValue('E' . $Liability, number_format(abs($totalBeforeAyear_liability),2));
			
			$equ = $Liability + 1;
			$this->excel->getActiveSheet()->getStyle('A'.$equ.':B'.$equ)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$equ.':B'.$equ)->setCellValue('A' . $equ , lang('equities'));
			$this->excel->getActiveSheet()->mergeCells('C'.$equ.':E'.$equ);
			$total_income = 0;
			$total_expense = 0;
			$total_returned = 0;
			$equities = $Liability + 2;
			$total_income_beforeAyear = 0;
			$total_expense_beforeAyear = 0;
			$total_returned_beforeAyear = 0;
			$queryIncom = $this->db->query("SELECT sum(erp_gl_trans.amount) AS amount FROM
										erp_gl_trans
									INNER JOIN erp_gl_charts ON erp_gl_charts.accountcode = erp_gl_trans.account_code
									WHERE DATE(tran_date) = '$totalBeforeAyear' AND	erp_gl_trans.sectionid IN ('40,70') GROUP BY erp_gl_trans.account_code;");
			$total_income_beforeAyear = $queryIncom->amount;

			$queryExpense = $this->db->query("SELECT sum(erp_gl_trans.amount) AS amount FROM
										erp_gl_trans
									INNER JOIN erp_gl_charts ON erp_gl_charts.accountcode = erp_gl_trans.account_code
									WHERE DATE(tran_date) = '$totalBeforeAyear' AND	erp_gl_trans.sectionid IN ('50,60,80,90') GROUP BY erp_gl_trans.account_code;");
			$total_expense_beforeAyear = $queryExpense->amount;

			$total_returned_beforeAyear = abs($total_income_beforeAyear)-abs($total_expense_beforeAyear);

			foreach($dataIncome->result() as $rowincome){
				$total_income += $rowincome->amount;
			}
			foreach($dataExpense->result() as $rowexpense){
				$total_expense += $rowexpense->amount;
			}
			$total_returned = abs($total_income)-abs($total_expense);
			$this->excel->getActiveSheet()->SetCellValue('A' . $equities, '300000 - Retained Earnings');
			if($total_returned<0) {
				$this->excel->getActiveSheet()->SetCellValue('B' . $equities, number_format(abs($total_returned),2));
				$this->excel->getActiveSheet()->SetCellValue('C' . $equities, '');
				$this->excel->getActiveSheet()->SetCellValue('D' . $equities, number_format($total_returned_beforeAyear,2));
				$this->excel->getActiveSheet()->SetCellValue('E' . $equities, '');
			}else{
				$this->excel->getActiveSheet()->SetCellValue('B' . $equities, '');
				$this->excel->getActiveSheet()->SetCellValue('C' . $equities, number_format(abs($total_returned),2));
				$this->excel->getActiveSheet()->SetCellValue('D' . $equities, '');
				$this->excel->getActiveSheet()->SetCellValue('E' . $equities, number_format($total_returned_beforeAyear,2));
			}
			
			$total_equity = 0;
			$totalBeforeAyear_equity = 0;
			$equity = $equities + 1;
			foreach($dataEquity->result() as $rowequity){
				$total_equity += $rowequity->amount;

				$query = $this->db->query("SELECT
					sum(erp_gl_trans.amount) AS amount
				FROM
					erp_gl_trans
				WHERE
					DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $rowequity->account_code . "';");
				$totalBeforeAyearRows = $query->row();
				$totalBeforeAyear_equity += $totalBeforeAyearRows->amount;
				if($rowequity->amount<0) {
					$this->excel->getActiveSheet()->SetCellValue('A' . $equity, $rowequity->account_code.' - '.$rowequity->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $equity, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $equity, number_format(abs($rowequity->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('D' . $equity, number_format(abs($totalBeforeAyearRows->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('E' . $equity, '');
				}else{
					$this->excel->getActiveSheet()->SetCellValue('A' . $equity, $rowequity->account_code.' - '.$rowequity->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $equity, number_format(abs($rowequity->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $equity, '');
					$this->excel->getActiveSheet()->SetCellValue('D' . $equity, number_format(abs($totalBeforeAyearRows->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('E' . $equity, '');
				}
				$equity++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A'.($Liability+2).':A'.($equity-1))->getAlignment()->setIndent(2);
			
			$this->excel->getActiveSheet()->getStyle('B'.$equity.':E'.$equity)->applyFromArray($bold);
			$this->excel->getActiveSheet()->SetCellValue('A' . $equity, lang('total_equities'));
			$this->excel->getActiveSheet()->SetCellValue('B' . $equity, '');
			$this->excel->getActiveSheet()->SetCellValue('C' . $equity, number_format(abs($total_equity-$total_returned),2));
			$this->excel->getActiveSheet()->SetCellValue('D' . $equity,  '');
			$this->excel->getActiveSheet()->SetCellValue('E' . $equity, number_format(abs($totalBeforeAyear_equity-$total_returned_beforeAyear),2));
			
			$totalL = $equity + 1;
			$this->excel->getActiveSheet()->getStyle('B'.$totalL.':E'.$totalL)->applyFromArray($bold);
			$this->excel->getActiveSheet()->SetCellValue('A' . $totalL, lang('total_liabilities_equities'));
			$this->excel->getActiveSheet()->SetCellValue('B' . $totalL, '');
			$this->excel->getActiveSheet()->SetCellValue('C' . $totalL, number_format(abs($total_equity+$total_liability-$total_returned),2));
			$this->excel->getActiveSheet()->SetCellValue('D' . $totalL,  '');
			$this->excel->getActiveSheet()->SetCellValue('E' . $totalL, number_format(abs($totalBeforeAyear_equity+$totalBeforeAyear_liability-$total_returned_beforeAyear),2));
			
			$totalA = $totalL + 1;
			$this->excel->getActiveSheet()->getStyle('A'.$totalA.':E'.$totalA)->applyFromArray($bold);
			$this->excel->getActiveSheet()->SetCellValue('A' . $totalA, lang('Total ASSET = LIABILITIES + EQUITY'));
			$this->excel->getActiveSheet()->SetCellValue('B' . $totalA, '');
			$this->excel->getActiveSheet()->SetCellValue('C' . $totalA, number_format(abs($total_equity+$total_liability-$total_returned)-abs($total_asset),2));
			$this->excel->getActiveSheet()->SetCellValue('D' . $totalA,  '');
			$this->excel->getActiveSheet()->SetCellValue('E' . $totalA, number_format(abs($totalBeforeAyear_equity+$totalBeforeAyear_liability+$total_returned_beforeAyear)-abs($totalBeforeAyear_asset),2));
			
			
			$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
			$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
			$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
			$filename = 'Balance_Sheet' . date('Y_m_d_H_i_s');
			if ($xls) {
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
				header('Cache-Control: max-age=0');

				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				return $objWriter->save('php://output');
			}

			redirect($_SERVER["HTTP_REFERER"]);	
		}
        $this->page_construct('reports/balance_sheet_details', $meta, $this->data);
	}
	
	function trial_balance($start_date = NULL, $end_date = NULL, $pdf= NULL, $xls = NULL, $biller_id = NULL)
    {
        $this->erp->checkPermissions('trail_balance',NULL,'account_report');
		
		if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
		$user = $this->site->getUser();
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			$this->data['biller_id'] = "";
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
		
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports/trial_balance')));
        $meta = array('page_title' => lang('trial_balance'), 'bc' => $bc);
		$from_date = date('Y-m-d H:m',strtotime(urldecode($start_date)));//'2014-08-01';
		$to_date = date('Y-m-d H:m',strtotime(urldecode($end_date)));//'2015-09-01';
		
		$data10 = $this->accounts_model->getStatementByDate('10',$from_date,$to_date,$biller_id);
		$this->data['data10'] = $data10;
		
		$data11 = $this->accounts_model->getStatementByDate('11',$from_date,$to_date,$biller_id);
		$this->data['data11'] = $data11;
		
		$data20 = $this->accounts_model->getStatementByDate('20',$from_date,$to_date,$biller_id);
		$this->data['data20'] = $data20;
		
		$data21 = $this->accounts_model->getStatementByDate('21',$from_date,$to_date,$biller_id);
		$this->data['data21'] = $data21;
		
		$data30 = $this->accounts_model->getStatementByDate('30',$from_date,$to_date,$biller_id);
		$this->data['data30'] = $data30;
		
		$data40 = $this->accounts_model->getStatementByDate('40',$from_date,$to_date,$biller_id);
		$this->data['data40'] = $data40;
		
		$data50 = $this->accounts_model->getStatementByDate('50',$from_date,$to_date,$biller_id);
		$this->data['data50'] = $data50;
		
		$data60 = $this->accounts_model->getStatementByDate('60',$from_date,$to_date,$biller_id);
		$this->data['data60'] = $data60;
		
		$data70 = $this->accounts_model->getStatementByDate('70',$from_date,$to_date,$biller_id);
		$this->data['data70'] = $data70;
		
		$data80 = $this->accounts_model->getStatementByDate('80',$from_date,$to_date,$biller_id);
		$this->data['data80'] = $data80;		
		
		if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/trial_balance', $this->data, true);
            $name = lang("trial_balance") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_trial_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
		
		if($xls){
			$styleArray = array(
				'font'  => array(
					'bold'  => true,
					'color' => array('rgb' => '000000'),
					'size'  => 10,
					'name'  => 'Verdana'
				),
			);
			$bold = array(
				'font' => array(
					'bold' => true
				)
			);
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->getStyle('A1:C1')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->setTitle(lang('Trial Balance'));
			$this->excel->getActiveSheet()->SetCellValue('A1', lang('account_name'));
			$this->excel->getActiveSheet()->SetCellValue('B1', lang('debit'));
			$this->excel->getActiveSheet()->SetCellValue('C1', lang('credit'));
			$this->excel->getActiveSheet()->getStyle('A2:B2')->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A2:B2')->setCellValue('A2' , lang('current_assets'));
			$total_10 = 0;
			$total_C = 0;
			$total_D = 0;
			$r10 = 3;
			foreach($data10->result() as $row10){
				if ($row10->amount>0){
					$this->excel->getActiveSheet()->mergeCells('C2:C'. $r10);
					$total_C += $row10->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r10, $row10->account_code.' - '.$row10->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r10, number_format(abs($row10->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $r10, '');
				}else{
					$total_D += $row10->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r10, $row10->account_code.' - '.$row10->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r10, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r10, number_format(abs($row10->amount),2));
				}
				$r10++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A'.$r10.':B'.$r10)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$r10.':B'.$r10)->setCellValue('A' . $r10 , lang('fixed_assets'));
			$total_11 = 0;
			$r11 = $r10 + 1;
			foreach($data11->result() as $row11){
				if ($row11->amount>0){
					$this->excel->getActiveSheet()->mergeCells('C'.$r10.':C'. $r11);
					$total_C += $row11->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r11, $row11->account_code.' - '.$row11->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r11, number_format(abs($row11->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $r11, '');
				}else{
					$total_D += $row11->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r11, $row11->account_code.' - '.$row11->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r11, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r11, number_format(abs($row11->amount),2));
				}
				$r11++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A'.$r11.':B'.$r11)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$r11.':B'.$r11)->setCellValue('A' . $r11 , lang('current_liabilities'));
			$total_20 = 0;
			$r20 = $r11 + 1;
			foreach($data20->result() as $row20){
				if ($row20->amount>0){
					//$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
					$total_C += $row20->amount;
					if($row20->account_code == 201100){
						$this->excel->getActiveSheet()->SetCellValue('A' . $r20, $row20->account_code.' - '.$row20->accountname);
						$this->excel->getActiveSheet()->SetCellValue('B' . $r20, '');
						$this->excel->getActiveSheet()->SetCellValue('C' . $r20, number_format(abs($row20->amount),2));
					}else{
						$this->excel->getActiveSheet()->SetCellValue('A' . $r20, $row20->account_code.' - '.$row20->accountname);
						$this->excel->getActiveSheet()->SetCellValue('B' . $r20, number_format(abs($row20->amount),2));
						$this->excel->getActiveSheet()->SetCellValue('C' . $r20, '');
					}
				}else{
					$total_D += $row20->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r20, $row20->account_code.' - '.$row20->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r20, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r20, number_format(abs($row20->amount),2));
				}
				$r20++;
			}			
			
			$this->excel->getActiveSheet()->getStyle('A'.$r20.':B'.$r20)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$r20.':B'.$r20)->setCellValue('A' . $r20 , lang('non_liabilities'));
			$total_21 = 0;
			$r21 = $r20 + 1;
			foreach($data21->result() as $row21){
				if ($row21->amount>0){
					//$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
					$total_C += $row21->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r21, $row21->account_code.' - '.$row21->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r21, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r21, number_format(abs($row21->amount),2));
				}else{
					$total_D += $row21->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r21, $row21->account_code.' - '.$row21->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r21, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r21, number_format(abs($row21->amount),2));
				}
				$r21++;
			}	

			$this->excel->getActiveSheet()->getStyle('A'.$r21.':B'.$r21)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$r21.':B'.$r21)->setCellValue('A' . $r21 , lang('equity_retained_erning'));
			$total_30 = 0;
			$r30 = $r21 + 1;
			foreach($data30->result() as $row30){
				if ($row30->amount>0){
					//$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
					$total_C += $row30->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r30, $row30->account_code.' - '.$row30->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r30, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r30, number_format(abs($row30->amount),2));
				}else{
					$total_D += $row30->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r30, $row30->account_code.' - '.$row30->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r30, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r30, number_format(abs($row30->amount),2));
				}
				$r30++;
			}

			$this->excel->getActiveSheet()->getStyle('A'.$r30.':B'.$r30)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$r30.':B'.$r30)->setCellValue('A' . $r30 , lang('income'));
			$total_40 = 0;
			$r40 = $r30 + 1;
			foreach($data40->result() as $row40){
				if ($row40->amount>0){
					//$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
					$total_C += $row40->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r40, $row40->account_code.' - '.$row40->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r40, number_format(abs($row40->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $r40, '');
				}else{
					$total_D += $row40->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r40, $row40->account_code.' - '.$row40->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r40, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r40, number_format(abs($row40->amount),2));
				}
				$r40++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A'.$r40.':B'.$r40)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$r40.':B'.$r40)->setCellValue('A' . $r40 , lang('cost'));
			$total_50 = 0;
			$r50 = $r40 + 1;
			foreach($data50->result() as $row50){
				if ($row50->amount>0){
					//$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
					$total_C += $row50->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r50, $row50->account_code.' - '.$row50->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r50, number_format(abs($row50->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $r50, '');
				}else{
					$total_D += $row50->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r50, $row50->account_code.' - '.$row50->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r50, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r50, number_format(abs($row50->amount),2));
				}
				$r50++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A'.$r50.':B'.$r50)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$r50.':B'.$r50)->setCellValue('A' . $r50 , lang('operating_expense'));
			$total_60 = 0;
			$r60 = $r50 + 1;
			foreach($data60->result() as $row60){
				if ($row60->amount>0){
					//$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
					$total_C += $row60->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r60, $row60->account_code.' - '.$row60->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r60, number_format(abs($row60->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $r60, '');
				}else{
					$total_D += $row60->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r60, $row60->account_code.' - '.$row60->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r60, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r60, number_format(abs($row60->amount),2));
				}
				$r60++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A'.$r60.':B'.$r60)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$r60.':B'.$r60)->setCellValue('A' . $r60 , lang('other_income'));
			$total_70 = 0;
			$r70 = $r60 + 1;
			foreach($data70->result() as $row70){
				if ($row70->amount>0){
					//$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
					$total_C += $row70->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r70, $row70->account_code.' - '.$row70->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r70, number_format(abs($row70->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $r70, '');
				}else{
					$total_D += $row70->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r70, $row70->account_code.' - '.$row70->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r70, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r70, number_format(abs($row70->amount),2));
				}
				$r70++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A'.$r70.':B'.$r70)->applyFromArray($bold);
			$this->excel->getActiveSheet()->mergeCells('A'.$r70.':B'.$r70)->setCellValue('A' . $r70 , lang('other_expense'));
			$total_80 = 0;
			$r80 = $r70 + 1;
			foreach($data80->result() as $row80){
				if ($row80->amount>0){
					//$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
					$total_C += $row80->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r80, $row80->account_code.' - '.$row80->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r80, number_format(abs($row80->amount),2));
					$this->excel->getActiveSheet()->SetCellValue('C' . $r80, '');
				}else{
					$total_D += $row80->amount;
					$this->excel->getActiveSheet()->SetCellValue('A' . $r80, $row80->account_code.' - '.$row80->accountname);
					$this->excel->getActiveSheet()->SetCellValue('B' . $r80, '');
					$this->excel->getActiveSheet()->SetCellValue('C' . $r80, number_format(abs($row80->amount),2));
				}
				$r80++;
			}
			
			$this->excel->getActiveSheet()->getStyle('A'.$r80.':C'.$r80)->applyFromArray($bold);
			$this->excel->getActiveSheet()->SetCellValue('A' . $r80, lang('total'));
			$this->excel->getActiveSheet()->SetCellValue('B' . $r80, number_format(abs($total_D),2));
			$this->excel->getActiveSheet()->SetCellValue('C' . $r80, number_format(abs($total_C),2));
			
			$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
			$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
			$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
			$filename = 'Trial_Balance' . date('Y_m_d_H_i_s');
			if ($xls) {
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
				header('Cache-Control: max-age=0');

				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				return $objWriter->save('php://output');
			}

			redirect($_SERVER["HTTP_REFERER"]);	
		}
		
        $this->page_construct('reports/trial_balance', $meta, $this->data);
	}
	
	function categories($biller_id = NULL)	
    {
		
        $this->erp->checkPermissions('categories',NULL,'product_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
		$datt =$this->reports_model->getLastDate("purchase_items","date");
		
		$user = $this->site->getUser();
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		
        if ($this->input->post('start_date') && $this->input->post('end_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
			
        } else {
            $dt = "Till " . $this->input->post('end_date');
			
        }
		
		$wid = $this->reports_model->getWareByUserID();
		$this->data['warefull'] = $this->reports_model->getWareFullByUSER($wid);
		$this->data['biller_idd'] = $this->reports_model->getBiilerByUserID();
		//$this->erp->print_arrays($this->data);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('categories_report')));
        $meta = array('page_title' => lang('categories_report'), 'bc' => $bc);
        $this->page_construct('reports/categories', $meta, $this->data);
    }
	
	function categories_value()
    {
        $this->erp->checkPermissions('categories_value',NULL,'product_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('categories_value_report')));
        $meta = array('page_title' => lang('categories_value_report'), 'bc' => $bc);
        $this->page_construct('reports/categories_value', $meta, $this->data);
    }

    function ledger($pdf = NULL, $xls = null, $biller_id = NULL, $start_date = null, $end_date = null)
    {
		$this->erp->checkPermissions('ledger',NULL,'account_report');		
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();				
		$user = $this->site->getUser();

        $start_date = $this->input->get('sd');
		$end_date = $this->input->get('ed');

		$biller_id = $biller_id ? $biller_id : $this->input->get('biller');
		$this->data['v_account'] = $this->input->post('account') ? $this->input->post('account') : $this->input->get('account');		
		$this->data['start_date'] = $this->input->post('start_date')? $this->input->post('start_date') : $this->input->get('start_date');
		$this->data['end_date'] = $this->input->post('end_date') ? $this->input->post('end_date') : $this->input->get('end_date');
		$this->data['v_form'] = $v_form = "0/0/".$biller_id;
		
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
				$biller_id = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}		
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		
        if ($this->input->get('start_date')) {
            $dt = "From " . $this->input->get('start_date') . " to " . $this->input->get('end_date');
        } else {
            $dt = "Till " . $this->input->get('end_date');
        }
		
		if ($pdf) {
			
            $ac = $_GET['ac'];

            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                )

            );

            
            if($pdf){
                $styleArray1 = array(
                'font' => array(
                'bold' => true,
                'size' => 15),
                );
            }
           
            $this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);

            $styleArray10 = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                ),
				'borders' => array(
					'allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)
				),
            );

			$this->excel->getActiveSheet()->setTitle(lang('ledger'));
			$this->excel->getActiveSheet()->getStyle('A1:J1')->applyFromArray($styleArray1);
			$this->excel->getActiveSheet()->getStyle('A2:J2')->applyFromArray($styleArray1);
			$this->excel->getActiveSheet()->getStyle('A4:J4')->applyFromArray($styleArray10);
			$this->excel->getActiveSheet()->mergeCells('A1:J1')->setCellValue('A1', lang('general_ledger'));
			$this->excel->getActiveSheet()->mergeCells('A2:J2')->setCellValue('A2', 'From '.$start_date . ' To '. $end_date);
			$this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->mergeCells('A3:J3')->setCellValue('A3', '');
			$this->excel->getActiveSheet()->SetCellValue('A4', lang('Project'));
            $this->excel->getActiveSheet()->SetCellValue('B4', lang('Type'));
			$this->excel->getActiveSheet()->SetCellValue('C4', lang('Date'));
            $this->excel->getActiveSheet()->SetCellValue('D4', lang('Reference'));
            $this->excel->getActiveSheet()->SetCellValue('E4', lang('Name'));
            $this->excel->getActiveSheet()->SetCellValue('F4', lang('Description'));
			$this->excel->getActiveSheet()->SetCellValue('G4', lang('created_by'));
			$this->excel->getActiveSheet()->SetCellValue('H4', lang('Debit'));
			$this->excel->getActiveSheet()->SetCellValue('I4', lang('Credit'));
			$this->excel->getActiveSheet()->SetCellValue('J4', lang('Balacne'));
            $BoStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );
    
           /* $row1=75;
            $row2=76;
            $row3=77;*/
            $accounntCode = $this->db;
            $accounntCode->select('*')->from('gl_charts');
            if ($_GET['ac']) {
                $accounntCode->where('gl_charts.accountcode', $ac);
            }
            if ($this->input->get('account') ) {
                $accounntCode->where('accountcode', $this->input->get('account'));
            }
            $acc    = $accounntCode->get()->result();
            $row    = 5;
            $rows   = 6;
            $row1   = 0;
            $row2   = 0;
            $row3   = 0;
            foreach($acc as $val){
				$gl_tranStart = $this->db->select('sum(amount) as startAmount')->from('gl_trans');
				$gl_tranStart->where('account_code', $val->accountcode);
                //if ($start_date) {
					$gl_tranStart->where('erp_gl_trans.tran_date <', $this->erp->fld($start_date).'00:00:00');
                //}
				$startAmount = $gl_tranStart->get()->row();
				
                $endAccountBalance = 0;
                $endAccountBalanceMinus = 0;
                $endAccountCreditBalance = 0;
				$endAccountDebitBalance = 0;
				$getListGLTran = $this->db->select("gl_trans.*, companies.company as project, companies.name as cname, users.username as created_by,
                    (CASE WHEN erp_gl_trans.amount>0 THEN erp_gl_trans.amount END ) as am1,
                    (CASE WHEN erp_gl_trans.amount<0 THEN erp_gl_trans.amount END ) as am2")
					->from('gl_trans')
                    ->join('companies', 'gl_trans.biller_id = companies.id', 'left')
                    ->join('users', 'gl_trans.created_by = users.id', 'left')
					->where('account_code =', $val->accountcode)
                    ->order_by('gl_trans.tran_id', 'asc');

                    if ($start_date) {
                        $getListGLTran->where('erp_gl_trans.tran_date >=', $this->erp->fld($start_date).'00:00:00');
                    }
                    if ($end_date) {
                        $getListGLTran->where('erp_gl_trans.tran_date <=', $this->erp->fld($end_date).'23:59:00');
                    }
					
				if ($this->data['start_date']) {
					$getListGLTran->where('date(tran_date) >=', $this->data['start_date']);
				}
				if ($this->data['end_date']) {
					$getListGLTran->where('date(tran_date) <=', $this->data['end_date']);
				}
				
				if($biller_id != ""){
					 $getListGLTran->where_in('gl_trans.biller_id' ,JSON_decode($biller_id));
				}
				$gltran_list = $getListGLTran->get()->result();
				if($gltran_list) {
					$this->excel->getActiveSheet()->mergeCells('A'.$row.':C'.$row)->setCellValue('A'. $row , 'Account: '.$val->accountcode . ' ' .$val->accountname);
					$this->excel->getActiveSheet()->mergeCells('D'.$row.':G'.$row);
					$this->excel->getActiveSheet()->setCellValue('D'. $row , 'Begining Account Balance: ')->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle);
					if($startAmount->startAmount > 0) {
						$this->excel->getActiveSheet()->setCellValue('H'. $row , $this->erp->formatDecimal(abs($startAmount->startAmount)));
						$this->excel->getActiveSheet()->setCellValue('I'. $row , '');
					}else {
						$this->excel->getActiveSheet()->setCellValue('H'. $row , '');
						$this->excel->getActiveSheet()->setCellValue('I'. $row , $this->erp->formatDecimal(abs($startAmount->startAmount)));
					}
					$this->excel->getActiveSheet()->getStyle('A'.$row.':C'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('D'.$row.':E'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('H'.$row.':I'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
					$endAmount = $startAmount->startAmount;
					foreach($gltran_list as $rw)
					{
						$this->excel->getActiveSheet()->getStyle('E'.$rows.':G'.$rows)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);		
                        $endAccountBalance += $rw->amount;
                        $endAccountBalanceMinus = explode('-', $this->erp->formatMoney($endAccountBalance));
						$endAmount += $rw->amount;
						//$endAccountCreditBalance += $rw->am2;
                        //$endAccountDebitBalance += $rw->am1;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $rows, $rw->project);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $rows, $rw->reference_no . ' ');
                        $this->excel->getActiveSheet()->SetCellValue('E' . $rows, $rw->cname);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $rows, $this->erp->decode_html(strip_tags($rw->description)));
						$this->excel->getActiveSheet()->SetCellValue('G' . $rows, $rw->created_by);
						$this->excel->getActiveSheet()->SetCellValue('C' . $rows, date("d-m-Y", strtotime($rw->tran_date)));
						$this->excel->getActiveSheet()->SetCellValue('B' . $rows, $rw->tran_type);
						$this->excel->getActiveSheet()->SetCellValue('H' . $rows, ($rw->am1 > 0 ? $this->erp->formatDecimal($rw->am1) : '0.00'));
						$this->excel->getActiveSheet()->SetCellValue('I' . $rows, ($rw->am2 < 1 ? $this->erp->formatDecimal(abs($rw->am2)) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $rows, $endAccountBalance < 0 ? '$ (' . $endAccountBalanceMinus[1] . ')' : $this->erp->formatMoney($endAccountBalance));
						$this->excel->getActiveSheet()->getStyle('A'.$rows.':J'.$rows)->applyFromArray($BoStyle); 
						if($row>70){
							$row1++;
							$row2++;
							$row3++;
						}
						$rows++;
					}
					$test = $rows;
					$this->excel->getActiveSheet()->mergeCells('A'.$test.':C'.$test);
					$this->excel->getActiveSheet()->mergeCells('D'.$test.':G'.$test)->setCellValue('D'. $test , 'Ending Account Balance: ');
					if($endAmount > 0) {
						$this->excel->getActiveSheet()->setCellValue('H'. $test , $this->erp->formatMoney($endAmount));
						$this->excel->getActiveSheet()->setCellValue('I'. $test , '');
						$this->excel->getActiveSheet()->setCellValue('J'. $test , '');
					}else {
						$this->excel->getActiveSheet()->setCellValue('H'. $test , '');
						$this->excel->getActiveSheet()->setCellValue('I'. $test , $this->erp->formatMoney(abs($endAmount)));
						$this->excel->getActiveSheet()->setCellValue('J'. $test , '');
					}
					$this->excel->getActiveSheet()->getStyle('H'.$test.':J'.$test)->applyFromArray($styleArray10);

					$this->excel->getActiveSheet()->getStyle('D'.$test.':E'.$test)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
					$row = $rows;
					$rows = $rows + 2 ;
					$this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle); 
					$row++;
				}		
				
			}
            $BorStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );

            $this->excel->getActiveSheet()->getStyle("F".$row1)->getFont()->setSize(14);
            $this->excel->getActiveSheet()->getStyle('F'.$row1)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('B'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row2.':G'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row3)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'ledger_' . date('Y_m_d_H_i_s');
            if ($pdf) {				
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                return $objWriter->save('php://output');
            }
            redirect($_SERVER["HTTP_REFERER"]); 
        }

        // ***********************************************
        if ($xls) {
            $ac = $_GET['ac'];

			$styleArray = array(
				'font'  => array(
					'bold'  => true,
					'color' => array('rgb' => '#000000'),
					'size'  => 10,
					'name'  => 'Verdana'
				),
			);
			$styleArray10 = array(
				'font'  => array(
					'bold'  => true,
					'color' => array('rgb' => '#000000'),
					'size'  => 10,
					'name'  => 'Verdana'
				),
			);
			if($xls){
				$styleArray1 = array(
				'font' => array(
				'bold' => true,
				'size' => 15),
				);
			}
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->setTitle(lang('ledger'));
			$this->excel->getActiveSheet()->getStyle('A4:J4')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->getStyle('F1')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->getStyle('F2:H2')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->getStyle('A3:D3')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray1);
			$this->excel->getActiveSheet()->getStyle('D2')->applyFromArray($styleArray1);
			$this->excel->getActiveSheet()->SetCellValue('F1', lang('  '));
			$this->excel->getActiveSheet()->SetCellValue('F2', lang(''));
			$this->excel->getActiveSheet()->SetCellValue('A3', lang(''));
			$this->excel->getActiveSheet()->SetCellValue('D1', lang('general_ledger'));
            $this->excel->getActiveSheet()->getStyle('D1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->SetCellValue('D2', 'From '.$start_date . ' To '. $end_date);
			$this->excel->getActiveSheet()->getStyle('D2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->SetCellValue('D4', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('A4', lang('Project'));
            $this->excel->getActiveSheet()->SetCellValue('B4', lang('Type'));
			$this->excel->getActiveSheet()->SetCellValue('C4', lang('Date'));
            $this->excel->getActiveSheet()->SetCellValue('D4', lang('Reference'));
            $this->excel->getActiveSheet()->SetCellValue('E4', lang('Name'));
            $this->excel->getActiveSheet()->SetCellValue('F4', lang('Description'));
			$this->excel->getActiveSheet()->SetCellValue('G4', lang('created_by'));
			$this->excel->getActiveSheet()->SetCellValue('H4', lang('Debit'));
			$this->excel->getActiveSheet()->SetCellValue('I4', lang('Credit'));
			$this->excel->getActiveSheet()->SetCellValue('J4', lang('Balacne'));
			$BoStyle = array(
					  'borders' => array(
						'allborders' => array(
						  'style' => PHPExcel_Style_Border::BORDER_THIN 
						)
					  )
					);
	
			$row1=75;
			$row2=76;
			$row3=77;
			$accounntCode = $this->db;
			$accounntCode->select('*')->from('gl_charts');
            if ($_GET['ac']) {
                $accounntCode->where('gl_charts.accountcode', $ac);
            }
			if ($this->input->get('account') ) {
				$accounntCode->where('accountcode', $this->input->get('account'));
			}
			$acc = $accounntCode->get()->result();
			$row = 5;
			$rows = 6;
			foreach($acc as $val){
				$gl_tranStart = $this->db->select('sum(amount) as startAmount')->from('gl_trans');
				$gl_tranStart->where('account_code', $val->accountcode);
                $gl_tranStart->where('erp_gl_trans.tran_date <', $this->erp->fld($start_date) . '00:00:00');
				$startAmount = $gl_tranStart->get()->row();
				
                $endAccountBalance = 0;
                $endAccountBalanceMinus = 0;
                $endAccountCreditBalance = 0;
				$endAccountDebitBalance = 0;
				$getListGLTran = $this->db->select("gl_trans.*, companies.company as project, companies.name as cname, users.username as created_by,
                    (CASE WHEN erp_gl_trans.amount>0 THEN erp_gl_trans.amount END ) as am1,
                    (CASE WHEN erp_gl_trans.amount<0 THEN erp_gl_trans.amount END ) as am2")
					->from('gl_trans')
                    ->join('companies', 'gl_trans.biller_id = companies.id', 'left')
                    ->join('users', 'gl_trans.created_by = users.id', 'left')
					->where('account_code =', $val->accountcode)
                    ->order_by('gl_trans.tran_id', 'asc');

                    if ($start_date) {
                        $getListGLTran->where('erp_gl_trans.tran_date >=', $this->erp->fld($start_date).'00:00:00');
                    }
                    if ($end_date) {
                        $getListGLTran->where('erp_gl_trans.tran_date <=', $this->erp->fld($end_date).'23:59:00');
                    }
					
				if ($this->data['start_date']) {
					$getListGLTran->where('date(tran_date) >=', $this->data['start_date']);
				}
				if ($this->data['end_date']) {
					$getListGLTran->where('date(tran_date) <=', $this->data['end_date']);
				}
				
				if($biller_id != ""){
					 $getListGLTran->where_in('gl_trans.biller_id' ,JSON_decode($biller_id));
				}
				$gltran_list = $getListGLTran->get()->result();
				if($gltran_list) {
					$this->excel->getActiveSheet()->mergeCells('A'.$row.':C'.$row)->setCellValue('A'. $row , 'Account: '.$val->accountcode . ' ' .$val->accountname);
					$this->excel->getActiveSheet()->mergeCells('D'.$row.':G'.$row);
					$this->excel->getActiveSheet()->setCellValue('D'. $row , 'Begining Account Balance: ')->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle);
					if($startAmount->startAmount > 0) {
						$this->excel->getActiveSheet()->setCellValue('H'. $row , $this->erp->formatMoney(abs($startAmount->startAmount)));
						$this->excel->getActiveSheet()->setCellValue('I'. $row , '');
					} else {
						$this->excel->getActiveSheet()->setCellValue('H'. $row , '');
						$this->excel->getActiveSheet()->setCellValue('I'. $row , $this->erp->formatMoney(abs($startAmount->startAmount)));
					}
					$this->excel->getActiveSheet()->getStyle('A'.$row.':C'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('D'.$row.':E'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('H'.$row.':I'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
					$endAmount = $startAmount->startAmount;
					foreach($gltran_list as $rw)
					{
						$this->excel->getActiveSheet()->getStyle('E'.$rows.':G'.$rows)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);		
                        $endAccountBalance += $rw->amount;
                        $endAccountBalanceMinus = explode('-', $this->erp->formatMoney($endAccountBalance));
						$endAmount += $rw->amount;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $rows, $rw->project);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $rows, $rw->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $rows, $rw->cname);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $rows, $this->erp->decode_html(strip_tags($rw->description)));
						$this->excel->getActiveSheet()->SetCellValue('G' . $rows, $rw->created_by);
						$this->excel->getActiveSheet()->SetCellValue('C' . $rows, date("d-m-Y", strtotime($rw->tran_date)));
						$this->excel->getActiveSheet()->SetCellValue('B' . $rows, $rw->tran_type);
						$this->excel->getActiveSheet()->SetCellValue('H' . $rows, ($rw->am1 > 0 ? $this->erp->formatMoney($rw->am1) : '0.00'));
						$this->excel->getActiveSheet()->SetCellValue('I' . $rows, ($rw->am2 < 1 ? $this->erp->formatMoney(abs($rw->am2)) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $rows, $endAccountBalance < 0 ? '$ (' . $endAccountBalanceMinus[1] . ')' : $this->erp->formatMoney($endAccountBalance));
						$this->excel->getActiveSheet()->getStyle('A'.$rows.':J'.$rows)->applyFromArray($BoStyle); 
						if($row>70){
							$row1++;
							$row2++;
							$row3++;
						}
						$rows++;
					}
					$test = $rows;
					$this->excel->getActiveSheet()->mergeCells('A'.$test.':C'.$test);
					$this->excel->getActiveSheet()->mergeCells('D'.$test.':G'.$test)->setCellValue('D'. $test , 'Ending Account Balance: ');
					if($endAmount > 0) {
						$this->excel->getActiveSheet()->setCellValue('H'. $test , $this->erp->formatMoney(abs($endAmount)));
						$this->excel->getActiveSheet()->setCellValue('I'. $test , '');
						$this->excel->getActiveSheet()->setCellValue('J'. $test , '');
					} else {
						$this->excel->getActiveSheet()->setCellValue('H'. $test , '');
						$this->excel->getActiveSheet()->setCellValue('I'. $test , $this->erp->formatMoney(abs($endAmount)));
						$this->excel->getActiveSheet()->setCellValue('J'. $test , '');
					}
					$this->excel->getActiveSheet()->getStyle('H'.$test.':J'.$test)->applyFromArray($styleArray10);

					$this->excel->getActiveSheet()->getStyle('D'.$test.':E'.$test)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
					$row = $rows;
					$rows = $rows + 2 ;
					$this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle); 
					$row++;
				}		
				
			}
			$BorStyle = array(
					  'borders' => array(
						'allborders' => array(
						  'style' => PHPExcel_Style_Border::BORDER_THIN 
						)
					  )
					);
			$this->excel->getActiveSheet()->getStyle('A4:J71')->applyFromArray($BorStyle); 
			$this->excel->getActiveSheet()->mergeCells('F75:G75');
			$this->excel->getActiveSheet()->mergeCells('F77:G77');
			$this->excel->getActiveSheet()->getStyle("F".$row1)->getFont()->setSize(14);
			$this->excel->getActiveSheet()->getStyle('F'.$row1)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getStyle('B'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getStyle('F'.$row2.':G'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getStyle('F'.$row3)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
			$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
			$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
			$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
			$filename = 'ledger_' . date('Y_m_d_H_i_s');
			if ($xls) {
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
				header('Cache-Control: max-age=0');
				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				return $objWriter->save('php://output');
			}
			redirect($_SERVER["HTTP_REFERER"]);	
		}

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('ledger')));
        $meta = array('page_title' => lang('ledger'), 'bc' => $bc);
        $this->page_construct('reports/ledger', $meta, $this->data);
    }
	
	function ledger_by_customer($pdf = NULL, $xls = null, $customer_id = NULL)
    {
      
		$this->erp->checkPermissions('ledger',NULL,'account_report');		
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();				
		$user = $this->site->getUser();
		
		$customer_id = $customer_id ? $customer_id : $this->input->get('customer');
		$this->data['v_account'] = $this->input->post('account') ? $this->input->post('account') : $this->input->get('account');		
		$this->data['start_date'] = $this->input->post('start_date')? $this->input->post('start_date') : $this->input->get('start_date');
		$this->data['end_date'] = $this->input->post('end_date') ? $this->input->post('end_date') : $this->input->get('end_date');
		$this->data['v_form'] = $v_form = "0/0/".$customer_id;
		
		if($customer_id != NULL){
			$this->data['customer_id'] = $customer_id;
		}else{
			$this->data['customer_id'] = "";
		}
		$this->data['customers'] = $this->site->getAllCompanies('customer');
		
        if ($this->input->get('start_date')) {
            $dt = "From " . $this->input->get('start_date') . " to " . $this->input->get('end_date');
        } else {
            $dt = "Till " . $this->input->get('end_date');
        }
		
		if ($pdf) {
			
            $ac = $_GET['ac'];

            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                )

            );

            

            $styleArray10 = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                ),
            );
            if($pdf){
                $styleArray1 = array(
                'font' => array(
                'bold' => true,
                'size' => 15),
                );


            }
			
           
            $this->load->library('excel');
             $this->excel->getActiveSheet()->getDefaultStyle()->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            $this->excel->getActiveSheet()->getDefaultStyle()->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            $this->excel->getActiveSheet()->getDefaultStyle()->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            $this->excel->getActiveSheet()->getDefaultStyle()->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);

            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('ledger'));
           
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('Project'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('Type'));
            $this->excel->getActiveSheet()->SetCellValue('C1', lang('Date'));
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('Reference'));
            $this->excel->getActiveSheet()->SetCellValue('E1', lang('Name'));
            $this->excel->getActiveSheet()->SetCellValue('F1', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('G1', lang('created_by'));
            $this->excel->getActiveSheet()->SetCellValue('H1', lang('Debit'));
            $this->excel->getActiveSheet()->SetCellValue('I1', lang('Credit'));
            $this->excel->getActiveSheet()->SetCellValue('J1', lang('Balacne'));
            $BoStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );
    
           /* $row1=75;
            $row2=76;
            $row3=77;*/
            $accounntCode = $this->db;
            $accounntCode->select('*')->from('gl_charts');
            if ($_GET['ac']) {
                $accounntCode->where('gl_charts.accountcode', $ac);
            }
            if ($this->input->get('account') ) {
                $accounntCode->where('accountcode', $this->input->get('account'));
            }
            $acc    = $accounntCode->get()->result();
            $row    = 2;
            $rows   = 3;
            $row1   = 0;
            $row2   = 0;
            $row3   = 0;
            foreach($acc as $val){
                $gl_tranStart = $this->db->select('sum(amount) as startAmount')->from('gl_trans');
                $gl_tranStart->where(array('tran_date < '=> $this->erp->fld($this->data['start_date']), 'account_code'=> $val->accountcode));
                $startAmount = $gl_tranStart->get()->row();
                
                $endAccountBalance = 0;
                $endAccountCreditBalance = 0;
                $endAccountDebitBalance = 0;
                $getListGLTran = $this->db->select("gl_trans.*, companies.company as project, companies.name as cname, users.username as created_by,
                    (CASE WHEN erp_gl_trans.amount>0 THEN erp_gl_trans.amount END ) as am1,
                    (CASE WHEN erp_gl_trans.amount<0 THEN erp_gl_trans.amount END ) as am2")
                    ->from('gl_trans')
                    ->join('companies', 'gl_trans.customer_id = companies.id', 'left')
                    ->join('users', 'gl_trans.created_by = users.id', 'left')
                    ->where('account_code =', $val->accountcode)
                    ->order_by('gl_trans.tran_id', 'asc');
                    
                if ($this->data['start_date']) {
                    $getListGLTran->where('date(tran_date) >=', $this->data['start_date']);
                }
                if ($this->data['end_date']) {
                    $getListGLTran->where('date(tran_date) <=', $this->data['end_date']);
                }
                
                if($customer_id != ""){
                     $getListGLTran->where('customer_id' , $customer_id);
                }
                $gltran_list = $getListGLTran->get()->result();
				
                if($gltran_list) {
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':C'.$row)->setCellValue('A'. $row , 'Account: '.$val->accountcode . ' ' .$val->accountname);
                    $this->excel->getActiveSheet()->mergeCells('D'.$row.':G'.$row);
                    $this->excel->getActiveSheet()->setCellValue('D'. $row , 'Begining Account Balance: ')->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle);
                    $this->excel->getActiveSheet()->mergeCells('H'.$row.':I'.$row)->setCellValue('H'. $row , $this->erp->formatMoney(abs($startAmount->startAmount)));
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':C'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('D'.$row.':E'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    foreach($gltran_list as $rw)
                    {
                        $this->excel->getActiveSheet()->getStyle('E'.$rows.':G'.$rows)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);      
                        $endAccountBalance += $rw->amount;
                        $endAccountCreditBalance += $rw->am2;
                        $endAccountDebitBalance += $rw->am1;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $rows, $rw->project);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $rows, $rw->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $rows, $rw->cname);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $rows, $this->erp->decode_html(strip_tags($rw->description)));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $rows, $rw->created_by);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $rows, date("d-m-Y", strtotime($rw->tran_date)));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $rows, $rw->tran_type);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $rows, ($rw->am1 > 0 ? $this->erp->formatMoney($rw->am1) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $rows, ($rw->am2 < 1 ? $this->erp->formatMoney(abs($rw->am2)) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $rows,  $this->erp->formatMoney($rw->amount));
                        $this->excel->getActiveSheet()->getStyle('A'.$rows.':J'.$rows)->applyFromArray($BoStyle); 
                       /* if($row>70){
                            $row1++;
                            $row2++;
                            $row3++;
                        }*/
                        $rows++;
                    }
                    $test = $rows;
                    $this->excel->getActiveSheet()->mergeCells('A'.$test.':C'.$test);
                    $this->excel->getActiveSheet()->mergeCells('D'.$test.':G'.$test)->setCellValue('D'. $test , 'Ending Account Balance: ');

                    $this->excel->getActiveSheet()->setCellValue('H'. $test , $this->erp->formatMoney($endAccountDebitBalance));
                    $this->excel->getActiveSheet()->setCellValue('I'. $test , $this->erp->formatMoney($endAccountCreditBalance));
                    $this->excel->getActiveSheet()->setCellValue('J'. $test , $this->erp->formatMoney($endAccountBalance));

                    $this->excel->getActiveSheet()->getStyle('D'.$test.':E'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    // $row = $rows;
                    $rows = $rows + 2 ;
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle); 
                    $this->excel->getActiveSheet()->getStyle('A'.$test.':J'.$test)->applyFromArray($BoStyle); 
                    $row++;
                }       
                
            }
            $BorStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );

            $this->excel->getActiveSheet()->getStyle("F".$row1)->getFont()->setSize(14);
            $this->excel->getActiveSheet()->getStyle('F'.$row1)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('B'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row2.':G'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row3)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'ledger_' . date('Y_m_d_H_i_s');
            if ($pdf) {				
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                return $objWriter->save('php://output');
            }
            redirect($_SERVER["HTTP_REFERER"]); 
        }

        // ***********************************************
        if ($xls) {
            $ac = $_GET['ac'];

			$styleArray = array(
				'font'  => array(
					'bold'  => true,
					'color' => array('rgb' => '#000000'),
					'size'  => 10,
					'name'  => 'Verdana'
				),
			);
			$styleArray10 = array(
				'font'  => array(
					'bold'  => true,
					'color' => array('rgb' => '#000000'),
					'size'  => 10,
					'name'  => 'Verdana'
				),
			);
			if($xls){
				$styleArray1 = array(
				'font' => array(
				'bold' => true,
				'size' => 15),
				);
			}
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->setTitle(lang('ledger'));
			$this->excel->getActiveSheet()->getStyle('A4:H4')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->getStyle('F1')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->getStyle('F2:H2')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->getStyle('A3:D3')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->getStyle('D2')->applyFromArray($styleArray1);
			$this->excel->getActiveSheet()->SetCellValue('F1', lang('  '));
			$this->excel->getActiveSheet()->SetCellValue('F2', lang(''));
			$this->excel->getActiveSheet()->SetCellValue('A3', lang(''));
			$this->excel->getActiveSheet()->SetCellValue('D2', lang('general_ledger'));
			$this->excel->getActiveSheet()->getStyle('D2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->SetCellValue('D4', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('A4', lang('Project'));
            $this->excel->getActiveSheet()->SetCellValue('B4', lang('Type'));
			$this->excel->getActiveSheet()->SetCellValue('C4', lang('Date'));
            $this->excel->getActiveSheet()->SetCellValue('D4', lang('Reference'));
            $this->excel->getActiveSheet()->SetCellValue('E4', lang('Name'));
            $this->excel->getActiveSheet()->SetCellValue('F4', lang('Description'));
			$this->excel->getActiveSheet()->SetCellValue('G4', lang('created_by'));
			$this->excel->getActiveSheet()->SetCellValue('H4', lang('Debit'));
			$this->excel->getActiveSheet()->SetCellValue('I4', lang('Credit'));
			$this->excel->getActiveSheet()->SetCellValue('J4', lang('Balacne'));
			$BoStyle = array(
					  'borders' => array(
						'allborders' => array(
						  'style' => PHPExcel_Style_Border::BORDER_THIN 
						)
					  )
					);
	
			$row1=75;
			$row2=76;
			$row3=77;
			$accounntCode = $this->db;
			$accounntCode->select('*')->from('gl_charts');
            if ($_GET['ac']) {
                $accounntCode->where('gl_charts.accountcode', $ac);
            }
			if ($this->input->get('account') ) {
				$accounntCode->where('accountcode', $this->input->get('account'));
			}
			$acc = $accounntCode->get()->result();
			$row = 5;
			$rows = 6;
			foreach($acc as $val){
				$gl_tranStart = $this->db->select('sum(amount) as startAmount')->from('gl_trans');
				$gl_tranStart->where(array('tran_date < '=> $this->erp->fld($this->data['start_date']), 'account_code'=> $val->accountcode));
				$startAmount = $gl_tranStart->get()->row();
				
                $endAccountBalance = 0;
				$endAccountDebitBalance = 0;
				$getListGLTran = $this->db->select("gl_trans.*, companies.company as project, companies.name as cname, users.username as created_by,
                    (CASE WHEN erp_gl_trans.amount>0 THEN erp_gl_trans.amount END ) as am1,
                    (CASE WHEN erp_gl_trans.amount<0 THEN erp_gl_trans.amount END ) as am2")
					->from('gl_trans')
                    ->join('companies', 'gl_trans.customer_id = companies.id', 'left')
                    ->join('users', 'gl_trans.created_by = users.id', 'left')
					->where('account_code =', $val->accountcode)
                    ->order_by('gl_trans.tran_id', 'asc');
					
				if ($this->data['start_date']) {
					$getListGLTran->where('date(tran_date) >=', $this->data['start_date']);
				}
				if ($this->data['end_date']) {
					$getListGLTran->where('date(tran_date) <=', $this->data['end_date']);
				}
				
				if($customer_id != ""){
					 $getListGLTran->where('customer_id' ,$customer_id);
				}
				$gltran_list = $getListGLTran->get()->result();
				if($gltran_list) {
					$this->excel->getActiveSheet()->mergeCells('A'.$row.':C'.$row)->setCellValue('A'. $row , 'Account: '.$val->accountcode . ' ' .$val->accountname);
					$this->excel->getActiveSheet()->mergeCells('D'.$row.':G'.$row);
					$this->excel->getActiveSheet()->setCellValue('D'. $row , 'Begining Account Balance: ')->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle);
					$this->excel->getActiveSheet()->mergeCells('H'.$row.':I'.$row)->setCellValue('H'. $row , $this->erp->formatMoney(abs($startAmount->startAmount)));
					$this->excel->getActiveSheet()->getStyle('A'.$row.':C'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('D'.$row.':E'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
					foreach($gltran_list as $rw)
					{
						$this->excel->getActiveSheet()->getStyle('E'.$rows.':G'.$rows)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);		
                        $endAccountBalance += $rw->amount;
						$endAccountDebitBalance += $rw->am1;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $rows, $rw->project);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $rows, $rw->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $rows, $rw->cname);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $rows, $this->erp->decode_html(strip_tags($rw->description)));
						$this->excel->getActiveSheet()->SetCellValue('G' . $rows, $rw->created_by);
						$this->excel->getActiveSheet()->SetCellValue('C' . $rows, date("d-m-Y", strtotime($rw->tran_date)));
						$this->excel->getActiveSheet()->SetCellValue('B' . $rows, $rw->tran_type);
						$this->excel->getActiveSheet()->SetCellValue('H' . $rows, ($rw->am1 > 0 ? $this->erp->formatMoney($rw->am1) : '0.00'));
						$this->excel->getActiveSheet()->SetCellValue('I' . $rows, ($rw->am2 < 1 ? $this->erp->formatMoney(abs($rw->am2)) : '0.00'));
						$this->excel->getActiveSheet()->SetCellValue('J' . $rows,  $this->erp->formatMoney($rw->amount));
						$this->excel->getActiveSheet()->getStyle('A'.$rows.':J'.$rows)->applyFromArray($BoStyle); 
						if($row>70){
							$row1++;
							$row2++;
							$row3++;
						}
						$rows++;
					}
					$test = $rows;
					$this->excel->getActiveSheet()->mergeCells('A'.$test.':C'.$test);
					$this->excel->getActiveSheet()->mergeCells('D'.$test.':G'.$test)->setCellValue('D'. $test , 'Ending Account Balance: ');

                    $this->excel->getActiveSheet()->setCellValue('H'. $test , $this->erp->formatMoney($endAccountDebitBalance));
                    $this->excel->getActiveSheet()->setCellValue('I'. $test , $this->erp->formatMoney($endAccountBalance));
                    $this->excel->getActiveSheet()->setCellValue('J'. $test , $this->erp->formatMoney($endAccountBalance));

					$this->excel->getActiveSheet()->getStyle('D'.$test.':E'.$test)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->applyFromArray($styleArray10);
					$this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
					$row = $rows;
					$rows = $rows + 2 ;
					$this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle); 
					$row++;
				}		
				
			}
			$BorStyle = array(
					  'borders' => array(
						'allborders' => array(
						  'style' => PHPExcel_Style_Border::BORDER_THIN 
						)
					  )
					);
			$this->excel->getActiveSheet()->getStyle('A4:J71')->applyFromArray($BorStyle); 
			$this->excel->getActiveSheet()->mergeCells('F75:G75');
			$this->excel->getActiveSheet()->mergeCells('F77:G77');
			$this->excel->getActiveSheet()->getStyle("F".$row1)->getFont()->setSize(14);
			$this->excel->getActiveSheet()->getStyle('F'.$row1)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getStyle('B'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getStyle('F'.$row2.':G'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getStyle('F'.$row3)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
			$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
			$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
			$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
			$filename = 'ledger_' . date('Y_m_d_H_i_s');
			if ($xls) {
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
				header('Cache-Control: max-age=0');
				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				return $objWriter->save('php://output');
			}
			redirect($_SERVER["HTTP_REFERER"]);	
		}

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('ledger_by_customer')));
        $meta = array('page_title' => lang('ledger_by_customer'), 'bc' => $bc);
        $this->page_construct('reports/ledger_by_customer', $meta, $this->data);
    }

    function getLedger()
    {
        $this->erp->checkPermissions('register', TRUE);
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
    }

    function cash_books($pdf = NULL,$biller_id = NULL, $xls = NULL)
    {
        $this->erp->checkPermissions('cash_book',NULL,'account_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
		$this->data['users'] = $this->reports_model->getStaff();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
			$this->data['start_date2'] = $this->erp->fsd($this->input->post('start_date'));
			
        } else {
            $dt = "Till " . $this->input->post('end_date');
			$this->data['start_date2'] = date('Y-m-01');
			
        }
		if($this->input->post('end_date')){
			$this->data['end_date2'] = $this->erp->fsd($this->input->post('end_date'));
		}else{
			$this->data['end_date2'] =  date('Y-m-t');
		}
		if($this->input->post('user')){			
			$this->data['cashier'] = $this->input->post('user');
		}else{
			$this->data['cashier'] = '';
		}
		$user = $this->site->getUser();
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
				$biller_id = $user->biller_id;
			}else{
				$this->data['biller_id'] = $user->biller_id;
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		
		if ($pdf != NULL && $biller_id == NULL) {
            $html = $this->load->view($this->theme . 'reports/cash_books', $this->data, true);
            $name = lang("cash_books") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_cash_books_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
		
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('Cash_Books_Report')));
        $meta = array('page_title' => lang('Cash_Books_Report'), 'bc' => $bc);
        $this->page_construct('reports/cash_books', $meta, $this->data);
    
		if($xls){
			
			$styleArray = array(
				'font'  => array(
					'bold'  => true,
					'color' => array('rgb' => '000000'),
					'size'  => 10,
					'name'  => 'Verdana'
				)
			);
			$bold = array(
				'font' => array(
					'bold' => true
				)
			);
			
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($styleArray);
			$this->excel->getActiveSheet()->setTitle(lang('Cash Book Statement'));
			$this->excel->getActiveSheet()->SetCellValue('A1', lang('Batch'));
			$this->excel->getActiveSheet()->SetCellValue('B1', lang('Reference'));
			$this->excel->getActiveSheet()->SetCellValue('C1', lang('Seq'));
			$this->excel->getActiveSheet()->SetCellValue('D1', lang('Description'));
			$this->excel->getActiveSheet()->SetCellValue('E1', lang('Date'));
			$this->excel->getActiveSheet()->SetCellValue('F1', lang('Type'));
			$this->excel->getActiveSheet()->SetCellValue('G1', lang('Debit_Amount'));
			$this->excel->getActiveSheet()->SetCellValue('H1', lang('Credit_Amount'));
			
			$this->excel->getActiveSheet()->getStyle('E2:F2')->applyFromArray($bold);
			$this->excel->getActiveSheet()->getStyle('G2:H2')->applyFromArray($bold);
			
			if ($this->input->post('start_date') || $this->input->post('end_date') || (!$this->input->post('end_date') && !$this->input->post('end_date'))) {
					
				$accounntCode = $this->db;
				$accounntCode->select('*')->from('gl_charts')->where('bank', 1);
				if ($this->input->post('account') ) {
					$accounntCode->where('accountcode', $this->input->post('account'));
				}
				
				$acc = $accounntCode->get()->result();
				
				foreach($acc as $val){
					
					$gl_tranStart = $this->db->select('sum(amount) as startAmount')->from('gl_trans');
					$gl_tranStart->where(array('tran_date < '=> $this->erp->fld($this->input->post('start_date')), 'account_code'=> $val->accountcode));
					$startAmount = $gl_tranStart->get()->row();
					
					$endAccountBalance = 0;
					$getListGLTran = $this->db->select("*")->from('gl_trans')->where('account_code =', $val->accountcode);
					if ($this->input->post('start_date')) {
						$getListGLTran->where('tran_date >=', $this->erp->fld($this->input->post('start_date')) );
					}

					if ($this->input->post('end_date')) {
						$getListGLTran->where('tran_date <=', $this->erp->fld($this->input->post('end_date')) );
					}
					if (!$this->input->post('end_date') && !$this->input->post('end_date'))
					{
						$current_month = date('m');
						$getListGLTran->where('MONTH(tran_date)', $current_month);
					}
					if($biller_id != "" && $biller_id != NULL && $biller_id != 0){
						$getListGLTran->where('biller_id', $biller_id);
					}
					$gltran_list = $getListGLTran->get()->result();
					
					$acc_name = "";
					$start_amount = 0;
					
					if($gltran_list) {
						$acc_name = $val->accountcode . ' ' .$val->accountname;
						$start_amount = $this->erp->formatMoney($startAmount->startAmount);
						
						$this->excel->getActiveSheet()->mergeCells('A2:B2:C2:D2')->setCellValue('A2' , "Account ".$acc_name);
						$this->excel->getActiveSheet()->mergeCells('E2:F2')->setCellValue('E2' , lang('Begining Balance: '));
						$this->excel->getActiveSheet()->mergeCells('G2:H2')->setCellValue('G2' , $start_amount);
					}
					
					
					$row = 3;
					$endAccountBalance = 0;
					foreach($gltran_list as $rw){
						$endAccountBalance += $rw->amount; 
						
						$this->excel->getActiveSheet()->SetCellValue('A'.$row,$rw->tran_id);
						$this->excel->getActiveSheet()->SetCellValue('B'.$row,$rw->reference_no);
						$this->excel->getActiveSheet()->SetCellValue('C'.$row,$rw->tran_no);
						$this->excel->getActiveSheet()->SetCellValue('D'.$row,$rw->narrative);
						$this->excel->getActiveSheet()->SetCellValue('E'.$row,$rw->tran_date);
						$this->excel->getActiveSheet()->SetCellValue('F'.$row, $rw->tran_type);
						$this->excel->getActiveSheet()->SetCellValue('G'.$row,($rw->amount > 0 ? $this->erp->formatMoney($rw->amount) : '0.00'));
						$this->excel->getActiveSheet()->SetCellValue('H'.$row,($rw->amount < 1 ? $this->erp->formatMoney(abs($rw->amount)) : '0.00'));
						$row++;
					}
					$this->excel->getActiveSheet()->mergeCells('A'.($row+1).':B'.($row+1).':C'.($row+1).':D'.($row+1));
					$this->excel->getActiveSheet()->mergeCells('E'.($row+1).':F'.($row+1))->setCellValue('E'.($row+1) , lang('Ending Balance: '));
					$this->excel->getActiveSheet()->mergeCells('G'.($row+1).':H'.($row+1))->setCellValue('G'.($row+1) , $endAccountBalance);
						
				}
				
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
				
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$filename = 'Cash_Books_Report' . date('Y_m_d_H_i_s');
				if ($xls) {
					header('Content-Type: application/vnd.ms-excel');
					header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
					header('Cache-Control: max-age=0');

					$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
					return $objWriter->save('php://output');
				}

				redirect($_SERVER["HTTP_REFERER"]);
				
			}
			
		}
	}
    
    function suspends($warehouse_id = NULL){ 
        $this->load->model('reports_model');
        $this->data['warehouse_id'] = $warehouse_id;
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('report'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('Room_Reports')));
        $meta = array('page_title' => lang('sale_suspend'), 'bc' => $bc);
        $this->page_construct('reports/room_report', $meta, $this->data);
    }

    function getRoom()
    {
        
        $this->load->library('datatables');
        $this->datatables
            ->select("id,floor,name,ppl_number,description, CASE WHEN status = 0 THEN 'Active' ELSE 'Close' END AS status")
            ->from("erp_suspended")
            ->add_column("Actions", "<center><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/view_room_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></center>", "id");
        echo $this->datatables->generate();
    }

    function view_room_report($room_id = NULL, $year = NULL, $month = NULL, $pdf = NULL, $cal = 0)
    {

        if (!$room_id) {
            $this->session->set_flashdata('error', lang("no_room_selected"));
            redirect('reports/suspends');
        }
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['purchases'] = $this->reports_model->getRoomPurchases($room_id);
        $this->data['sales'] = $this->reports_model->getRoomSales($room_id);
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getAllWarehouses();

        if (!$year) {
            $year = date('Y');
        }
        if (!$month || $month == '#monthly-con') {
            $month = date('m');
        }
        if ($pdf) {
            if ($cal) {
                $this->monthly_sales($year, $pdf, $room_id);
            } else {
                $this->daily_sales($year, $month, $pdf, $room_id);
            }
        }
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/view_room_report/'.$room_id),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $config['template'] = '{table_open}<table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
        {heading_row_start}<tr>{/heading_row_start}
        {heading_previous_cell}<th class="text-center"><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
        {heading_title_cell}<th class="text-center" colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
        {heading_next_cell}<th class="text-center"><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
        {heading_row_end}</tr>{/heading_row_end}
        {week_row_start}<tr>{/week_row_start}
        {week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
        {week_row_end}</tr>{/week_row_end}
        {cal_row_start}<tr class="days">{/cal_row_start}
        {cal_cell_start}<td class="day">{/cal_cell_start}
        {cal_cell_content}
        <div class="day_num">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content}
        {cal_cell_content_today}
        <div class="day_num highlight">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content_today}
        {cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
        {cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
        {cal_cell_blank}&nbsp;{/cal_cell_blank}
        {cal_cell_end}</td>{/cal_cell_end}
        {cal_row_end}</tr>{/cal_row_end}
        {table_close}</table>{/table_close}';

        $this->load->library('calendar', $config);
        $sales = $this->reports_model->getRoomDailySales($room_id, $year, $month);

        if (!empty($sales)) {
            foreach ($sales as $sale) {
                $daily_sale[$sale->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang("discount") . "</td><td>" . $this->erp->formatMoney($sale->discount) . "</td></tr><tr><td>" . lang("product_tax") . "</td><td>" . $this->erp->formatMoney($sale->tax1) . "</td></tr><tr><td>" . lang("order_tax") . "</td><td>" . $this->erp->formatMoney($sale->tax2) . "</td></tr><tr><td>" . lang("total") . "</td><td>" . $this->erp->formatMoney($sale->total) . "</td></tr></table>";
            }
        } else {
            $daily_sale = array();
        }
        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
        if ($this->input->get('pdf')) {

        }
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        $this->data['msales'] = $this->reports_model->getRoomMonthlySales($room_id, $year);
        $this->data['user_id'] = $room_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('View_Room_report')));
        $meta = array('page_title' => lang('View_Room_report'), 'bc' => $bc);
        $this->page_construct('reports/view_room_report', $meta, $this->data);

    }
    
	function daily_purchases($warehouse_id = NULL, $year = NULL, $month = NULL, $pdf = NULL, $user_id = NULL)
    {
        $this->erp->checkPermissions('daily',NULL,'purchase_report');
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_id = $this->session->userdata('warehouse_id');
        }
        if (!$year) {
            $year = date('Y');
        }
        if (!$month) {
            $month = date('m');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/daily_purchases/'.($warehouse_id ? $warehouse_id : 0)),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $config['template'] = '{table_open}<div class="table-responsive"><table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
        {heading_row_start}<tr>{/heading_row_start}
        {heading_previous_cell}<th><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
        {heading_title_cell}<th colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
        {heading_next_cell}<th><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
        {heading_row_end}</tr>{/heading_row_end}
        {week_row_start}<tr>{/week_row_start}
        {week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
        {week_row_end}</tr>{/week_row_end}
        {cal_row_start}<tr class="days">{/cal_row_start}
        {cal_cell_start}<td class="day">{/cal_cell_start}
        {cal_cell_content}
        <div class="day_num">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content}
        {cal_cell_content_today}
        <div class="day_num highlight">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content_today}
        {cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
        {cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
        {cal_cell_blank}&nbsp;{/cal_cell_blank}
        {cal_cell_end}</td>{/cal_cell_end}
        {cal_row_end}</tr>{/cal_row_end}
        {table_close}</table></div>{/table_close}';

        $this->load->library('calendar', $config);
        $purchases = $user_id ? $this->reports_model->getStaffDailyPurchases($user_id, $year, $month, $warehouse_id) : $this->reports_model->getDailyPurchases($year, $month, $warehouse_id);

        if (!empty($purchases)) {
            foreach ($purchases as $purchase) {
				$totals = ($purchase->total - $purchase->discount)+ $purchase->shipping + $purchase->tax2;
				
                $daily_purchase[$purchase->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'>
					<tr>
						<td>" . lang("amount") . "</td>
						<td>" . $this->erp->formatMoney($purchase->total) . "</td>
					</tr>
					<tr>
						<td>" . lang("order_discount") . "</td>
						<td>" . $this->erp->formatMoney($purchase->discount) . "</td>
					</tr>
					<tr>
						<td>" . lang("shipping") . "</td>
						<td>" . $this->erp->formatMoney($purchase->shipping) . "</td>
					</tr>
					<tr>
						<td>" . lang("product_tax") . "</td>
						<td>" . $this->erp->formatMoney($purchase->tax1) . "</td>
					</tr>
					<tr>
						<td>" . lang("order_tax") . "</td>
						<td>" . $this->erp->formatMoney($purchase->tax2) . "</td>
					</tr>
					<tr>
						<td>" . lang("total") . "</td>
						<td>" . $this->erp->formatMoney($totals) . "</td>
					</tr>
				</table>";
            }
        } else {
            $daily_purchase = array();
        }

        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_purchase);
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/daily', $this->data, true);
            $name = lang("daily_purchases") . "_" . $year . "_" . $month . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_calendar_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        //$this->erp->print_arrays($warehouse_id);
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse_id;
        $this->data['sel_warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_purchases_report')));
        $meta = array('page_title' => lang('daily_purchases_report'), 'bc' => $bc);

        $this->page_construct('reports/daily_purchases', $meta, $this->data);
    }

    function monthly_purchases($warehouse_id = NULL, $year = NULL, $pdf = NULL, $user_id = NULL)
    {
        $this->erp->checkPermissions('monthly',NULL,'purchase_report');
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_id = $this->session->userdata('warehouse_id');
        }
        if (!$year) {
            $year = date('Y');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        //$this->erp->print_arrays($user_id);
        $this->load->language('calendar');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['year'] = $year;
        $this->data['purchases'] = $user_id ? $this->reports_model->getStaffMonthlyPurchases($user_id, $year, $warehouse_id) : $this->reports_model->getMonthlyPurchases($year, $warehouse_id);
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse_id;
        $this->data['sel_warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('monthly_purchases_report')));
		if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/monthly_purchases', $this->data, true);
            $name = lang("monthly_purchases") . "_" . $year . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_monthly_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $meta = array('page_title' => lang('monthly_purchases_report'), 'bc' => $bc);
        $this->page_construct('reports/monthly_purchases', $meta, $this->data);

    }

    function saleman()
    {
        $this->erp->checkPermissions('saleman',NULL,'sale_report');
        $this->load->model('reports_model');
         $datt =$this->reports_model->getLastDate("sales","date");
        if(isset($_GET['d']) != ""){
            $date = $_GET['d'];
            $this->data['date'] = $date;
        }
			if (!$this->input->POST('start_date')) {
				$this->data['start_date'] = $datt;
			} 
			if (!$this->input->POST('end_date')) {
				$this->data['end_date'] = $datt;
			}
		if($this->Owner || $this->Admin){
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}else{
			$this->data['billers'] = $this->site->getBillerByID($this->session->userdata('biller_id'));
		}
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => 'reports', 'page' => lang('reports')),array('link' => 'reports/saleman', 'page' => lang('saleman_report')));
        $meta = array('page_title' => lang('saleman_report'), 'bc' => $bc);
        $this->page_construct('reports/saleman', $meta, $this->data);
    }
	
    function getSalemans($warehouse_id = NULL)
    {
        
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }

        if ((! $this->Owner || ! $this->Admin) && ! $warehouse_id) {
            $user = $this->site->getUser();
            $warehouse_id = $user->warehouse_id;
        }

        $detail_link = anchor('sales/view/$1', '<i class="fa fa-file-text-o"></i> ' . lang('sale_details'));
        $cabon_print = anchor('sales/cabon_print/$1', '<i class="fa fa-print"></i> ' . lang('print_cabon'), 'target="_blank"');
        $payments_link = anchor('sales/payments/$1', '<i class="fa fa-money"></i> ' . lang('view_payments'), 'data-toggle="modal" data-target="#myModal"');
        $add_payment_link = anchor('sales/add_payment/$1', '<i class="fa fa-money"></i> ' . lang('add_payment'), 'data-toggle="modal" data-target="#myModal"');
        $add_delivery_link = anchor('sales/add_delivery/$1', '<i class="fa fa-truck"></i> ' . lang('add_delivery'), 'data-toggle="modal" data-target="#myModal"');
        $email_link = anchor('sales/email/$1', '<i class="fa fa-envelope"></i> ' . lang('email_sale'), 'data-toggle="modal" data-target="#myModal"');
        $edit_link = anchor('sales/edit/$1', '<i class="fa fa-edit"></i> ' . lang('edit_sale'), 'class="sledit"');
        $pdf_link = anchor('sales/pdf/$1', '<i class="fa fa-file-pdf-o"></i> ' . lang('download_pdf'));
        $return_link = anchor('sales/return_sale/$1', '<i class="fa fa-angle-double-left"></i> ' . lang('return_sale'));
        $delete_link = "<a href='#' class='po' title='<b>" . lang("delete_sale") . "</b>' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . site_url('sales/delete/$1') . "'>"
            . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_sale') . "</a>";
        $action = '<div class="text-center"><div class="btn-group text-left">'
            . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
            . lang('actions') . ' <span class="caret"></span></button>
        <ul class="dropdown-menu pull-right" role="menu">
            <li>' . $detail_link . '</li>
            <li>' . $cabon_print . '</li>
            <li>' . $payments_link . '</li>
            <li>' . $add_payment_link . '</li>
            <li>' . $add_delivery_link . '</li>
            <li>' . $edit_link . '</li>
            <li>' . $pdf_link . '</li>
            <li>' . $email_link . '</li>
            <li>' . $return_link . '</li>
            <li>' . $delete_link . '</li>
        </ul>
    </div></div>';
        $where = "";
        if ($start_date) {
            $where = ' AND ' . $this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"';
        }
        
        $this->datatables
            ->select("username, username, phone, (SELECT sum(total) FROM sales s WHERE s.saleman_by = u.id $where) as sale_amount, (SELECT sum(paid) FROM sales s WHERE s.saleman_by = u.id ) as sale_amount, ((SELECT sum(total) - sum(paid)) FROM sales s WHERE s.saleman_by = u.id $where) as balance")
            ->from('users u');

        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }

    function saleman_detail()
    {
        if($this->input->post('start_date')){
            $start_date =  $this->erp->fld($this->input->post('start_date'));
            $this->data['start_date2'] = trim($start_date);
        }else{
            $start_date =null;
            $this->data['start_date2'] = 0;
        }
        
        if($this->input->post('end_date')){
            $end_date = $this->erp->fld($this->input->post('end_date'));
            $this->data['end_date2'] = trim($end_date);
        }else{
            $end_date = null;
            $this->data['end_date2'] = 0;
        }
        
        if($this->input->post('saleman')){
            $saleman = $this->input->post('saleman');
            $this->data['saleman2'] = $saleman;
        }else{
            $saleman = null;
            $this->data['saleman2'] = 0;
        }

        if($this->input->post('sales_type')){
            $sales_type = $this->input->post('sales_type');
            $this->data['sales_type2'] = $sales_type;
        }else{
            $sales_type = null;
            $this->data['sales_type2'] = 0;
        }

        if($this->input->post('issued_by')){
            $issued_by = $this->input->post('issued_by');
            $this->data['issued_by2'] = $issued_by;
        }else{
            $issued_by = null;
            $this->data['issued_by2'] = 0;
        }
        
        $cust_data[] = "";
        $salemans = $this->reports_model->getSaleman();
        
        $this->data['salemans'] = $salemans;
        $this->data['agencies'] = $this->site->getAllUsers();

        $bc = array( array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')),array('link' => '#', 'page' => lang('saleman_detail_report')) );
        $meta = array('page_title' => lang('saleman_detail_report'), 'bc' => $bc);
        $this->page_construct('reports/saleman_detail', $meta, $this->data);
    }

    function saleman_detail_action()
    {

        if ($this->input->post('form_action') == 'excel' || $this->input->post('form_action') == 'pdf') {

            $start_date2 = $this->input->post('start_date2');
            $end_date2 = $this->input->post('end_date2');
            $saleman2 = $this->input->post('saleman2');
            $sales_type2 = $this->input->post('sales_type2');
            $issued_by2 = $this->input->post('issued_by2');

            $saleman_data[] = "";
            $salemans = $this->reports_model->getSaleman();
            $i=0;
            
            foreach($salemans as $saleman){
                $salemanDatas = $this->reports_model->getSalemanReportDetail($saleman->id, $start_date2, $end_date2, $saleman2, $sales_type2, $issued_by2);
                foreach($salemanDatas as $salemanData){
                    $saleman_data[$i] = array(
                                    "username" => $saleman->username,
                                    "salemanDatas" => array(
                                                        "salemanDetailData" => $salemanDatas
                                                        )
                                    );
                }
                $i++;
            }
                
            if (!empty($saleman_data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('Saleman List'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('due_date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('issued_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('sale_status'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('return'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('deposit'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('payment_status'));
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => 'FFFFFF'),
                    ),
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => '428bca')
                    )
                );
                    
                $this->excel->getActiveSheet()->getStyle('A1:N1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A1:N1')->getFont()
                                              ->setName('Times New Roman')
                                              ->setSize(12);
                $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(30);
                $this->excel->getActiveSheet()->getStyle('A1:N1')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('A1:N1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);


                $row = 2;
            
                foreach ($saleman_data as $saleman_data_row) {
                    if ($saleman_data_row != '') {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, "Saleman >> ". ucwords($saleman_data_row["username"]));
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':N'.$row);

                    $styleArray = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => '000000'),
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'dff0d8')
                        )
                    );
                        
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()
                                                  ->setName('Times New Roman')
                                                  ->setSize(11);
                    $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                    $total_sale = 0;
                    $total_return_sale = 0;
                    $total_paid = 0;
                    $total_deposit = 0;
                    $total_discount = 0;
                    $total_balance = 0;

                    foreach ($saleman_data_row['salemanDatas']['salemanDetailData'] as $value) {
                        $row++;

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($value->date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $value->due_date ? $this->erp->hrld($value->due_date) : '');
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $value->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $value->biller);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $value->customer);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $value->note);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, ucwords($value->sale_status));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $value->grand_total);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $value->return_sale);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $value->paid);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $value->deposit);
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $value->discount);
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $value->balance);
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, ucwords($value->payment_status));

                        $this->excel->getActiveSheet()->getStyle('A'. $row .':N'. $row)->getFont()
                                                      ->setName('Times New Roman')
                                                      ->setSize(11);
                        $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);
                        $this->excel->getActiveSheet()->getStyle('A'. $row .':N'. $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                        $this->excel->getActiveSheet()->getStyle('G'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('N'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                        $total_sale += $value->grand_total;
                        $total_return_sale += $value->return_sale;
                        $total_paid += $value->paid;
                        $total_deposit += $value->deposit;
                        $total_discount += $value->discount;
                        $total_balance += $value->grand_total - $value->paid;

                   }

                    $row++;

                    $this->excel->getActiveSheet()->mergeCells('A'. $row .':F'. $row);
                    $this->excel->getActiveSheet()->getStyle('N'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_NONE);
                    $this->excel->getActiveSheet()->getStyle('N'. $row)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border:: BORDER_NONE);
                    $this->excel->getActiveSheet()->getStyle('N'. $row)->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border:: BORDER_NONE);
                    $this->excel->getActiveSheet()->getStyle('N'. $row)->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border:: BORDER_NONE);
                     
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, 'Total >>');
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($total_sale));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatMoney($total_return_sale));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->erp->formatMoney($total_paid));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatMoney($total_deposit));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->erp->formatMoney($total_discount));
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->erp->formatMoney($total_balance));

                    $this->excel->getActiveSheet()->getStyle('G'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                    if($this->input->post('form_action') == 'excel'){
                        $this->excel->getActiveSheet()->getStyle('G' . $row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('H' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('H' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('I' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('I' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('J' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('J' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('K' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('K' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('L' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('L' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('M' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('M' . $row.'')->getFont()->setBold(true);
                    }

                    $row++; 
                    }
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(18);
                $filename = lang('ar_by_customer');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                if ($this->input->post('form_action') == 'pdf') {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    // $this->excel->getDefaultStyle()->applyFromArray($styleArray);

                    

                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }

                if ($this->input->post('form_action') == 'excel') {

                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                    $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                    $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                    $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                    //Margins:
                    $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                    $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                    $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.25);
                    $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');

                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }

            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        }
    }

    function saleman_report_action($saleman_id)
    {
        if ($this->input->post('form_action') == 'excel' || $this->input->post('form_action') == 'pdf') {

            $start_date = $this->input->post('start_date');
            $end_date = $this->input->post('end_date');
            $sales_type = $this->input->post('sales_type');
            $issued_by = $this->input->post('issued_by');

            $salemans = $this->reports_model->getSaleman($saleman_id);
            $salemanDatas = $this->reports_model->getSalemanReportDetailForEx($saleman_id, $start_date, $end_date, $sales_type, $issued_by);

            if (!empty($salemans)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('Saleman List'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('due_date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('issued_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('sale_status'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('return'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('deposit'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('payment_status'));
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => 'FFFFFF'),
                    ),
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => '428bca')
                    )
                );
                    
                $this->excel->getActiveSheet()->getStyle('A1:N1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A1:N1')->getFont()
                                              ->setName('Times New Roman')
                                              ->setSize(12);
                $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(30);
                $this->excel->getActiveSheet()->getStyle('A1:N1')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('A1:N1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);


                $row = 2;

                foreach ($salemans as $saleman) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, "Saleman >> ". ucwords($saleman->username));
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':N'.$row);

                    $styleArray = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => '000000'),
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'dff0d8')
                        )
                    );
                        
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()
                                                  ->setName('Times New Roman')
                                                  ->setSize(11);
                    $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                }
                    $total_sale = 0;
                    $total_return_sale = 0;
                    $total_paid = 0;
                    $total_deposit = 0;
                    $total_discount = 0;
                    $total_balance = 0;

                    foreach ($salemanDatas as $value) {
                        $row++;

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($value->date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $value->due_date ? $this->erp->hrld($value->due_date) : '');
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $value->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $value->biller);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $value->customer);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $value->note);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, ucwords($value->sale_status));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $value->grand_total);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $value->return_sale);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $value->paid);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $value->deposit);
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $value->discount);
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $value->balance);
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, ucwords($value->payment_status));

                        $this->excel->getActiveSheet()->getStyle('A'. $row .':N'. $row)->getFont()
                                                      ->setName('Times New Roman')
                                                      ->setSize(11);
                        $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);
                        $this->excel->getActiveSheet()->getStyle('A'. $row .':N'. $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                        $this->excel->getActiveSheet()->getStyle('G'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('N'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                        $total_sale += $value->grand_total;
                        $total_return_sale += $value->return_sale;
                        $total_paid += $value->paid;
                        $total_deposit += $value->deposit;
                        $total_discount += $value->discount;
                        $total_balance += $value->grand_total - $value->paid;

                   }

                    $row++;

                    $this->excel->getActiveSheet()->mergeCells('A'. $row .':F'. $row);
                    $this->excel->getActiveSheet()->getStyle('N'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_NONE);
                    $this->excel->getActiveSheet()->getStyle('N'. $row)->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border:: BORDER_NONE);
                    $this->excel->getActiveSheet()->getStyle('N'. $row)->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border:: BORDER_NONE);
                    $this->excel->getActiveSheet()->getStyle('N'. $row)->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border:: BORDER_NONE);

                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, 'Total >>');
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($total_sale));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatMoney($total_return_sale));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->erp->formatMoney($total_paid));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatMoney($total_deposit));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->erp->formatMoney($total_discount));
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->erp->formatMoney($total_balance));

                    $this->excel->getActiveSheet()->getStyle('G'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                    if($this->input->post('form_action') == 'excel'){               
                        $this->excel->getActiveSheet()->getStyle('G' . $row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('H' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('H' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('I' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('I' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('J' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('J' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('K' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('K' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('L' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('L' . $row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('M' . $row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('M' . $row.'')->getFont()->setBold(true);
                    }      
                

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(12);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(18);
                $filename = lang('ar_by_customer');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                if ($this->input->post('form_action') == 'pdf') {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    // $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }

                if ($this->input->post('form_action') == 'excel') {

                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                    $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                    $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                    $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                    //Margins:
                    $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                    $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                    $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.25);
                    $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');

                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }

            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        }
    }
	
	function warehouse_reports()
	{
		$this->erp->checkPermissions('warehouse',NULL,'product_report');
        if ($this->input->post('product')) {
            $product = $this->input->post('product');
        } else {
            $product = NULL;
        }
		
        if ($this->input->post('category')) {
            $category = $this->input->post('category');
        } else {
            $category = NULL;
        }
		
        if ($this->input->post('start_date')) {
            $start_date = $this->input->post('start_date');
        } else {
            $start_date = NULL;
        }
		
        if ($this->input->post('end_date')) {
            $end_date = $this->input->post('end_date');
        } else {
            $end_date = NULL;
        }
		
		if ($this->input->post('supplier')) {
            $supplier = $this->input->post('supplier');
        } else {
            $supplier = NULL;
        }
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
		$this->data['suppliers'] = $this->site->getAllSuppliers();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
        $this->data['warehouse'] = $this->reports_model->getAllWarehouses();
		
		$this->data['wreport'] = $this->reports_model->getReportW($product, $category, $supplier, $start_date, $end_date); 
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('warehouse_reports')));
        $meta = array('page_title' => lang('warehouse_reports'), 'bc' => $bc);
		
        $this->page_construct('reports/warehouse_products', $meta, $this->data);
	}
	
	function getwarehousereports($pdf = NULL, $xls = NULL)
	{
		
        $this->erp->checkPermissions('products', TRUE);
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
        
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = NULL;
        }
        if ($this->input->get('in_out')) {
            $in_out = $this->input->get('in_out');
        } else {
            $in_out = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
		if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
			$where_sale='where si.warehouse_id='.$warehouse;
			$where_purchase="where {$this->db->dbprefix('purchase_items')}.warehouse_id=".$warehouse . "AND {$this->db->dbprefix('purchase_items')}.status <> 'ordered'";
        } else {
            $warehouse = NULL;
			$where_purchase = "where 1=1 AND {$this->db->dbprefix('purchase_items')}.status <> 'ordered' AND {$this->db->dbprefix('purchase_items')}.purchase_id != ''";
			$where_sale='where 1=1';
        }
        $ware = $this->reports_model->getAllWarehouses();
		if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $end_date ? $this->erp->fld($end_date) : date('Y-m-d');

            $pp = "( SELECT pi.product_id, 
						SUM( pi.quantity * (CASE WHEN pi.option_id <> 0 THEN pi.vqty_unit ELSE 1 END) ) purchasedQty, 
						SUM( tpi.quantity_balance ) balacneQty, 
						SUM((CASE WHEN pi.option_id <> 0 THEN pi.vcost ELSE pi.unit_cost END) *  tpi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * pi.quantity ) totalPurchase, 
                        SUM(pi.unit_cost) AS totalCost,
						SUM(pi.quantity) AS Pquantity,
						pi.date as pdate 
						FROM ( SELECT {$this->db->dbprefix('purchase_items')}.date as date, 
									{$this->db->dbprefix('purchase_items')}.product_id, 
									purchase_id, 
									SUM({$this->db->dbprefix('purchase_items')}.quantity) as quantity, 
									unit_cost,
									option_id,
									ppv.qty_unit AS vqty_unit,
									ppv.cost AS vcost,
									ppv.quantity AS vquantity 
									FROM erp_purchase_items 
									JOIN {$this->db->dbprefix('products')} p 
									ON p.id = {$this->db->dbprefix('purchase_items')}.product_id 
									LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
									ON ppv.id={$this->db->dbprefix('purchase_items')}.option_id  
									WHERE {$this->db->dbprefix('purchase_items')}.date >= '{$start_date}' AND {$this->db->dbprefix('purchase_items')}.date < '{$end_date}' 
									GROUP BY {$this->db->dbprefix('purchase_items')}.product_id ) pi 
						LEFT JOIN ( SELECT product_id, 
										SUM(quantity_balance) as quantity_balance 
										FROM {$this->db->dbprefix('purchase_items')} 
										GROUP BY product_id ) tpi on tpi.product_id = pi.product_id 
						GROUP BY pi.product_id ) PCosts";

			$sp = "( SELECT si.product_id, 
						SUM( si.quantity*(CASE WHEN si.option_id <> 0 THEN spv.qty_unit ELSE 1 END)) soldQty, 
						SUM( si.subtotal ) totalSale, 
						SUM( si.quantity) AS Squantity,
						s.date as sdate
						FROM " . $this->db->dbprefix('sales') . " s 
						JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " spv 
						ON spv.id=si.option_id
						WHERE s.date >= '{$start_date}' AND s.date < '{$end_date}' 
						GROUP BY si.product_id ) PSales";

			$ppb = "( SELECT pi.product_id, 
						SUM( pi.quantity ) purchasedQty, 
						SUM( tpi.quantity_balance ) balacneQty, 
						SUM( (CASE WHEN pi.option_id <> 0 THEN pi.vcost ELSE pi.unit_cost END) *  tpi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * pi.quantity ) totalPurchase, 
						pi.date as pdate 
						FROM ( SELECT {$this->db->dbprefix('purchase_items')}.date as date, 
									{$this->db->dbprefix('purchase_items')}.product_id, 
									purchase_id, 
									SUM({$this->db->dbprefix('purchase_items')}.quantity) as quantity, 
									unit_cost,
									option_id,
									ppv.qty_unit AS vqty_unit,
									ppv.cost AS vcost,
									ppv.quantity AS vquantity 
									FROM erp_purchase_items 
									JOIN {$this->db->dbprefix('products')} p 
									ON p.id = {$this->db->dbprefix('purchase_items')}.product_id 
									LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
									ON ppv.id={$this->db->dbprefix('purchase_items')}.option_id  
									WHERE {$this->db->dbprefix('purchase_items')}.date < '{$start_date}'
									GROUP BY {$this->db->dbprefix('purchase_items')}.product_id ) pi 
						LEFT JOIN ( SELECT product_id, 
										SUM(quantity_balance) as quantity_balance 
										FROM {$this->db->dbprefix('purchase_items')} 
										GROUP BY product_id ) tpi on tpi.product_id = pi.product_id GROUP BY pi.product_id ) PCostsBegin";
            
			$spb = "( SELECT si.product_id, 
						SUM( si.quantity*(CASE WHEN si.option_id <> 0 THEN spv.qty_unit ELSE 1 END)) saleQty, 
						SUM( si.subtotal ) totalSale, 
						SUM( si.quantity) AS Squantity,
						s.date as sdate
						FROM " . $this->db->dbprefix('sales') . " s 
						JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " spv 
						ON spv.id=si.option_id
						WHERE s.date < '{$start_date}'
						GROUP BY si.product_id ) PSalesBegin";
        } 
		else {
			$current_date = date('Y-m-d');
			$prevouse_date = date('Y').'-'.date('m').'-'.'01';
			$pp = "( SELECT pi.product_id, 
						SUM( pi.quantity * (CASE WHEN pi.option_id <> 0 THEN pi.vqty_unit ELSE 1 END) ) purchasedQty, 
						SUM( tpi.quantity_balance ) balacneQty, 
						SUM( (CASE WHEN pi.option_id <> 0 THEN pi.vcost ELSE pi.unit_cost END) *  tpi.quantity_balance ) balacneValue, 
						SUM( pi.unit_cost * pi.quantity ) totalPurchase, 
                        SUM(pi.unit_cost) AS totalCost,
						SUM(pi.quantity) AS Pquantity,
						pi.date as pdate 
						FROM ( SELECT {$this->db->dbprefix('purchase_items')}.date as date, 
									{$this->db->dbprefix('purchase_items')}.product_id, 
									purchase_id, 
									SUM({$this->db->dbprefix('purchase_items')}.quantity) as quantity, 
									unit_cost ,
									option_id,
									ppv.qty_unit AS vqty_unit,
									ppv.cost AS vcost,
									ppv.quantity AS vquantity
									FROM {$this->db->dbprefix('purchase_items')} 
									JOIN {$this->db->dbprefix('products')} p 
									ON p.id = {$this->db->dbprefix('purchase_items')}.product_id 
									LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
									ON ppv.id={$this->db->dbprefix('purchase_items')}.option_id  
									".$where_purchase." 
									GROUP BY {$this->db->dbprefix('purchase_items')}.product_id ) pi 			
						LEFT JOIN ( SELECT product_id, 
										SUM(quantity_balance) as quantity_balance 
										FROM {$this->db->dbprefix('purchase_items')} GROUP BY product_id 
									) tpi on tpi.product_id = pi.product_id GROUP BY pi.product_id ) PCosts";

			$sp = "( SELECT si.product_id, 
						COALESCE(SUM( si.quantity*(CASE WHEN si.option_id <> 0 THEN spv.qty_unit ELSE 1 END)),0) soldQty, 
						SUM( si.subtotal ) totalSale, 
						SUM( si.quantity) AS Squantity,
						s.date as sdate
						FROM " . $this->db->dbprefix('sales') . " s 
						JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " spv 
						ON spv.id=si.option_id
						".$where_sale."
						GROUP BY si.product_id ) PSales";

			
			$ppb = "( SELECT pi.product_id, 
						SUM(pi.quantity) AS purchasedQty, 
						SUM( tpi.quantity_balance ) balacneQty, 
						SUM( (CASE WHEN pi.option_id <> 0 THEN pi.vcost ELSE pi.unit_cost END) * tpi.quantity_balance ) balacneValue, 
						SUM(pi.unit_cost * pi.quantity) totalPurchase, 
						pi.date as pdate 
						FROM ( SELECT {$this->db->dbprefix('purchase_items')}.date as date, 
									{$this->db->dbprefix('purchase_items')}.product_id, 
									purchase_id, 
									SUM({$this->db->dbprefix('purchase_items')}.quantity) as quantity, 
									unit_cost ,
									option_id,
									ppv.qty_unit AS vqty_unit,
									ppv.cost AS vcost,
									ppv.quantity AS vquantity
									FROM {$this->db->dbprefix('purchase_items')} 
									JOIN {$this->db->dbprefix('products')} p 
									ON p.id = {$this->db->dbprefix('purchase_items')}.product_id 
									LEFT JOIN " . $this->db->dbprefix('product_variants') . " ppv 
									ON ppv.id={$this->db->dbprefix('purchase_items')}.option_id  
									".$where_purchase." 
									AND {$this->db->dbprefix('purchase_items')}.date < '{$prevouse_date}' 
									GROUP BY {$this->db->dbprefix('purchase_items')}.product_id ) pi 			
						LEFT JOIN ( SELECT product_id, 
										SUM(quantity_balance) as quantity_balance 
										FROM {$this->db->dbprefix('purchase_items')} 
										GROUP BY product_id ) tpi on tpi.product_id = pi.product_id GROUP BY pi.product_id ) PCostsBegin";
			
            $spb = "( SELECT si.product_id, 
						COALESCE(SUM( si.quantity*(CASE WHEN si.option_id <> 0 THEN spv.qty_unit ELSE 1 END)),0) saleQty, 
						SUM( si.subtotal ) totalSale, 
						SUM( si.quantity) AS Squantity,
						s.date as sdate
						FROM " . $this->db->dbprefix('sales') . " s 
						JOIN " . $this->db->dbprefix('sale_items') . " si 
						ON s.id = si.sale_id 
						LEFT JOIN " . $this->db->dbprefix('product_variants') . " spv 
						ON spv.id=si.option_id
						".$where_sale."
						AND s.date < '{$prevouse_date}'
						GROUP BY si.product_id ) PSalesBegin";
        }
		
        if ($pdf || $xls) {
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->db
                ->select($this->db->dbprefix('products') . ".code, supplier1, " . $this->db->dbprefix('products') . ".name,
				COALESCE( PCosts.purchasedQty, 0 ) as PurchasedQty,
				COALESCE( PSales.soldQty, 0 ) + COALESCE (
                        (
                            SELECT
                                SUM(si.quantity * ci.quantity)
                            FROM
                                erp_combo_items ci
                            INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
                            WHERE
                                ci.item_code = ".$this->db->dbprefix('products') . ".code
                        ),
                        0
                    ) as SoldQty,
				PWarehouse.quantity_balance,
				COALESCE (COALESCE (
						PCostsBegin.totalPurchase - PSalesBegin.totalSale,
						0
					)+COALESCE (PCosts.purchasedQty, 0)-COALESCE (PSales.soldQty, 0)- COALESCE (
                        (
                            SELECT
                                SUM(si.quantity * ci.quantity)
                            FROM
                                erp_combo_items ci
                            INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
                            WHERE
                                ci.item_code = ".$this->db->dbprefix('products') . ".code
                        ),
                        0
                    )) as BalacneQty", FALSE)
                ->from('products')
				->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
				->join($spb, 'products.id = PSalesBegin.product_id', 'left')
                ->join($ppb, 'products.id = PCostsBegin.product_id', 'left')
				->join('warehouses_products wp', 'products.id=wp.product_id', 'left')
				->join('categories', 'products.category_id=categories.id', 'left')
				->group_by("products.id");

			if ($supplier) {
                $this->datatables->where("products.supplier1 = '".$supplier."' or products.supplier2 = '".$supplier."' or products.supplier3 = '".$supplier."' or products.supplier4 = '".$supplier."' or products.supplier5 = '".$supplier."'");
            }else{
				$this->db->where("COALESCE( PCosts.purchasedQty, 0 ) > 0 OR COALESCE( PSales.soldQty, 0 ) > 0");
			}
			
            if ($product) {
                $this->db->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . ".category_id", $category);
            }
			
			if ($warehouse) {
                $this->db->where('wp.warehouse_id', $warehouse);
                $this->db->where('wp.quantity !=', 0);
            }
            
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('balance'));

                $row = 2;
                $sQty = 0;
                $pQty = 0;
                $bQty = 0;
                $pl = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->BalacneQty);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $bQty += $data_row->BalacneQty;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $bQty);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);

                $filename = 'products_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } 
		else {
			$detail_sale = anchor('reports/view_sale_detail_in_out/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Sale_detail'), 'data-toggle="modal" data-target="#myModal"');
			$detail_purchase = anchor('reports/view_purchase_detail_in_out/$1', '<i class="fa fa-file-text-o"></i> ' . lang('Purchase_detail'), 'data-toggle="modal" data-target="#myModal"');
					
			$action = '<div class="text-center"><div class="btn-group text-left">'
			. '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
			. lang('actions') . ' <span class="caret"></span></button>
			<ul class="dropdown-menu pull-right" role="menu">
				<li>' . $detail_purchase . '</li>
				<li>' . $detail_sale . '</li>					
			<ul>
			</div></div>';
            $this->load->library('datatables');
            $this->db->query('SET SQL_BIG_SELECTS=1');
            $this->datatables
                ->select($this->db->dbprefix('products') . ".code as product_code, 
				" . $this->db->dbprefix('products') . ".name,
				CONCAT(COALESCE( PCostsBegin.purchasedQty-PSalesBegin.saleQty, 0 ), '__', COALESCE( PCostsBegin.totalPurchase-PSalesBegin.totalSale, 0 )) as BeginPS,
				CONCAT(
                    COALESCE (PCosts.Pquantity, 0),
                    '__',
                    COALESCE (
                        PCosts.totalCost,
                        0
                    )) AS purchased,
				COALESCE( PSales.Squantity, 0 ) + COALESCE (
                        (
                            SELECT
                                SUM(si.quantity * ci.quantity)
                            FROM
                                ".$this->db->dbprefix('combo_items') . " ci
                            INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
                            WHERE
                                ci.item_code = ".$this->db->dbprefix('products') . ".code
                        ),
                        0
                    ) as sold,
				COALESCE (COALESCE (
						PCostsBegin.purchasedQty-PSalesBegin.saleQty,
						0
					)+COALESCE (PCosts.Pquantity, 0) - COALESCE( PSales.Squantity , 0 ) -  COALESCE (
                        (
                            SELECT
                                SUM(si.quantity * ci.quantity)
                            FROM
								".$this->db->dbprefix('combo_items') . " ci
                            INNER JOIN erp_sale_items si ON si.product_id = ci.product_id
                            WHERE
                                ci.item_code = ".$this->db->dbprefix('products') . ".code
                        ),
                        0
                    ) ) AS balance", 
				FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
				->join($spb, 'products.id = PSalesBegin.product_id', 'left')
                ->join($ppb, 'products.id = PCostsBegin.product_id', 'left')
				->join('warehouses_products wp', 'products.id=wp.product_id', 'left')
				->join('categories', 'products.category_id=categories.id', 'left')
				->group_by("products.id");
            
			if ($supplier) {
				$this->datatables->where("products.supplier1 = '".$supplier."' or products.supplier2 = '".$supplier."' or products.supplier3 = '".$supplier."' or products.supplier4 = '".$supplier."' or products.supplier5 = '".$supplier."'");
            }else{
				//$this->datatables->where("COALESCE( PCosts.purchasedQty, 0 ) > 0 OR COALESCE( PSales.soldQty, 0 ) > 0");
			}
			
            if($in_out){
                if($in_out == 'in'){
                    $this->datatables->order_by('PCosts.purchasedQty', 'DESC');
                }else if($in_out == 'out'){
                    $this->datatables->order_by('PSales.soldQty', 'DESC');
                }
            }
            
            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . ".category_id", $category);
            }
			
			if ($warehouse) {
                $this->datatables->where('wp.warehouse_id', $warehouse);
                $this->datatables->where('wp.quantity !=', 0);
            }


			$this->datatables->add_column("Actions", $action, "product_code");
            echo $this->datatables->generate();

        }
    
	}
	
	function in_out_actions()
	{
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {
			
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('product_in_out'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('begin'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('in'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('out'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('balance'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getInOutByID($id);
						//$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->product_code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->BeginPS);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->purchased);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->sold);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->balance);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'product_in_out_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function room_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('room_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('floor'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('room_number'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('people'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('description'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('status'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getRoomByID($id);
						//$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->floor);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->ppl_number);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->description);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->status);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'room_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function saleman_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('saleman_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('sale_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('saleman_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('amount'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('balance'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
						
                        $sc = $this->reports_model->getSalemanByID($id);
						//$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->username);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->username);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->phone);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->sale_amount);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->sale_paid);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->balance);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'saleman_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function purchases_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('purchases_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('grand_total'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('balacne'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('status'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('create_by'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
						
                        $sc = $this->reports_model->getPurchasesByID($id);
						//$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->date);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->wname);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->supplier);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->grand_total);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->paid);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $sc->balance);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $sc->status);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $sc->create_by);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'purchases_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_purchases_report_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function payments_actions($id)
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                    
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_ref'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_ref'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('purchases_ref'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('note'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('paid_by'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('amount'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('type'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('create_by'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getPaymentsByID($id);
						//$this->erp->print_arrays($sc);
                  
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->date);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->payment_ref);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->sale_ref);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->purchase_ref);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->note);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->paid_by);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sc->amount);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $sc->type);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $sc->create_by);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'payments_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function sales_discount_actions($id)
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('sales_discount_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('cost'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('unit_price'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('quantity'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('discount'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getSaleDiscountByID($id);
						//$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->date);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->product_code);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->product_name);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->customer);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->cost);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->unit_price);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $sc->quantity);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $sc->discount);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'sales_discount_report' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function profit_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                   $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('sale_profit_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('suspend'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('cost'));
                    $this->excel->getActiveSheet()->SetCellValue('J1', lang('over_head'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('profits'));
					$this->excel->getActiveSheet()->SetCellValue('L1', lang('status'));
                     $styleArray = array(
                        'font'  => array(
                            'bold'  => true
                        )
                    );
                    
                    $this->excel->getActiveSheet()->getStyle('A1:L1')->applyFromArray($styleArray);

                    $row            = 2;
                    $sum_grand      = 0;
                    $sum_paid       = 0;
                    $sum_balance    = 0;
                    $sum_cost       = 0;
                    $sum_amount     = 0;
                    $sum_profit     = 0;
                    foreach ($_POST['val'] as $id) {
                        // echo $id;exit();
                        $sc = $this->reports_model->getProfitByID($id);
                        if($sc->amount == null){
                            $sc->amount = 0;
                        }
						//$this->erp->print_arrays($sc);
                        $sum_grand += $sc->grand_total;
                        $sum_paid += $sc->paid;
                        $sum_balance += $sc->balance;
                        $sum_cost += $sc->total_cost;
                        $sum_amount += $sc->amount;
                        $sum_profit += $sc->profit;

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->date);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->reference_no." ");
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->suspend_note);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->biller);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->customer);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->grand_total);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $sc->paid);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $sc->balance);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatMoney($sc->total_cost));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $sc->amount);
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatMoney($sc->profit));
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $sc->payment_status);
                        $new_row = $row+1;
                        $this->excel->getActiveSheet()->SetCellValue('F' . $new_row,$sum_grand);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $new_row,$sum_paid);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $new_row,$sum_balance);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $new_row,$this->erp->formatMoney($sum_cost));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $new_row,$sum_amount);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $new_row,$this->erp->formatMoney($sum_profit));

                        $this->excel->getActiveSheet()->getStyle('F'. $row.':K'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle('L'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(10);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'sale_profit_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $this->excel->getActiveSheet()->getStyle('F' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('F' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('G' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('G' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('H' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('H' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('I' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('I' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('J' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('J' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('K' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('K' . $new_row.'')->getFont()->setBold(true);

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function shops_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('shops_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('email_address'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('total_earned'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getShopsByID($id);
						//$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->company);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->phone);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->email);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->total);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->total_amount);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $sc->total_earned);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $sc->paid);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $sc->balance);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'shops_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function suppliers_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('suppliers_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('email_address'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('total_purchases'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('create_by'));
                     $styleArray = array(
                        'font'  => array(
                            'bold'  => true
                        )
                    );
                    
                    $this->excel->getActiveSheet()->getStyle('A1:I1')->applyFromArray($styleArray);
                    $row = 2;
					//$this->erp->print_arrays($_POST['val']);
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getSupplierByID($id);
						//$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->company);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->phone." ");
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->email);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($sc->total));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($sc->total_amount));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($sc->paid));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($sc->balance));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $sc->create_by);
						
						$this->excel->getActiveSheet()->getStyle('E'. $row.':I'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'suppliers_balance_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function customers_actions($wh=null) {
    if($wh){
        $wh = explode('-', $wh);
    }
        // $this->erp->print_arrays($wh);
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    if($this->Owner || $this->Admin){
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('customers_report'));
					$this->excel->getActiveSheet()->mergeCells('A1:K1');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('Customers_Balance'));
                    $this->excel->getActiveSheet()->SetCellValue('A2', lang('company'));
                    $this->excel->getActiveSheet()->SetCellValue('B2', lang('name'));
                    $this->excel->getActiveSheet()->SetCellValue('C2', lang('phone'));
                    $this->excel->getActiveSheet()->SetCellValue('D2', lang('email_address'));
                    $this->excel->getActiveSheet()->SetCellValue('E2', lang('total_sales'));
                    $this->excel->getActiveSheet()->SetCellValue('F2', lang('total_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('G2', lang('Total_Rerurn'));
                    $this->excel->getActiveSheet()->SetCellValue('H2', lang('total_paid'));
					$this->excel->getActiveSheet()->SetCellValue('I2', lang('total_deposit'));
                    $this->excel->getActiveSheet()->SetCellValue('J2', lang('total_discount'));
                    $this->excel->getActiveSheet()->SetCellValue('K2', lang('total_balance'));
					
					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                   $this->excel->getActiveSheet()->getStyle('A1:K1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
					$this->excel->getActiveSheet()->getStyle('A1:K1')->getFont()
                                              ->setName('Times New Roman')
                                              ->setSize(20);
					
					$this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(30);
					
                    $row = 3;
                    $sum_sale = $sum_amount = $sum_return =$sum_payment= $sum_deposit =$sum_discount= $sum_balance = 0;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getCustomerByID($id);
                        //$this->erp->print_arrays($sc);
                        $sum_sale += $sc->total;
                        $sum_amount += $sc->total_amount;
                        $sum_return += $sc->return_sale;
                        $sum_payment += $sc->total_payment;
						$sum_deposit += $sc->total_deposit;
                        $sum_discount += $sc->total_discount;
                        $sum_balance += $sc->balance;
						
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->company);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->phone." ");
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->email);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatDecimal($sc->total));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatDecimal($sc->total_amount));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatDecimal($sc->return_sale));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatDecimal($sc->total_payment));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatDecimal($sc->total_deposit));
						$this->excel->getActiveSheet()->SetCellValue('j' . $row, $this->erp->formatDecimal($sc->total_discount));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatDecimal($sc->balance));

                        $new_row = $row+1;
                        $this->excel->getActiveSheet()->SetCellValue('E' . $new_row, $this->erp->formatDecimal($sum_sale));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $new_row, $this->erp->formatDecimal($sum_amount));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $new_row, $this->erp->formatDecimal($sum_return));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $new_row, $this->erp->formatDecimal($sum_payment));
						$this->excel->getActiveSheet()->SetCellValue('I' . $new_row, $this->erp->formatDecimal($sum_deposit));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $new_row, $this->erp->formatDecimal($sum_discount));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $new_row, $this->erp->formatDecimal($sum_balance));
                        $row++;
                    }
                }else{
                    // $this->erp->print_arrays($wh);
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->mergeCells('A1:K1');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('Customers_Balance'));
                    $this->excel->getActiveSheet()->SetCellValue('A2', lang('company'));
                    $this->excel->getActiveSheet()->SetCellValue('B2', lang('name'));
                    $this->excel->getActiveSheet()->SetCellValue('C2', lang('phone'));
                    $this->excel->getActiveSheet()->SetCellValue('D2', lang('email_address'));
                    $this->excel->getActiveSheet()->SetCellValue('E2', lang('total_sales'));
                    $this->excel->getActiveSheet()->SetCellValue('F2', lang('total_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('G2', lang('Total_Rerurn'));
                    $this->excel->getActiveSheet()->SetCellValue('H2', lang('total_paid'));
					$this->excel->getActiveSheet()->SetCellValue('I2', lang('total_deposit'));
                    $this->excel->getActiveSheet()->SetCellValue('J2', lang('total_discount'));
                    $this->excel->getActiveSheet()->SetCellValue('K2', lang('total_balance'));
					
                  $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                   $this->excel->getActiveSheet()->getStyle('A1:K1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
					$this->excel->getActiveSheet()->getStyle('A1:K1')->getFont()
                                              ->setName('Times New Roman')
                                              ->setSize(20);
					$this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(30);
					
					$this->excel->getActiveSheet()->getRowDimension(2)->setRowHeight(20);
                    $row = 3;
                    $sum_sale = $sum_amount = $sum_return =$sum_payment= $sum_deposit =$sum_discount= $sum_balance = 0;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getCustomerByID($id,$wh);
                        //$this->erp->print_arrays($sc);
                        $sum_sale += $sc->total;
                        $sum_amount += $sc->total_amount;
                        $sum_return += $sc->return_sale;
                        $sum_payment += $sc->total_payment;
						$sum_deposit += $sc->total_deposit;
                        $sum_discount += $sc->total_discount;
                        $sum_balance += $sc->balance;
						
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->company);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->phone." ");
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->email);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatDecimal($sc->total));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatDecimal($sc->total_amount));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatDecimal($sc->return_sale));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatDecimal($sc->total_payment));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatDecimal($sc->total_deposit));
						$this->excel->getActiveSheet()->SetCellValue('j' . $row, $this->erp->formatDecimal($sc->total_discount));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatDecimal($sc->balance));

                        $new_row = $row+1;
                        $this->excel->getActiveSheet()->SetCellValue('E' . $new_row, $this->erp->formatDecimal($sum_sale));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $new_row, $this->erp->formatDecimal($sum_amount));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $new_row, $this->erp->formatDecimal($sum_return));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $new_row, $this->erp->formatDecimal($sum_payment));
						$this->excel->getActiveSheet()->SetCellValue('I' . $new_row, $this->erp->formatDecimal($sum_deposit));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $new_row, $this->erp->formatDecimal($sum_discount));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $new_row, $this->erp->formatDecimal($sum_balance));
                        $row++;
                    }
                }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(17);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(17);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(17);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(17);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(17);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(17);
                    $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(17);
                    $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'customers_balance_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                    PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');
                        $styleArray = array(
                            'font'  => array(
                                'bold'  => true
                            )
                        );
                        
                        $this->excel->getActiveSheet()->getStyle('A2:K2')->applyFromArray($styleArray);
						$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('A2:K2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('E' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('F' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('G' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('H' . $new_row.'')->getFont()->setBold(true);
						$this->excel->getActiveSheet()->getStyle('I' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('J' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('K' . $new_row.'')->getFont()->setBold(true);
                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');
                        $styleArray = array(
                            'font'  => array(
                                'bold'  => true
                            )
                        );
                        
                        $this->excel->getActiveSheet()->getStyle('A2:K2')->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getStyle('A2:K2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('E' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('E' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('F' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('F' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('G' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('G' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('H' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('H' . $new_row.'')->getFont()->setBold(true);
						$this->excel->getActiveSheet()->getStyle('I' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('I' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('J' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('J' . $new_row.'')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('K' . $new_row.'')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('K' . $new_row.'')->getFont()->setBold(true);

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	//Export xls and pdf in Sales_Detail_Report in Sales Report
	function salesDetail_actions()
    {
		if(!empty($_POST['val'])){
        if($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf'){
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('sales_detail_report'));
			$this->excel->getActiveSheet()->mergeCells('A1:L1');
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('Sale Rport Detail'));
			$this->excel->getActiveSheet()->SetCellValue('A2', lang('item'));
            $this->excel->getActiveSheet()->SetCellValue('B2', lang('project'));
            $this->excel->getActiveSheet()->SetCellValue('C2', lang('warehouse'));
            $this->excel->getActiveSheet()->SetCellValue('D2', lang('unit_cost'));
            $this->excel->getActiveSheet()->SetCellValue('E2', lang('unit_price'));
            $this->excel->getActiveSheet()->SetCellValue('F2', lang('tax'));
            $this->excel->getActiveSheet()->SetCellValue('G2', lang('discount'));
            $this->excel->getActiveSheet()->SetCellValue('H2', lang('quantity'));
            $this->excel->getActiveSheet()->SetCellValue('I2', lang('unit'));
            $this->excel->getActiveSheet()->SetCellValue('J2', lang('total_costs'));
            $this->excel->getActiveSheet()->SetCellValue('K2', lang('total_price'));
            $this->excel->getActiveSheet()->SetCellValue('L2', lang('gross_mg'));
            $this->excel->getActiveSheet()->getStyle('A2:L2')->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle('A2:L2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getStyle('A1:L1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getStyle('A1:L1')->getFont()
                                              ->setName('Times New Roman')
                                              ->setSize(20);
			$this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(30);
            $warehouses_arr = array();
            $warehouses = $this->db->get("warehouses")->result();
            foreach($warehouses as $warehouse){
                $warehouses_arr[$warehouse->id] = $warehouse->name;
            }  
            $row = 3;
            $g_total = 0;
            $g_order_discounts = 0;
            $g_amounts = 0;
            $g_total_costs = 0;
            $g_gross_margin = 0;
            $g_total_shipping = 0;
            $g_total_tax =0;
            $grand_totals = 0;
            $config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
            $config["per_page"] = 5;

            $sql1 = "SELECT
            erp_sales.id,
            1 as type,
            erp_sales.date,
            erp_sales.reference_no,
            erp_sales.biller,
            erp_sales.biller_id,
            erp_sales.total,
            erp_sales.total_discount,
            erp_sales.order_discount,
            erp_sales.order_tax,
            erp_sales.product_tax,
            erp_sales.shipping,
            erp_sales.grand_total,
            erp_sales.total_cost,
            erp_sales.paid,
            erp_sales.warehouse_id,
            erp_sales.customer,
            erp_sales.customer_id,
            erp_sales.created_by,
            erp_sales.pos
            FROM
            `erp_sales`
            INNER JOIN erp_sale_items ON erp_sales.id = erp_sale_items.sale_id
            WHERE erp_sales.opening_ar = 0
            GROUP BY
            erp_sales.id,reference_no";

            $sql2 = "SELECT
            erp_return_sales.id,
            2 as type,
            erp_return_sales.date,
            erp_return_sales.reference_no,
            erp_return_sales.biller,
            erp_return_sales.biller_id,
            erp_return_sales.total,
            erp_return_sales.total_discount,
            erp_return_sales.order_discount,
            erp_return_sales.product_tax,
            erp_return_sales.order_tax,
            erp_return_sales.shipping,
            erp_return_sales.grand_total,
            erp_return_sales.total_cost,
            erp_return_sales.paid,
            erp_return_sales.warehouse_id,
            erp_return_sales.customer,
            erp_return_sales.customer_id,
            erp_return_sales.created_by,
            0 as pos
            FROM
            erp_return_sales
            INNER JOIN erp_return_items ON erp_return_sales.id = erp_return_items.return_id
            GROUP BY
            erp_return_sales.id,reference_no";  

            foreach ($_POST['val'] as $id) {  
			
                $sales = $this->db->query("SELECT * FROM ({$sql1} UNION {$sql2}) AS TEMP WHERE id = $id ORDER BY id DESC
                    LIMIT {$config['ob_set']},{$config['per_page']} ")->result();

                    // if(count($sales) > 0){

                foreach($sales as $key => $sale){

                    $table_return_items = "erp_return_items"; 
                    $table_sale_items = "erp_sale_items";

                    $sql = "SELECT
                    erp_sale_items.id,
                    erp_sale_items.sale_id,
                    erp_sale_items.category_id,
                    erp_sale_items.product_id,
                    erp_sale_items.product_code,
                    erp_sale_items.product_name,
                    erp_sale_items.net_unit_price,
                    erp_sale_items.unit_price,
                    erp_sale_items.unit_cost,
                    erp_sale_items.quantity,
                    erp_sale_items.warehouse_id,
                    erp_sale_items.discount,
                    erp_sale_items.item_discount,
                    erp_sale_items.subtotal,
                    erp_sale_items.item_tax,
					erp_sale_items.option_id,
					erp_product_variants.qty_unit,
                    (CASE WHEN erp_product_variants.name= 0 THEN erp_product_variants.name ELSE erp_units.name  END) as unit
                    FROM ";

                    $sales_detail = $this->db->query("{$sql}{$table_sale_items} AS erp_sale_items
                        LEFT JOIN `erp_products` ON `erp_products`.`id` = `erp_sale_items`.`product_id`
                        LEFT JOIN `erp_units` ON `erp_units`.`id` = `erp_products`.`unit`
						LEFT JOIN `erp_product_variants` ON `erp_sale_items`.`option_id` = `erp_product_variants`.`id`
                        WHERE erp_sale_items.sale_id={$sale->id} GROUP BY id")->result();

                    $sales_detail_returned = $this->db->query("{$sql}{$table_return_items} AS erp_sale_items
                        LEFT JOIN `erp_products` ON `erp_products`.`id` = `erp_sale_items`.`product_id`
                        LEFT JOIN `erp_units` ON `erp_units`.`id` = `erp_products`.`unit`
						LEFT JOIN `erp_product_variants` ON `erp_sale_items`.`option_id` = `erp_product_variants`.`id`
                        WHERE erp_sale_items.return_id={$sale->id} GROUP BY id")->result();

                    $this->excel->getActiveSheet()->SetCellValue('A' . $row,$sale->reference_no.">>".$sale->customer.">>".date('d/M/Y h:i A', strtotime($sale->date)));
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':L'.$row);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
                    $row++;
                    $warehouse = "";
                    $total_item_tax = 0;
                    $total_discount = 0;
                    $total_quantity = 0;
                    $total_costs = 0;
                    $total_gross_margin = 0;
                    $total_amount = 0;
                    $sub_total = 0;
                    $total_amounts = 0;
                    $amount = 0;
                    $amounts = 0;
                    $total_overh = 0;

                    $sales_by_gls = $this->db->query("SELECT
                        erp_gl_trans.sale_id,
                        erp_gl_trans.customer_id,
                        erp_gl_trans.biller_id,
                        erp_gl_trans.tran_date,
                        erp_gl_trans.reference_no,
                        erp_gl_trans.description,
                        erp_gl_trans.amount,
                        erp_gl_trans.narrative,
                        erp_gl_trans.tran_type,
                        erp_gl_trans.account_code
                        FROM
                        erp_gl_trans
                        INNER JOIN erp_sales ON erp_sales.id = erp_gl_trans.sale_id                                                                 
                        WHERE erp_sales.id = {$sale->id}
                        AND sectionid = 50
                        GROUP BY reference_no
                        ");


                    if ($sale->type == 1) {
                        foreach ($sales_detail as $sale_detail) {
							//$this->erp->print_arrays( $sale_detail);
                            $unit = isset($sale_detail->variant) ? $sale_detail->variant : $sale_detail->unit;
							if ($sale_detail->option_id != 0) {
								
								$total_cost = ($sale_detail->unit_cost * $sale_detail->qty_unit) * $sale_detail->quantity;
								$unit_cost	= $sale_detail->unit_cost * $sale_detail->qty_unit;
							} else {
								$total_cost = $sale_detail->unit_cost * $sale_detail->quantity;
								$unit_cost	= $sale_detail->unit_cost;
							}
							//$this->erp->print_arrays($sale_detail);
                            $gross_margin = ($sale_detail->subtotal - $sale_detail->item_tax) - $total_cost;
                            $sub_total = ($total_amount - $sale->order_discount) + $sale->order_tax + $total_item_tax + $sale->shipping;

                            $total_discount += $sale_detail->item_discount;
                            $total_quantity += $sale_detail->quantity;
                            $total_costs += $total_cost;
                            $total_gross_margin += $gross_margin;
                            $total_amount += $sale_detail->subtotal - $sale_detail->item_tax;
                            $total_amounts += $sale_detail->subtotal - $sale_detail->item_tax;
                            $total_item_tax += $sale_detail->item_tax;
                            $amount = $total_amount - $sale->order_discount + $sale->shipping;

                            $this->excel->getActiveSheet()->SetCellValue('A'. $row, "(".$sale_detail->product_name.")".$sale_detail->product_code);
                            $this->excel->getActiveSheet()->SetCellValue('B'. $row, $sale->biller);
                            $this->excel->getActiveSheet()->SetCellValue('C'. $row, $warehouses_arr[$sale_detail->warehouse_id]);
                            $this->excel->getActiveSheet()->SetCellValue('D' .$row, $this->erp->formatMoney($unit_cost).' ');
                            $this->excel->getActiveSheet()->SetCellValue('E' .$row, $this->erp->formatMoney($sale_detail->unit_price).' ');
                            $this->excel->getActiveSheet()->SetCellValue('F' .$row, "(".$this->erp->formatMoney($sale_detail->item_tax).")");
                            $this->excel->getActiveSheet()->SetCellValue('G'. $row, "(".$this->erp->formatMoney($sale_detail->item_discount).")");
                            $this->excel->getActiveSheet()->SetCellValue('H'. $row, $this->erp->formatQuantity($sale_detail->quantity));
                            $this->excel->getActiveSheet()->SetCellValue('I'. $row, $unit);
                            $this->excel->getActiveSheet()->SetCellValue('J'. $row, $this->erp->formatMoney($total_cost).' ');
                            $this->excel->getActiveSheet()->SetCellValue('K'. $row, $this->erp->formatMoney(($sale_detail->subtotal - $sale_detail->item_tax)).' ');
                            $this->excel->getActiveSheet()->SetCellValue('L'. $row, $this->erp->formatMoney($gross_margin));
                            $this->excel->getActiveSheet()->getStyle('B'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                            $row++;
                            // $this->erp->print_arrays($sales_by_gls);
                            if ($sales_by_gls->num_rows() > 0) {
                                $e_total = 0;
                                $i_gross_margin = "";
                                $this->excel->getActiveSheet()->SetCellValue('A'. $row, lang("OVERHEAD"));
                                foreach ($sales_by_gls->result() as $sales_by_gl) {
                                    // $this->erp->print_arrays($sales_by_gl);
                                    $e_total += $sales_by_gl->amount;
                                    $e_amount = $this->erp->formatMoney($sales_by_gl->amount);
                                    $d_gross_margin = ($total_gross_margin - $sale->order_discount + $sale->shipping) + (-1) * $e_total;
                                    $e_sub_total = "(" . $this->erp->formatMoney(abs($e_total)) . ")";
                                    $this->excel->getActiveSheet()->SetCellValue('A'. $row, $this->erp->hrld($sales_by_gl->tran_date));
                                    $this->excel->getActiveSheet()->SetCellValue('B'. $row, $sales_by_gl->reference_no);
                                    $this->excel->getActiveSheet()->SetCellValue('C'. $row, $sales_by_gl->description);
                                    $this->excel->getActiveSheet()->SetCellValue('D'. $row, $e_amount);
                                    $row++;
                                }
                                $total_overh += $e_total;
                                $this->excel->getActiveSheet()->SetCellValue('A'. $row, lang("subtotal"));
                                $this->excel->getActiveSheet()->SetCellValue('B'. $row, $this->erp->formatMoney($e_total));
                                $this->excel->getActiveSheet()->SetCellValue('D'. $row, $e_sub_total);
                                $row++;
                                $this->excel->getActiveSheet()->SetCellValue('A'. $row, lang("total_gross_margin"));
                                $this->excel->getActiveSheet()->SetCellValue('D'. $row, $this->erp->formatMoney($d_gross_margin));

                            }
                        }
                    }else{
                        foreach ($sales_detail_returned as $sale_detail_returned) {
                           $unit = isset($sale_detail_returned->variant) ? $sale_detail_returned->variant : $sale_detail_returned->unit;
											
											if ($sale_detail_returned->option_id != 0) {
                                                $total_cost = ($sale_detail_returned->unit_cost * $sale_detail_returned->qty_unit) * $sale_detail_returned->quantity;
												$unit_cost	= $sale_detail_returned->unit_cost * $sale_detail_returned->qty_unit;
                                            } else {
												$total_cost = $sale_detail_returned->unit_cost * $sale_detail_returned->quantity;
												$unit_cost	= $sale_detail_returned->unit_cost;
                                            }
							
                            $gross_margin = ($sale_detail_returned->subtotal - $sale_detail_returned->item_tax) - $total_cost;
                            $sub_total = ($total_amount - $sale->order_discount) + $sale->order_tax + $total_item_tax + $sale->shipping;

                            $total_discount += $sale_detail_returned->item_discount;
                            $total_quantity += $sale_detail_returned->quantity;
                            $total_costs += $total_cost;
                            $total_gross_margin += $gross_margin;
                            $total_amount += $sale_detail_returned->subtotal - $sale_detail_returned->item_tax;
                            $total_item_tax += $sale_detail_returned->item_tax;
                            $amount = $total_amount - $sale->order_discount + $sale->shipping;
                            $amounts += $amount;

                            $this->excel->getActiveSheet()->SetCellValue('A'. $row, $sale_detail_returned->product_name.$sale_detail_returned->product_code);
                            $this->excel->getActiveSheet()->SetCellValue('B'. $row, $sale->biller);
                            $this->excel->getActiveSheet()->SetCellValue('C'. $row, $warehouses_arr[$sale_detail_returned->warehouse_id]);
                            $this->excel->getActiveSheet()->SetCellValue('D'. $row, $this->erp->formatMoney($unit_cost));
                            $this->excel->getActiveSheet()->SetCellValue('E'. $row, $this->erp->formatMoney($sale_detail_returned->unit_price));
                            $this->excel->getActiveSheet()->SetCellValue('F'. $row, $this->erp->formatMoney($sale_detail_returned->item_tax));
                            $this->excel->getActiveSheet()->SetCellValue('G'. $row, $this->erp->formatMoney($sale_detail_returned->item_discount));
                            $this->excel->getActiveSheet()->SetCellValue('H'. $row, $this->erp->formatQuantity($sale_detail_returned->quantity));
                            $this->excel->getActiveSheet()->SetCellValue('I'. $row, $unit);
                            $this->excel->getActiveSheet()->SetCellValue('J'. $row, $this->erp->formatMoney($total_cost));
                            $this->excel->getActiveSheet()->SetCellValue('K'. $row, $this->erp->formatMoney($sale_detail_returned->subtotal - $sale_detail_returned->item_tax));
                            $this->excel->getActiveSheet()->SetCellValue('L'.$row, $this->erp->formatMoney($gross_margin));

                            $row++;
                        }
                    }
                    //Display total part
                    $this->excel->getActiveSheet()->SetCellValue('I'. $row, lang("total").":");
                    $this->excel->getActiveSheet()->SetCellValue('J'. $row, $this->erp->formatMoney($total_costs).' ');
                    $this->excel->getActiveSheet()->SetCellValue('K'. $row, $this->erp->formatMoney($total_amount).' ');
                    $this->excel->getActiveSheet()->SetCellValue('L'. $row, $this->erp->formatMoney($total_gross_margin).' ');
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':H'.$row);
                    $this->excel->getActiveSheet()->getStyle('J'. $row.':L'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
                    $row++;
                    //Display Orderr Discount part
                    $this->excel->getActiveSheet()->SetCellValue('A'.$row, lang("order_discount").":");
                    $this->excel->getActiveSheet()->SetCellValue('K'. $row, "(".$this->erp->formatMoney($sale->order_discount).")");
                    $this->excel->getActiveSheet()->SetCellValue('L'. $row, "(".$this->erp->formatMoney($sale->order_discount).")");
                    $this->excel->getActiveSheet()->mergeCells('A'. $row.':I'. $row);
                    $this->excel->getActiveSheet()->getStyle('J'. $row.':L'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
                    $row++;
                    //Display Shipping part
                    $this->excel->getActiveSheet()->SetCellValue('K'. $row, $this->erp->formatMoney($sale->shipping));
                    $this->excel->getActiveSheet()->SetCellValue('L'. $row, $this->erp->formatMoney($sale->shipping));
                    $this->excel->getActiveSheet()->mergeCells('A'. $row.':I'. $row);
                    $this->excel->getActiveSheet()->getStyle('J'. $row.':L'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->SetCellValue('A'. $row, lang("shipping").":");
                    $row++;
                    //Display subtotal
                    $this->excel->getActiveSheet()->setCellValue('J'. $row, $this->erp->formatMoney($total_costs).' ');
                    $this->excel->getActiveSheet()->setCellValue('K'. $row, $this->erp->formatMoney($amount).' ');
                    $this->excel->getActiveSheet()->setCellValue('L'. $row, $this->erp->formatMoney($amount - $total_costs).' ');
                    $this->excel->getActiveSheet()->mergeCells('A'. $row.':I'. $row);
                    $this->excel->getActiveSheet()->getStyle('J'. $row.':L'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->setCellValue('A'. $row, lang("subtotal").":");
                    $row++;
                    if ($sale->type == 2) {
                        $g_order_discounts -= $sale->order_discount;
                        $g_amounts -= $total_amount;
                        $grand_totals -= $amount;
                    } else {
                        $g_order_discounts += $sale->order_discount;
                        $g_amounts += $total_amount;
                        $grand_totals += (float) ($amount);
                    }
                    $g_total_costs += $total_costs;
                    //$g_gross_margin = ($g_amounts) - $g_total_costs ;
                    $g_gross_margin = ($g_amounts) - $g_total_costs;
                    $g_total_shipping += $sale->shipping;
                    $g_total_tax += $sale->order_tax + $total_item_tax;
                    $g_totals = ($g_amounts + $g_total_shipping + $g_total_tax) - $g_order_discounts;
                }
            }
		
            //Display the last Total of each total in Sale Detail Report
            $this->excel->getActiveSheet()->setCellValue('J'. $row, $this->erp->formatMoney($g_total_costs).' ');
            $this->excel->getActiveSheet()->setCellValue('K'. $row, $this->erp->formatMoney($g_amounts));
            $this->excel->getActiveSheet()->setCellValue('L'. $row, $this->erp->formatMoney($g_amounts - $g_total_costs));
            $this->excel->getActiveSheet()->mergeCells('A'. $row.':I'. $row);
            $this->excel->getActiveSheet()->getStyle('J'. $row.':L'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
            $this->excel->getActiveSheet()->setCellValue('A'. $row, lang("total").":");
            $row++;
            //Display Total order discount
            $this->excel->getActiveSheet()->setCellValue('K'. $row, "(".$this->erp->formatMoney($g_order_discounts).")");
            $this->excel->getActiveSheet()->setCellValue('L'. $row, "(".$this->erp->formatMoney($g_order_discounts).")");
            $this->excel->getActiveSheet()->mergeCells('A'. $row.':I'. $row);
            $this->excel->getActiveSheet()->getStyle('J'. $row.':L'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
            $this->excel->getActiveSheet()->setCellValue('A'. $row, lang("total_order_discount").":");
            $row++;
            //Display Total shipping
            $this->excel->getActiveSheet()->setCellValue('K'. $row, $this->erp->formatMoney($g_total_shipping));
            $this->excel->getActiveSheet()->setCellValue('L'. $row, $this->erp->formatMoney($g_total_shipping));
            $this->excel->getActiveSheet()->mergeCells('A'. $row.':I'. $row);
            $this->excel->getActiveSheet()->getStyle('J'. $row.':L'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
            $this->excel->getActiveSheet()->setCellValue('A'. $row, lang("total_shipping").":");
            $row++;
            //Display Total overhead
            $this->excel->getActiveSheet()->setCellValue('J'. $row, "(".$this->erp->formatMoney($total_overh).")");
            $this->excel->getActiveSheet()->setCellValue('L'. $row, "(".$this->erp->formatMoney($total_overh).")");
            $this->excel->getActiveSheet()->mergeCells('A'. $row.':I'. $row);
            $this->excel->getActiveSheet()->getStyle('J'. $row.':L'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
            $this->excel->getActiveSheet()->setCellValue('A'. $row, lang("total_overhead").":");
            $row++;
            //Display Total overhead
            $this->excel->getActiveSheet()->setCellValue('L'. $row, $this->erp->formatMoney($grand_totals - $g_total_costs - $total_overh));
            $this->excel->getActiveSheet()->mergeCells('A'. $row.':I'. $row);
            $this->excel->getActiveSheet()->getStyle('J'. $row.':L'. $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle('A'. $row.':L'.$row)->getFont()->setBold(true);
            $this->excel->getActiveSheet()->setCellValue('A'. $row, lang("total_gross_margin").":");
            $row++;
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);

            
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'sales_detail_report_' . date('Y_m_d_H_i_s');
            if ($this->input->post('form_action') == 'export_pdf') {
                $styleArray = array(
                    'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($this->input->post('form_action') == 'export_excel') {
                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
        }
    }else {
        $this->session->set_flashdata('error', lang("No_sales_detail_report_selected. Please select at least one."));
        redirect($_SERVER["HTTP_REFERER"]);
    }  
	}
	
	function sales_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('shop'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
					// $this->excel->getActiveSheet()->SetCellValue('E1', lang('product'));
					// $this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
					// $this->excel->getActiveSheet()->SetCellValue('G1', lang('cost'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('grand_total'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('balance'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('payment_status'));

                    $row = 2;
					$total_qty = 0;
					$total = 0;
					$paid = 0;
					$balance = 0;
					$total_cost = 0;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getSalesExportByID($id);
						// $this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->date);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->biller);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->customer);
      //                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->iname);
						// $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->iqty);
						// $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sc->icost);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($sc->grand_total));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($sc->paid));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($sc->balance));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $sc->payment_status);
                        $this->excel->getActiveSheet()->getStyle('E'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle('H'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
						// $total_qty += $sc->total_qty;
						$total += $sc->grand_total;
						$paid += $sc->paid;
						$balance += ($sc->grand_total - $sc->paid);

						// $myString = $sc->icost;
						// $explode_costs = explode("\n", $myString);

						// foreach($explode_costs as $c){
						// 	$total_cost += $c;
						// }	
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getStyle("E" . $row . ":G" . $row)->getBorders()
						->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
					// $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total_qty);
					// $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total_cost);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($total));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($paid));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($balance));
                    $this->excel->getActiveSheet()->getStyle('E'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                //set font bold,font color,font size,font name and background color to excel  by dara
                    $styleArrays = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 10,
                            'name'  => 'Verdana'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428BCA')
                        )
                    );
                    
                    $this->excel->getActiveSheet()->getStyle('A1:H1')->applyFromArray($styleArrays);
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
					// $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
					// $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
					// $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				
				
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'sales_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
						$styleArray = array(
							'borders' => array(
								'allborders' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN
								)
							)
						);
						$this->excel->getDefaultStyle()->applyFromArray($styleArray);
						$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
						 ));
						
						$this->excel->getActiveSheet()->getStyle('G2:G' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
						 ));
						
						$this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }

                    if ($this->input->post('form_action') == 'export_excel') {
						$this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
						$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
							 'wrap'       => true
						 ));
						 $this->excel->getActiveSheet()->getStyle('G2:G' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
							 'wrap'       => true
						 ));
						ob_clean();
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            }else {
                $this->session->set_flashdata('error', lang("No_sales_report_selected. Please select at least one."));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function categories_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('categories_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('category_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('category_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('purchase_amount'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('sold_amount'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('profit_loss'));

                    $row = 2;
					$sQty = 0;
					$pQty = 0;
					$sAmt = 0;
					$pAmt = 0;
					$pl = 0;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getCategoryByID($id);
						//$this->erp->print_arrays($sc);
						$profit = $sc->TotalSales - $sc->TotalPurchase;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->code." ");
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->PurchasedQty);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->SoldQty);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->TotalPurchase);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->TotalSales);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sc->Profit);
						$pQty += $sc->PurchasedQty;
						$sQty += $sc->SoldQty;
						$pAmt += $sc->TotalPurchase;
						$sAmt += $sc->TotalSales;
						$pl += $profit;
						
						$i = $row+1;
                        $this->excel->getActiveSheet()->SetCellValue('C' . $i, $pQty);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $i, $sQty);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $i, $pAmt);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $i, $sAmt);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $i, $pl);
					
                        $row++;
                    }
                    //set font bold,font color,font size,font name and background color to excel  by dara
                    $styleArray = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 10,
                            'name'  => 'Verdana'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428BCA')
                        )
                    );
                    
                    $this->excel->getActiveSheet()->getStyle('A1:G1')->applyFromArray($styleArray);
                        
                    //set border
                    $styleArray1 = array(
                        'borders' => array(
                          'allborders' => array(
                              'style' => PHPExcel_Style_Border::BORDER_THIN
                          )
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A1:G'.$row)->applyFromArray($styleArray1);

					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'categories_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');
						
						$this->excel->getActiveSheet()->getStyle('C'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('D'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('E'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('F'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('G'. $i. '')->getFont()->setBold(true);

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');
						
						$this->excel->getActiveSheet()->getStyle("C" . $i . ":G" . $row)->getBorders()
                        ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                        $this->excel->getActiveSheet()->getStyle('C'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('D'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('E'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('F'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('G'. $i. '')->getFont()->setBold(true);
						
						$this->excel->getActiveSheet()->getStyle("C" . $row . ":G" . $row)->getBorders()
						->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	function categories_value_actions() {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('categories_value_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('category_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('category_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('category_stock'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('costs'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('balance'));

                $row        = 2;
                $sQty       = 0;
                $cQty       = 0;
                $pAmt       = 0;
                $pl         = 0;
                $balance    = 0;
                $data_row   =null;
                foreach ($_POST['val'] as $id) {
                    $catValue= $this->reports_model->getCategoryValueByID($id);
                    //The total sum
                    $sQty += $catValue->current_stock;
                    $cQty += $catValue->total_cost;
                    $pAmt += $catValue->total_price;
                    $balance += $catValue->balance;
                    
                    $profit = $data_row->TotalSales - $data_row->TotalPurchase;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $catValue->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $catValue->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $catValue->current_stock);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $catValue->total_cost);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $catValue->total_price);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $catValue->balance);
                    
                    $i = $row+1;
                    $this->excel->getActiveSheet()->SetCellValue('C' . $i, $sQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $i, $cQty);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $i, $pAmt);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $i, $balance);

                    $row++;
                }
                    //set font bold,font color,font size,font name and background color to excel  by dara
                    $styleArray = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 10,
                            'name'  => 'Verdana'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428BCA')
                        )
                    );
                    
                    $this->excel->getActiveSheet()->getStyle('A1:F1')->applyFromArray($styleArray);
                        
                    //set border
                    $styleArray1 = array(
                        'borders' => array(
                          'allborders' => array(
                              'style' => PHPExcel_Style_Border::BORDER_THIN
                          )
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A1:F'.$row)->applyFromArray($styleArray1);

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'categories_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                    PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');
                        
                        //Add style bold text in case PDF
                        $this->excel->getActiveSheet()->getStyle('C'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('D'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('E'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('F'. $i. '')->getFont()->setBold(true);

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $this->excel->getActiveSheet()->getStyle("C" . $i . ":F" . $row)->getBorders()
                        ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                        $this->excel->getActiveSheet()->getStyle('C'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('D'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('E'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('F'. $i. '')->getFont()->setBold(true);

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	function item_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('supplier_by_items_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('email_address'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('total_purchases'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getSupplierByID($id);
						//$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->company);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->phone." ");
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->email);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->total);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->total_amount);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sc->paid);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $sc->balance);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'supplier_by_items_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_item_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
		
    function warehouse_actions() {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $alphabet1 = array('C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1');
                    $ware = $this->reports_model->getAllWarehouses();
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('warehouse_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
//                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('WH1'));
//                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('WH2'));
                    $a = 0;
                    foreach($ware as $warehouse){
                        $this->excel->getActiveSheet()->SetCellValue($alphabet1[$a], $warehouse->name);
                        $a++;             
                    }
//                    $this->erp->print_arrays($ware);
                    $this->excel->getActiveSheet()->SetCellValue($alphabet1[$a], lang('total'));

                    $row                = 2;
                    $rows               = null;
                    $total_wh_amount    = 0;
                    $alphabet = array('C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getWarehouseByID($id);
                        //$this->erp->print_arrays($sc);
                        $total_wh_amount += $rows->qb;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->code." ");
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $total_wh_amount = 0;
                        $i = 0;
                        foreach ($ware as $warehouse) {
                            $this->db->select('SUM(quantity_balance) as qb');
                            $this->db->from('purchase_items');
                            $this->db->where(array('warehouse_id' => $warehouse->id, 'product_id' => $sc->id));
                            $q = $this->db->get();
                            
                            if ($q->num_rows() > 0) {
                                foreach ($q->result() as $rows) {
                                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$i] . $row, $rows->qb);
                                }
                                
                            }
                            $j = $row+1;
                            $this->excel->getActiveSheet()->SetCellValue($alphabet[$i] . $j, $total_wh_amount);
                            $i++;
                        }
                        
                        
                        $this->excel->getActiveSheet()->SetCellValue($alphabet[$i] . $row, $sc->quantity);
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'warehouse_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                    PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_warehouse_report_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	function list_using_stock_report_actions()
	{
        if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('list_stock_using'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('Item'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('Category Expense'));
            $this->excel->getActiveSheet()->SetCellValue('C1', lang('Item Description'));
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('Quantity'));
            $this->excel->getActiveSheet()->SetCellValue('E1', lang('Unit'));
            $this->excel->getActiveSheet()->SetCellValue('F1', lang('Cost'));
			$this->excel->getActiveSheet()->SetCellValue('G1', lang('Total'));
            //$this->excel->getActiveSheet()->getStyle('A1'. $row.':G1'.$row)->getFont()->setBold(true);

            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
           /*  $g_qty=0;
            $g_cost=0;
            $g_tax=0;
            $g_subtotal=0; */
            $row = 2;
            
            foreach ($_POST['val'] as $id) {
                $using_stock = $this->reports_model->getUsingStockDetails($id);
                foreach($using_stock as $stock){
				$query=$this->db->query("
                             SELECT
                                erp_enter_using_stock_items.*, erp_products. NAME AS product_name,
                                erp_expense_categories. NAME AS exp_cate_name,
                                erp_enter_using_stock_items.unit AS unit_name,
                                erp_products.cost,
                                erp_position. NAME AS pname,
                                erp_reasons.description AS rdescription,
                                erp_product_variants.qty_unit AS variant_qty
                            FROM
                                erp_enter_using_stock_items
                            LEFT JOIN erp_products ON erp_products. CODE = erp_enter_using_stock_items. CODE
                            LEFT JOIN erp_position ON erp_enter_using_stock_items.description = erp_position.id 
                            LEFT JOIN erp_reasons ON erp_enter_using_stock_items.reason = erp_reasons.id
                            LEFT JOIN erp_product_variants ON erp_enter_using_stock_items.option_id = erp_product_variants.id
                            LEFT JOIN erp_expense_categories ON erp_enter_using_stock_items.exp_cate_id = erp_expense_categories.id where erp_enter_using_stock_items.reference_no='{$stock->refernce_no}' 
                    ")->result();
                    
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $stock->refno.'>> '.$this->erp->hrld($stock->date).'>> '.lang('from').':'.$stock->warehouse_name.'>> '.lang('to').':'.$stock->username);
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setSize(12)->setBold(true);
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':G'.$row);
					
							       
                $row++;
               
                }
            }
		
			
            /* $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang("grand_total"));
            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $g_qty);
            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->erp->formatMoney($g_cost));
            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($g_tax));
            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($g_subtotal));
            $this->excel->getActiveSheet()->getStyle('A'. $row.':F'. $row)->getFont()->setBold(true); */
           /*  $this->excel->getActiveSheet()->getStyle('A'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle('D'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
             */// $this->excel->getActiveSheet()->getStyle('B'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
           /*  $this->excel->getActiveSheet()->getStyle('B'. $row.':C'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('B'.$row.':G'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
             */
        $filename = lang('Using Stock Report'). date('Y_m_d_H_i_s');
        $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            if ($this->input->post('form_action') == 'export_pdf') {
                $styleArray = array(
                    'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                );
                $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                    PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($this->input->post('form_action') == 'export_excel') {
                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');
            
                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
        }   
    }
	
	function products_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('purchase_loss'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('stock_in_hand'));

                    $row            = 2;
                    $qsum_purchased = 0;
                    $psum_purchased = 0;
                    $qsum_sold      = 0;
                    $psum_sold      = 0;
                    $sum_profit     = 0;
                    $qsum_balance   = 0;
                    $psum_balance   = 0;
                    foreach ($_POST['val'] as $id){
                        $sc = $this->reports_model->getProductByID($id);
						//$this->erp->print_arrays($sc);
						$qsum_purchased += $sc->qpurchase;
                        $psum_purchased += $sc->ppurchased;
                        $qsum_sold += $sc->qsale;
                        $psum_sold += $sc->psold;
                        $sum_profit += $sc->Profit;
                        $qsum_balance += $sc->qbalance;
                        $psum_balance += $sc->pbalance;
						
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->catName);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->code."-".$sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, '(' . number_format($sc->qpurchase, 0) . ') ' . number_format($sc->ppurchased, 2));
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, '(' . number_format($sc->qsale, 0) . ') ' . number_format($sc->psold, 2));
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->Profit);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, '(' . number_format($sc->qbalance, 0) . ') ' . number_format($sc->pbalance, 2));
                        
                        $i = $row+1;
                        $this->excel->getActiveSheet()->SetCellValue('C' . $i, '(' . number_format($qsum_purchased, 0) . ') ' . number_format($psum_purchased, 2));
                        $this->excel->getActiveSheet()->SetCellValue('D' . $i, '(' . number_format($qsum_sold, 0) . ') ' . number_format( $psum_sold, 2));
                        $this->excel->getActiveSheet()->SetCellValue('E' . $i, $sum_profit);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $i, '(' . number_format($qsum_balance, 0) . ') ' . number_format($psum_balance, 2));
                        
                        $row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                    
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'products_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');
						
						//Add style bold text in case PDF
                        $this->excel->getActiveSheet()->getStyle('C'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('D'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('E'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('F'. $i. '')->getFont()->setBold(true);

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');
						
						//apply style border top and bold text in case excel
                        $this->excel->getActiveSheet()->getStyle('C'.$i. '')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('C'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('D'.$i. '')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('D'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('E'.$i. '')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('E'. $i. '')->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('F'.$i. '')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('F'. $i. '')->getFont()->setBold(true);

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_product_report_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
    function quantity_actions()
	{
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {
            $warehouse_id = $this->input->post('wareid');
            $ware = $this->reports_model->getWarehouseNameByWID($warehouse_id);
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('quantity_alerts_report'));

                    $this->excel->getActiveSheet()->SetCellValue('A1', $ware?'Product Quantity Alerts ('.$ware->name.')': 'Product Quantity Alerts (All Warehouses)');
                    $this->excel->getActiveSheet()->mergeCells('A1:E1');
                    $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(30);
                    $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A1')->getFont()
                        ->setName('Times New Roman')
                        ->setSize(16)
                        ->setBold(true);

                    $this->excel->getActiveSheet()->SetCellValue('A2', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B2', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C2', lang('warehouse'));
                    $this->excel->getActiveSheet()->SetCellValue('D2', lang('quantity'));
                    $this->excel->getActiveSheet()->SetCellValue('E2', lang('alert_quantity'));

                    $styleArray = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428bca')
                        )
                    );

                    $this->excel->getActiveSheet()->getStyle('A2:E2')->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getStyle('A2:E2')->getFont()
                        ->setName('Times New Roman')
                        ->setSize(12);
                    $this->excel->getActiveSheet()->getRowDimension(2)->setRowHeight(30);
                    $this->excel->getActiveSheet()->getStyle('A2:E2')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A2:E2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                    $row = 3;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getQuantityByID($id,$_POST['wareid']);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->code." ");
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->wname);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->quantity);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->alert_quantity);

                        $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(20);

                        $row++;
						
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'quantity_alerts_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT);
                        $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                        //Margins:
                        $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {

                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                        //Margins:
                        $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_quantity_alert_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }

    function register_actions()
	{
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('register_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('open_time'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('close_time'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('users'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('cash_in_hand'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('cc_slips'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('cheques'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('total_cash'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('note'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getRegisterByID($id);
                        //$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->date);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->closed_at);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->user);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->cash_in_hand);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->c_slips);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sc->cheques);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sc->cash);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $sc->note);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'register_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	function income_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
					
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('quantity_alerts_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('quantity'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('alert_quantity'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getQuantityByID($id);
                        //$this->erp->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->quantity);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->alert_quantity);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'quantity_alerts_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function getSalesReportDetail($start_date = NULL, $end_date = NULL, $biller_id = NULL) 
	{
		
		$this->erp->checkPermissions('detail',NULL,'sale_report');
		$start = "";
		$end = "";
		//$this->erp->print_arrays($start_date, $end_date, $biller_id)
		if (!$start_date) {
            //$start = $this->db->escape(date('Y-m') . '-1');
           // $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            //$end = $this->db->escape(date('Y-m-d H:i'));
            //$end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        } 
		
		if ($this->input->post('category_name')) {
            $category_name = $this->input->post('category_name');
			
        } else {
            $category_name = NULL;
        }
		if ($this->input->post('product_name')) {
            $product_name = $this->input->post('product_name');			
        } else {
            $product_name = NULL;
        }
		if ($this->input->post('supplier')) {
            $supplier_name = $this->input->post('supplier');
        } else {
            $supplier_name = NULL;
        }

		$data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['cate'] = $this->reports_model->getCategory();
		$this->data['categories'] = $this->reports_model->getCategoryName($category_name,$product_name,$start,$end,$biller_id);	
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);	
		$this->data['products'] = $this->reports_model->getProductName(); 
		$this->data['warehouse'] = $this->reports_model->getAllWarehouses();
		$this->data['saleItemsWarehouse'] = $this->reports_model->getAllSaleIemsWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['biller_id'] = $biller_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_report_detail')));
        $meta = array('page_title' => lang('sales_report_detail'), 'bc' => $bc);
        $this->page_construct('reports/sales_report_detail', $meta, $this->data);
		
	}
	
	function saleReportDetail_actions()
	{		
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
			if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('sales_report_detail')); //Sheet Name
				$styleArray = array(
					'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'color' => array('rgb' => 'D9EDEF')
					),
					'font'  => array(
						'bold'  => true,
						'color' => array('rgb' => '0000FF'),
						'name'  => 'Verdana'
					)
				);
				
				$proback = array(
					'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'color' => array('rgb' => 'CCCCCC'),
					)
				);
                if(isset($_POST['check'])){
					$cate_ids = '';
					$i = 0;
					foreach($_POST['check'] as $id){
						if($i == 0) {
							$cate_ids = $id;
						}else {
							$cate_ids .= '###'. $id;
						}
						$i++;
					}					
					$arr = explode('###', $cate_ids);
					$categories = $this->reports_model->getCategoryName(null, null, null, null, $arr);
				
				}else{
					$categories = $this->reports_model->getCategoryName();
				}			
				
				$num = 1;
				$g = 2;
				
				foreach($categories  as $category){
					$result = $this->reports_model->getExportSaleDetail($category->id);
					$this->excel->getActiveSheet()->SetCellValue('A'.($num) , strtoupper($category->name))->getStyle("A" . ($num))->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->mergeCells('A'.($num).':H'.($num));
					$this->excel->getActiveSheet()->getStyle("A" . ($num+1). ':'. "H" . ($num+1) )->applyFromArray($proback);
					$this->excel->getActiveSheet()->SetCellValue('A'.($num+1), lang('product_name'));
					$this->excel->getActiveSheet()->SetCellValue('B'.($num+1), lang('stock_in_hand'));
					$this->excel->getActiveSheet()->SetCellValue('C'.($num+1), lang('qty_sale'));
					$this->excel->getActiveSheet()->SetCellValue('D'.($num+1), lang('unit_cost'));
					$this->excel->getActiveSheet()->SetCellValue('E'.($num+1), lang('unit_price'));
					$this->excel->getActiveSheet()->SetCellValue('F'.($num+1), lang('revenue'));

					foreach($result as $data_row)
					{
						$this->excel->getActiveSheet()->SetCellValue('A' .($g+$num), $data_row->productName);
						$this->excel->getActiveSheet()->SetCellValue('B' .($g+$num), $data_row->stockInHand);
						$this->excel->getActiveSheet()->SetCellValue('C' .($g+$num), $data_row->saleQuantity);
						$this->excel->getActiveSheet()->SetCellValue('D' .($g+$num), $data_row->unitCost);
						$this->excel->getActiveSheet()->SetCellValue('E' .($g+$num), $data_row->unitPrice);
						$this->excel->getActiveSheet()->SetCellValue('F' .($g+$num), $data_row->revenue);
						$g++;
					}
					$num = $num + $g;
					$g = 2;
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
				}			
				
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$filename = 'sales_report_detail_' . date('Y_m_d_H_i_s');  //file name with date
				if ($this->input->post('form_action') == 'export_pdf') {
					$styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
					$this->excel->getDefaultStyle()->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
					require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
					$rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
					$rendererLibrary = 'MPDF';
					$rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
					if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
						die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
							PHP_EOL . ' as appropriate for your directory structure');
					}

					header('Content-Type: application/pdf');
					header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
					header('Cache-Control: max-age=0');

					$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
					return $objWriter->save('php://output');
				}
				if ($this->input->post('form_action') == 'export_excel') {
					header('Content-Type: application/vnd.ms-excel');
					header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
					header('Cache-Control: max-age=0');

					$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
					return $objWriter->save('php://output');
				}

				redirect($_SERVER["HTTP_REFERER"]);
			}
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function getSaleReportByInvoice($start_date = NULL, $end_date = NULL) 
	{		
		$this->erp->checkPermissions('by_invoice',NULL,'sale_report');
		$this->load->library("pagination");
		$start = "";
		$end = "";
		if ($start_date){
			$start = $this->erp->fld(date('d/m/Y'));
        }
        if ($end_date){
           $end = $this->erp->fld(date('d/m/Y h:i:s'));		
        } 
		if ($this->input->post('project')) {
            $project = $this->input->post('project');			
        } else {
            $project = NULL;
        }
		$data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));		
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
		$this->data['projects'] = $this->reports_model->getAllCompanies('biller');
		$this->data['billers'] = $this->reports_model->getAllCompanies('biller');	
		$this->data['invoices'] = $this->reports_model->getInvoice();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_report_detail')));
        $meta = array('page_title' => lang('sales_report_detail'), 'bc' => $bc);
        $this->page_construct('reports/sales_report_by_invoice', $meta, $this->data);
	}
	
	function getSaleReportByInvoice2()
	{
		$this->load->library('datatables');
		$this->datatables
			->select("sales.date, 
			sales.reference_no, 
			sale_items.product_name, 
			sum(erp_sale_items.quantity) as quantity, 
			sale_items.unit_price, 
			sum(erp_sale_items.discount) as discount, 
			sales.grand_total")
			->from('sales')
			->join('sale_items', 'sale_items.sale_id = sales.id', 'inner')
			->join('users', 'users.id = sales.saleman_by', 'left')
			->join('companies', 'companies.id = sales.customer_id', 'left')
			->group_by('sales.reference_no');
		echo $this->datatables->generate();
	}
	
	function getPurchaseOrder()
	{	
		if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		if ($this->input->post('form_action') == 'excel' || $this->input->post('form_action') == 'pdf') {  
		
		$this->db->select($this->db->dbprefix('purchases_order') . ".id, purchases_order.date, 
				reference_no, supplier, grand_total " , FALSE)
                ->from('purchases_order')
                ->join('purchase_order_items', 'purchase_order_items.purchase_id = purchases_order.id', 'inner')
				->group_by('reference_no');
				if($supplier){
					$this->db->where('purchases_order.supplier_id',$supplier);
				}
						
				if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
					if ($user) {
						$this->db->where('purchases_order.created_by', $user);
					}
				}
            
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_order_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('Supplier'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('grand_total'));
				

                $row = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->grand_total);
                    $total += $data_row->grand_total;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("D" . $row )->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $filename = 'purchase_order_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($this->input->post('form_action') == 'pdf') {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
					 ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($this->input->post('form_action') == 'excel') {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
						 'wrap'       => true
					 ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        }else{

            $user_id = $this->session->userdata('user_id');
            $user_biller_id = JSON_decode($this->session->userdata('biller_id'));
            
            $this->load->library('datatables');
            $this->datatables
            ->select("purchases_order.id as id, purchases_order.date, reference_no, supplier, SUM(COALESCE(erp_purchase_order_items.quantity, 0)) as qty_order, SUM(COALESCE(erp_purchase_order_items.quantity_received, 0)) as qty_received, IF(SUM(COALESCE(erp_purchase_order_items.quantity, 0) - COALESCE(erp_purchase_order_items.quantity_received, 0)) < 0, '0.00', SUM(COALESCE(erp_purchase_order_items.quantity, 0) - COALESCE(erp_purchase_order_items.quantity_received, 0)) ) as qty_balance, grand_total")
            ->from("purchases_order")
            ->join('purchase_order_items', 'purchase_order_items.purchase_id = purchases_order.id', 'left')
            ->group_by('reference_no');

            if($user_biller_id != NULL){
                $this->db->where_in('purchases_order.biller_id', $user_biller_id);
            }

            // View Rights
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user_id) {
                    $this->db->where('purchases_order.created_by', $user_id);
                }
            }


			if($supplier){
				$this->db->where('purchases_order.supplier_id',$supplier);
			}
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('purchases_order.created_by', $user);
				}
			}		
			echo $this->datatables->generate();
		}
		
			
	}
	
	function getPurchaseReturn($pdf=NULL,$xls=NULL)
	{
		if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
		if ($this->input->get('biller_id')) {
            $biller = $this->input->get('biller_id');
        } else {
            $biller = NULL;
        }
		 if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		
		if ($pdf || $xls) {  
		$supplier_id = $this->input->get('supplier');
		$this->db->select($this->db->dbprefix('return_purchases') . ".date, return_purchases.reference_no, warehouses.name as wname, return_purchases.supplier, return_purchase_items.product_name, return_purchase_items.quantity, return_purchases.grand_total" , FALSE)
                ->from('return_purchases')
                ->join('return_purchase_items', 'return_purchase_items.id=return_purchases.id', 'inner')
				->join('warehouses', 'warehouses.id=return_purchases.warehouse_id', 'left')
				->where('return_purchases.supplier_id', $supplier);
				if($biller){
					$this->db->where('return_purchases.biller_id',$biller);
				}
				if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
					if ($user) {
						$this->db->where('return_purchases.created_by', $user);
					}
				}		
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_order_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('Warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('Supplier'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('Products'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('Quantity'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
				

                $row = 2;
                $quantity = 0;
                $grand_total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->quantity);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->grand_total);
                    $quantity += $data_row->quantity;
                    $grand_total += $data_row->grand_total;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row . ":G" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $quantity);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $grand_total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $filename = 'purchase_order_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
					 ));
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
					$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
					 array(
						 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
						 'wrap'       => true
					 ));
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        }else{
			
			$supplier_id = $this->input->get('supplier');
			$this->load->library('datatables');
			$this->datatables
			->select("return_purchases.date, return_purchases.reference_no, warehouses.name as wname, return_purchases.supplier, return_purchase_items.product_name, return_purchase_items.quantity, return_purchases.grand_total", false)
			->from("return_purchases")
			->join('return_purchase_items', 'return_purchase_items.id=return_purchases.id', 'inner')
			->join('warehouses', 'warehouses.id=return_purchases.warehouse_id', 'left')
			->where('return_purchases.supplier_id', $supplier);
			if($biller){
					$this->db->where('return_purchases.biller_id',$biller);
				}
			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('return_purchases.created_by', $user);
				}
			}			
			echo $this->datatables->generate();
		}
		
		
	}
	
	function getDepositsReport2()
	{
		
		if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }

		 if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        $user_biller_id = $this->session->userdata('biller_id');

        $this->load->library('datatables');
        $this->datatables
            ->select("reference,date,deposits.note, deposits.amount, paid_by, CONCAT(erp_users.first_name, ' ', erp_users.last_name) as create_by", false)
            ->from("deposits")
            ->join('companies', 'companies.id = deposits.company_id', 'inner')
            ->join('users', 'users.id = deposits.created_by', 'left')
            ->where('deposits.company_id', $supplier)
            ->order_by('date', 'desc');

            if($user_biller_id != NULL){
                $this->datatables->where('deposits.biller_id', $user_biller_id);
            }


			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user) {
					$this->datatables->where('deposits.created_by', $user);
				}
			}

		echo $this->datatables->generate();
		
	}
	
	// income by Projects
	function income_statement_by_project($start_date, $end_date, $pdf = NULL, $xls = NULL, $biller_id = NULL, $year=NULL)
    {
        $this->erp->checkPermissions('income_statement',NULL,'account_report');
		if (!$start_date) {
            $start = $this->db->escape(date('Y-01') . '-1');
            $start_date = date('Y-01') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-12-t 23:59'));
            $end_date = date('Y-12-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
		
		$acc_setting = $this->site->get_Acc_setting();
		$user = $this->site->getUser();
		if($biller_id != NULL){
			$this->data['biller_id_no_sep'] = $biller_id;
			$biller_sep = explode('-', $biller_id);
			
			$bills = '';
			for($i=0; $i < count($biller_sep); $i++){
				$bills .= $biller_sep[$i] . ',';
			}
			$biller_id =  rtrim($bills, ',');
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
				$biller_id = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		if($this->input->post('biller')){
			$biller_id = $this->input->post('biller');
		}
		$year = date('Y');
		
		$this->data['year'] = $year;
		$this->data['biller_id'] = $biller_id;
		
		$this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);

		$from_date = date('Y-m-d H:m',strtotime(urldecode($start_date)));
		$to_date = date('Y-m-d H:m',strtotime(urldecode($end_date)));
		
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('income_by_project')));
        $meta = array('page_title' => lang('income_by_project'), 'bc' => $bc);
		
		$monthlyIncomes = $this->accounts_model->getMonthlyIncomes($acc_setting->default_sale_discount,'40',$from_date,$to_date,$biller_id, $year);
		
		//$this->erp->print_arrays($year);
		$this->data['monthlyIncomes'] = $monthlyIncomes;
		$this->data['acc_setting'] = $acc_setting;

		if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/income_statement_by_project', $this->data, true);
            $name = lang("income_statement_by_project") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_income_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
		
		$m_year = $year;
		$m_start = date('Y', strtotime(urldecode($start_date)));
		$m_end = date('Y', strtotime(urldecode($end_date)));
		if($m_start != $m_end){
			$m_year = $m_start . ' - ' . $m_end;
		}else{
			$m_year = $m_start;
		}
		
		if($xls){
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->setTitle(lang('Income Statement_by_project'));
			//$this->excel->getActiveSheet()->SetCellValue('A4','');
			$this->excel->getActiveSheet()->SetCellValue('G1',lang($m_year));
			$this->excel->getActiveSheet()->SetCellValue('A2',lang('Code'));
			$this->excel->getActiveSheet()->SetCellValue('B2', lang('Project'));
			$this->excel->getActiveSheet()->SetCellValue('C2', lang('Amount'));
			$this->excel->getActiveSheet()->SetCellValue('D2', lang('Period'));
			$this->excel->getActiveSheet()->SetCellValue('E2', lang('Start Date'));
			$this->excel->getActiveSheet()->SetCellValue('F2', lang('End Date'));
			$this->excel->getActiveSheet()->SetCellValue('G2', lang('Jan'));
			$this->excel->getActiveSheet()->SetCellValue('H2', lang('Feb'));
			$this->excel->getActiveSheet()->SetCellValue('I2', lang('Mar'));
			$this->excel->getActiveSheet()->SetCellValue('J2', lang('Apr'));
			$this->excel->getActiveSheet()->SetCellValue('K2', lang('May'));
			$this->excel->getActiveSheet()->SetCellValue('L2', lang('Jun'));
			$this->excel->getActiveSheet()->SetCellValue('M2', lang('Jul'));
			$this->excel->getActiveSheet()->SetCellValue('N2', lang('Aug'));
			$this->excel->getActiveSheet()->SetCellValue('O2', lang('Sep'));
			$this->excel->getActiveSheet()->SetCellValue('P2', lang('Oct'));
			$this->excel->getActiveSheet()->SetCellValue('Q2', lang('Nov'));
			$this->excel->getActiveSheet()->SetCellValue('R2', lang('Dec'));
			$this->excel->getActiveSheet()->SetCellValue('S2', lang('Total'));
			$this->excel->getActiveSheet()->SetCellValue('T2', lang('Balance'));
			$this->excel->getActiveSheet()->mergeCells('G1:T1');	
			$this->excel->getActiveSheet()->mergeCells('A1:F1');
			$sum_jan = 0;
			$sum_feb = 0;
			$sum_mar = 0;
			$sum_apr = 0;
			$sum_may = 0;
			$sum_jun = 0;
			$sum_jul = 0;
			$sum_aug = 0;
			$sum_sep = 0;
			$sum_oct = 0;
			$sum_nov = 0;
			$sum_dec = 0;
			$sum_total = 0;
			$sum_balance = 0;
			$sum_amount = 0;
			$rows=3;
			$row=3;
			$row1=4;
			$income = 3;
			
			$BOStyle = array(
			   'borders' => array(
					'allborders' => array(
					  'style' => PHPExcel_Style_Border::BORDER_THIN
					)
			    )
			);
			$bold = array(
				'font' => array(
					'bold' => true
				)
			);
			foreach($monthlyIncomes->result() as $project){
			$this->excel->getActiveSheet()->SetCellValue('A' . $income, $project->code);
			$this->excel->getActiveSheet()->SetCellValue('B' . $income, $project->company);
			$this->excel->getActiveSheet()->SetCellValue('C' . $income, $this->erp->formatMoney($project->total_amount));
			$this->excel->getActiveSheet()->SetCellValue('D' . $income, $project->period);
			$this->excel->getActiveSheet()->SetCellValue('E' . $income, $project->start_date);
			$this->excel->getActiveSheet()->SetCellValue('F' . $income, $project->end_date);
			$this->excel->getActiveSheet()->SetCellValue('G' . $income, number_format(abs($project->jan), 2));
			$this->excel->getActiveSheet()->SetCellValue('H' . $income,	number_format(abs($project->feb), 2));
			$this->excel->getActiveSheet()->SetCellValue('I' . $income,	number_format(abs($project->mar), 2));
			$this->excel->getActiveSheet()->SetCellValue('J' . $income,	number_format(abs($project->apr), 2));
			$this->excel->getActiveSheet()->SetCellValue('K' . $income, number_format(abs($project->may), 2));
			$this->excel->getActiveSheet()->SetCellValue('L' . $income, number_format(abs($project->jun), 2));
			$this->excel->getActiveSheet()->SetCellValue('M' . $income, number_format(abs($project->jul), 2));
			$this->excel->getActiveSheet()->SetCellValue('N' . $income, number_format(abs($project->aug), 2));
			$this->excel->getActiveSheet()->SetCellValue('O' . $income, number_format(abs($project->sep), 2));
			$this->excel->getActiveSheet()->SetCellValue('P' . $income, number_format(abs($project->oct), 2));
			$this->excel->getActiveSheet()->SetCellValue('Q' . $income, number_format(abs($project->nov), 2));
			$this->excel->getActiveSheet()->SetCellValue('R' . $income, number_format(abs($project->dece), 2));
			$this->excel->getActiveSheet()->SetCellValue('S' . $income, number_format(abs($project->total), 2));
			$this->excel->getActiveSheet()->SetCellValue('T' . $income, number_format($project->total_amount - abs($project->total), 2));
			$this->excel->getActiveSheet()->getStyle('A'.$row.':T'.$row)->applyFromArray($BOStyle);
			$this->excel->getActiveSheet()->getStyle('A1:T4')->applyFromArray($BOStyle);
			
			$income++;
			//$this->excel->getActiveSheet()->getStyle('A'.$row1.':T'.$row1)->applyFromArray($bold);
			//$row++;
			//$row1++;
				if($income>3){
					$rows++;
					$row++;
					$row1++;
					
				}
				$sum_amount += abs($project->total_amount);
				$sum_jan += abs($project->jan);
				$sum_feb += abs($project->feb);
				$sum_mar += abs($project->mar);
				$sum_apr += abs($project->apr);
				$sum_may += abs($project->may);
				$sum_jun += abs($project->jun);
				$sum_jul += abs($project->jul);
				$sum_aug += abs($project->aug);
				$sum_sep += abs($project->sep);
				$sum_oct += abs($project->oct);
				$sum_nov += abs($project->nov);
				$sum_dec += abs($project->dece);
				$sum_total += abs($project->total);
				$sum_balance += $project->total_amount - abs($project->total);
				
			}
			
			$this->excel->getActiveSheet()->SetCellValue('C' . $rows,number_format($sum_amount, 2));
			$this->excel->getActiveSheet()->SetCellValue('G' . $rows,number_format($sum_jan, 2));
			$this->excel->getActiveSheet()->SetCellValue('H' . $rows,number_format($sum_feb, 2));
			$this->excel->getActiveSheet()->SetCellValue('I' . $rows,number_format($sum_mar, 2));
			$this->excel->getActiveSheet()->SetCellValue('J' . $rows,number_format($sum_apr, 2));
			$this->excel->getActiveSheet()->SetCellValue('K' . $rows,number_format($sum_may, 2));
			$this->excel->getActiveSheet()->SetCellValue('L' . $rows,number_format($sum_jun, 2));
			$this->excel->getActiveSheet()->SetCellValue('M' . $rows,number_format($sum_jul, 2));
			$this->excel->getActiveSheet()->SetCellValue('N' . $rows,number_format($sum_aug, 2));
			$this->excel->getActiveSheet()->SetCellValue('O' . $rows,number_format($sum_sep, 2));
			$this->excel->getActiveSheet()->SetCellValue('P' . $rows,number_format($sum_oct, 2));
			$this->excel->getActiveSheet()->SetCellValue('Q' . $rows,number_format($sum_nov, 2));
			$this->excel->getActiveSheet()->SetCellValue('R' . $rows,number_format($sum_dec, 2));
			$this->excel->getActiveSheet()->SetCellValue('S' . $rows,number_format($sum_total, 2));
			$this->excel->getActiveSheet()->SetCellValue('T' . $rows,number_format($sum_balance, 2));
			$this->excel->getActiveSheet()->getStyle('A1:F1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$this->excel->getActiveSheet()->getStyle('G1:T1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
		    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
			//$this->excel->getActiveSheet()->getStyle('I1:J3')->applyFromArray($bold);
			$this->excel->getActiveSheet()->getStyle('A1:T2')->applyFromArray($bold);
			
			$filename = 'income_statement_by_project_'. date('Y-m-d');
			if ($xls) {
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
				header('Cache-Control: max-age=0');

				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				return $objWriter->save('php://output');
			}
		}
		$this->page_construct('reports/income_statement_by_project', $meta, $this->data);
	}
	
	function product($biller_id = NULL,$warehouse_id=null)
    {
        $this->erp->checkPermissions('product',NULL,'product_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
		$this->data['suppliers'] = $this->site->getAllSuppliers();
		$user   = $this->site->getUser();
        $row    = Null;
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}

        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
		if ($this->Owner || $this->Admin) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
			if($this->session->userdata('warehouse_id')){
				$this->data['warehouse_id'] = $warehouse_id;
				$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
			}else{
				$this->data['warehouse_id']=null;
				$this->data['warehouse'] = null;
			}
        } else {
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $this->session->userdata('warehouse_id');
            $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->site->getWarehouseByID($this->session->userdata('warehouse_id')) : NULL;
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('products_report')));
        $meta = array('page_title' => lang('products_report'), 'bc' => $bc);
         
        $this->load->model('Products_model');
        $this->data['products'] = $this->Products_model->getProduct();
        
        $this->page_construct('reports/product_test', $meta, $this->data);
    }

    function inventory($pdf, $excel, $reference, $wahouse_id, $product_id, $from_date, $to_date, $stockType, $cate_id, $biller)
    {
        $wid = $this->reports_model->getWareByUserID();

        $this->erp->checkPermissions('inventory_valuation_detail', NULL, 'product_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $reference = str_replace('-', '/', $reference);
        $row        = null;
        if ($pdf || $excel) {

            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('inventory'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang(''));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('type'));
            $this->excel->getActiveSheet()->SetCellValue('C1', lang('date'));
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('name'));
            $this->excel->getActiveSheet()->SetCellValue('E1', lang('reference'));
            $this->excel->getActiveSheet()->SetCellValue('F1', lang('biller'));
            $this->excel->getActiveSheet()->SetCellValue('G1', lang('qty'));
            $this->excel->getActiveSheet()->SetCellValue('H1', lang('cost'));
            $this->excel->getActiveSheet()->SetCellValue('I1', lang('on_hand'));
            $this->excel->getActiveSheet()->SetCellValue('J1', lang('avg_cost'));
            $this->excel->getActiveSheet()->SetCellValue('K1', lang('asset_value'));

            $styleArrays = array(
                'font' => array(
                    'bold' => true,
                    'color' => array('rgb' => 'FFFFFF'),
                    'size' => 10,
                    'name' => 'Verdana'
                ),
                'fill' => array(
                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                    'color' => array('rgb' => '428BCA')
                )
            );
            $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(30);
            $this->excel->getActiveSheet()->getStyle('A1:K1')->applyFromArray($styleArrays);
            $styleBorderArray = array(
                'borders' => array(
                    'allborders' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN,
                        'color' => array('rgb' => '357EBD')
                    )
                )
            );
            $this->excel->getActiveSheet()->getStyle('A1:K1')->applyFromArray($styleBorderArray);
            $this->excel->getActiveSheet()->getStyle('A1:K1')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A1:K1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A1' . $row . ':K1' . $row)->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle('A1' . $row . ':K1' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $row = 2;
            $gtt = 0;
            $gqty = 0;
            $warehouses = $this->reports_model->getWarehousesInventoryValuation($wid, $wahouse_id, $cate_id, $product_id, $stockType, $from_date, $to_date, $reference, $biller);
            //$this->erp->print_arrays($warehouses);
            foreach ($warehouses as $ware) {
                // $total_qoh_per_warehouse = 0;
                // $total_assetVal_per_warehouse = 0;
                $this->excel->getActiveSheet()->SetCellValue('A' . $row, "Warehouse >> " . $ware->warehouse);
                $this->excel->getActiveSheet()->mergeCells('A' . $row . ':K' . $row);
                // $categories = $this->reports_model->getCategories($ware->warehouse_id);
                $categories = $this->reports_model->getCategoriesInventoryValuationByWarehouse($ware->warehouse_id, $cate_id, $product_id, $stockType, $from_date, $to_date, $reference, $biller);
                $total_qoh_per_warehouse_cat = 0;
                $total_assetVal_per_warehouse_cat = 0;

                // Styles for Warehouses
                $styleArrays = array(
                    'font' => array(
                        'bold' => true,
                        'color' => array('rgb' => '009900'),
                        'size' => 11,
                        'name' => 'Verdana'
                    ),
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'f9f9f9')
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN,
                            'color' => array('rgb' => 'e6e6e6')
                        )
                    )
                );
                $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleArrays);
                $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(30);
                $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setSize(12);

                $row++;
                foreach ($categories as $cat) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, "   " . "Category >> " . $cat->category_name);
                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':K' . $row);

                    $total_qoh_per_warehouse = 0;
                    $total_assetVal_per_warehouse = 0;
                    $products = $this->reports_model->getProductsInventoryValuationByWhCat($ware->warehouse_id, ($cate_id ? $cate_id : $cat->category_id), $product_id, $stockType, $from_date, $to_date, $reference, $biller);

                    // Styles for categories
                    $styleArrays = array(
                        'font' => array(
                            'bold' => true,
                            'color' => array('rgb' => 'ff9900'),
                            'size' => 11,
                            'name' => 'Verdana'
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A' . $row)->applyFromArray($styleArrays);
                    $styleBorderArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN,
                                'color' => array('rgb' => 'e6e6e6')
                            )
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleBorderArray);
                    $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(30);
                    $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A' . $row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setSize(11);

                    $row++;

                    foreach ($products as $pro) {

                        if(!empty($pro->product_id)){
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, $pro->product_code ? "               " . $pro->product_code . ' >> ' . $pro->product_name : "     " . $pro->product_id . ' >> ' . $pro->product_name . '(' . $pro->un . ')');
                            $this->excel->getActiveSheet()->mergeCells('A' . $row . ':K' . $row);

                        }
                        $qty_on_hand = 0;
                        $total_on_hand = 0;
                        $total_asset_val = 0;
                        // $prod = $this->reports_model->getByProduct($ware->warehouse_id,$cat->category_id,$pro->product_id);
                        $prod = $this->reports_model->getProductsInventoryValuationByProduct($ware->warehouse_id, ($cate_id ? $cate_id : $cat->category_id), ($product_id ? $product_id : $pro->product_id), $stockType, $from_date, $to_date, $reference, $biller);

                        // Styles for Products
                        $styleArrays = array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'f9f9f9')
                            )
                        );
                        $this->excel->getActiveSheet()->getStyle('A' . $row)->applyFromArray($styleArrays);
                        $styleBorderArray = array(
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN,
                                    'color' => array('rgb' => 'e6e6e6')
                                )
                            )
                        );
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleBorderArray);
                        $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('A' . $row)->getFont()->setBold(true);

                        $row++;
                        //$this->erp->print_arrays($prod);
                        foreach ($prod as $getpro) {

                            $p_cost = 0;
                            $p_qty = 0;

                            if ($getpro->type == 'PURCHASE'
                                || $getpro->type == 'SALE RETURN'
                                || $getpro->type == 'OPENING QUANTITY') {
                                $p_qty = $getpro->quantity_balance_unit;
                            } else if ($getpro->type == 'TRANSFER') {
                                $p_qty = $getpro->quantity_balance_unit;
                            } else if ($getpro->type == 'ADJUSTMENT') {
                                $p_qty = $getpro->quantity_balance_unit;
                            } else if ($getpro->type == 'USING STOCK') {
                                $p_qty = $getpro->quantity_balance_unit;
                            } else if ($getpro->type == 'RETURN USING STOCK') {
                                $p_qty = $getpro->quantity_balance_unit;
                            } else if ($getpro->type == 'CONVERT') {
                                $p_qty = $getpro->quantity_balance_unit;
                            } else if ($getpro->type == 'SALE' || $getpro->type == 'DELIVERY') {
                                if ($getpro->quantity > 0) {
                                    $p_qty = (-1) * $getpro->quantity_balance_unit;
                                } else {
                                    $p_qty = $getpro->quantity_balance_unit;
                                }
                            } else {
                                $p_qty = $getpro->quantity_balance_unit;
                            }

                            $unit_name = $this->erp->convert_unit_2_string($getpro->product_id, $p_qty);

                            $qty_on_hand += $p_qty;// $pr->qty_on_hand;

                            $p_cost = $this->erp->formatDecimal($getpro->total_cost);
                            $avg_cost = $getpro->avg_cost;
                            $this->db->select("cost")->where("erp_products.id", $getpro->product_id);
                            $cost = $this->erp->formatDecimal($this->db->get_where("erp_products", array("id" => $pro->product_id), 1)->row()->cost, 4);
                            $asset_value = $cost * $qty_on_hand;

                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $getpro->tran_type);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->erp->hrsd($getpro->tran_date));
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $getpro->product_name);
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $getpro->reference_no . " ");
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $getpro->biller_company ? $getpro->biller_company : $getpro->biller_name);
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatQuantity($p_qty) . ' ' . strip_tags($unit_name));
                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $p_cost);
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $qty_on_hand);
                            $this->excel->getActiveSheet()->SetCellValue('J' . $row, $cost);
                            $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatMoney($asset_value));
                            // $a = $i+1;
                            $total_on_hand = $qty_on_hand;
                            $total_asset_val += $asset_value;

                            // Styles for loop data
                            $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(40);
                            $this->excel->getActiveSheet()->getStyle('F' . $row . ':K' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $this->excel->getActiveSheet()->getStyle('B' . $row . ':K' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                            $styleBorderArray = array(
                                'borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN,
                                        'color' => array('rgb' => 'e6e6e6')
                                    )
                                )
                            );
                            $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleBorderArray);
                            if ($pdf) {
                                $styleBorderArray = array(
                                    'borders' => array(
                                        'allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)
                                    )
                                );
                                $this->excel->getActiveSheet()->getStyle('B' . $row . ':K' . $row)->applyFromArray($styleBorderArray);
                            }

                            $row++;
                        }

                        // $total_qoh_per_warehouse += $total_on_hand;
                        // $total_assetVal_per_warehouse += $total_asset_val;
                        $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang('total') . ">>");
                        $this->excel->getActiveSheet()->getStyle('A' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $total_on_hand);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatMoney($total_asset_val));
                        $this->excel->getActiveSheet()->getStyle('I' . $row . ':K' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);

                        $total_qoh_per_warehouse += $total_on_hand;
                        $total_assetVal_per_warehouse += $total_asset_val;

                        // Styles for Total
                        $styleArrays = array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'f9f9f9')
                            )
                        );
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleArrays);
                        $styleBorderArray = array(
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN,
                                    'color' => array('rgb' => 'e6e6e6')
                                )
                            )
                        );
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleBorderArray);
                        $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(28);
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('I' . $row . ':K' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('K' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle('A' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setBold(true);

                        $row++;
                        // $this->excel->getActiveSheet()->SetCellValue('I' .$i, $total_on_hand);
                        // $this->excel->getActiveSheet()->SetCellValue('J' .$i, $total_asset_val);

                    }

                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang('total') . ">>" . $cat->category_name);
                    $this->excel->getActiveSheet()->getStyle('A' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $total_qoh_per_warehouse);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatMoney($total_assetVal_per_warehouse));
                    $this->excel->getActiveSheet()->getStyle('I' . $row . ':K' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);

                    $total_qoh_per_warehouse_cat += $total_qoh_per_warehouse;
                    $total_assetVal_per_warehouse_cat += $total_assetVal_per_warehouse;

                    // Styles for Total-Category
                    $styleArrays = array(
                        'font' => array(
                            'bold' => true,
                            'color' => array('rgb' => 'ff9900'),
                            'size' => 11,
                            'name' => 'Verdana'
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A' . $row)->applyFromArray($styleArrays);
                    $styleBorderArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN,
                                'color' => array('rgb' => 'e6e6e6')
                            )
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleBorderArray);
                    $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(28);
                    $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('I' . $row . ':K' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                    $this->excel->getActiveSheet()->getStyle('K' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setBold(true);

                    $row++;
                }
                $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row);
                $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang('total') . ">>" . $ware->warehouse);
                $this->excel->getActiveSheet()->getStyle('A' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setBold(true);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $total_qoh_per_warehouse_cat);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatMoney($total_assetVal_per_warehouse_cat));
                $this->excel->getActiveSheet()->getStyle('I' . $row . ':K' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                $this->excel->getActiveSheet()->getStyle('K' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $gtt += $total_qoh_per_warehouse_cat;
                $gqty += $total_assetVal_per_warehouse_cat;

                // Styles for Total-Warehouses
                $styleArrays = array(
                    'font' => array(
                        'bold' => true,
                        'color' => array('rgb' => '009900'),
                        'size' => 12,
                        'name' => 'Verdana'
                    ),
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'f9f9f9')
                    )
                );
                $styleArrays2 = array(
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => 'f9f9f9')
                    )
                );
                $this->excel->getActiveSheet()->getStyle('A' . $row)->applyFromArray($styleArrays);
                $this->excel->getActiveSheet()->getStyle('H' . $row . ':K' . $row)->applyFromArray($styleArrays2);
                $styleBorderArray = array(
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN,
                            'color' => array('rgb' => 'e6e6e6')
                        )
                    )
                );
                $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleBorderArray);
                $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(30);
                $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('I' . $row . ':K' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                $this->excel->getActiveSheet()->getStyle('A' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setBold(true);

                $row++;
            }

            $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row);
            $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang('grand_total'));
            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatQuantity($gtt));
            $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->erp->formatMoney($gqty));

            // Styles for Grand Total
            $styleArrays = array(
                'font' => array(
                    'bold' => true,
                    'color' => array('rgb' => 'FFFFFF'),
                    'size' => 13,
                    'name' => 'Verdana'
                ),
                'fill' => array(
                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                    'color' => array('rgb' => '428BCA')
                )
            );
            $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleArrays);
            $styleBorderArray = array(
                'borders' => array(
                    'allborders' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN,
                        'color' => array('rgb' => '357EBD')
                    )
                )
            );
            $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray($styleBorderArray);
            $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(30);
            $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('I' . $row . ':K' . $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->getFont()->setBold(true);


            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(25);
            $filename = lang('Inventory Valuation Detail ') . date('Y_m_d_H_i_s');
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            if ($pdf) {
                $styleArray = array(
                    'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                );
                $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($excel) {
                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');


                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
        }
    }
	
	function inventory_profit($pdf, $excel,$reference,$wahouse_id,$product_id,$from_date,$to_date,$cate_id,$biller){
		$wid = $this->reports_model->getWareByUserID();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $row    = null;
        if ($pdf || $excel) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('inventory'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang(''));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('cost'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('profit'));
				$this->excel->getActiveSheet()->getStyle('A1'. $row.':L1'.$row)->getFont()->setBold(true);
				$this->excel->getActiveSheet()->getStyle('A1' .$row.':L1'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                $row = 2;
                $gqty = 0;
				$gprice = 0;
				$gcost = 0;
				$gprofit = 0; 
                $warehouses = $this->reports_model->getWarehousesProductProfit($wid,$wahouse_id,$cate_id,$product_id,$from_date,$to_date,$reference,$biller);
                
				foreach($warehouses as $ware){
					
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, "Warehouse >> ".$ware->warehouse);
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':I'.$row);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':K'.$row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':K'.$row)->getFont()->setSize(12);
                    $categories = $this->reports_model->getCategoriesProductProfitByWarehouse($ware->warehouse_id,$cate_id,$product_id,$from_date,$to_date,$reference,$biller);
                    
					$total_quantity_by_warehouse =0;
					$total_cost_by_warehouse =0;
					$total_price_by_warehouse =0;
					$total_profit_by_warehouse =0;
					
                    $row++;   
                    foreach($categories as $cat){
						
                        $this->excel->getActiveSheet()->SetCellValue('A' .$row, "   "."Category >> ".$cat->category_name);
						$this->excel->getActiveSheet()->mergeCells('A'.$row.':I'.$row);
                        $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':K'.$row)->getFont()->setSize(11);
                        $products = $this->reports_model->getProductsProfitByWhCat($ware->warehouse_id,($cate_id?$cate_id:$cat->id),$product_id,$from_date,$to_date,$reference,$biller);
						$row++;

                        foreach ($products as $pro) {

							if(!empty($pro->product_id)){
							   $this->excel->getActiveSheet()->SetCellValue('A' .$row, $pro->product_code?"     ".$pro->product_code.' >> '.$pro->product_name:"     ".$pro->product_id.' >> '.$pro->product_name.'('.$pro->un.')');
							   $this->excel->getActiveSheet()->mergeCells('A'.$row.':I'.$row);
							   $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setBold(true);
							}
						
							$total_quantity = 0;
							$total_cost = 0;
							$total_price = 0;
							$total_profit = 0;
							$unit_name = "";
												
							$prod = $this->reports_model->getProductsProfitByProduct($ware->warehouse_id,($cate_id?$cate_id:$cat->id),($product_id?$product_id:$pro->product_id),$from_date,$to_date,$reference,$biller);
					    
							$row++;
							foreach ($prod as $getpro) {
								
								$p_qty = $getpro->quantity;
								$unit_name = $this->erp->convert_unit_2_string($getpro->product_id,$p_qty);
								$unit_cost = $this->erp->formatMoney($getpro->unit_cost);
								$unit_price = $this->erp->formatMoney($getpro->unit_price);
								$profit = $unit_price - $unit_cost;
								$total_quantity+=$getpro->quantity;
								$total_cost+=$getpro->unit_cost;
								$total_price+=$getpro->unit_price;
								$total_profit+=$profit;
								
								$this->excel->getActiveSheet()->SetCellValue('B' .$row, $this->erp->hrsd($getpro->date));
								$this->excel->getActiveSheet()->SetCellValue('C' .$row, $getpro->reference_no);
								$this->excel->getActiveSheet()->SetCellValue('D' .$row, $getpro->customer);
								$this->excel->getActiveSheet()->SetCellValue('E' .$row, $getpro->biller_name);
								$this->excel->getActiveSheet()->SetCellValue('F' .$row, $p_qty);
								$this->excel->getActiveSheet()->SetCellValue('G' .$row, $unit_cost);
								$this->excel->getActiveSheet()->SetCellValue('H' .$row, $unit_price);
								$this->excel->getActiveSheet()->SetCellValue('I' .$row, $profit);
								
								$row++;                   
							}

                            $this->excel->getActiveSheet()->mergeCells('A'.$row.':E'.$row);
                            $this->excel->getActiveSheet()->SetCellValue('A' .$row, lang('total').">>");
                            $this->excel->getActiveSheet()->getStyle('A' .$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $this->excel->getActiveSheet()->getStyle('A'. $row.':E'. $row)->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->SetCellValue('F' .$row, $total_quantity);
                            $this->excel->getActiveSheet()->SetCellValue('G' .$row, $total_cost);
                            $this->excel->getActiveSheet()->SetCellValue('H' .$row, $total_price);
                            $this->excel->getActiveSheet()->SetCellValue('I' .$row, $total_profit);
							$this->excel->getActiveSheet()->getStyle('F'.$row. ':I'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
							
						   $row++;  

							$total_quantity_by_warehouse += $total_quantity;
							$total_cost_by_warehouse += $total_cost;
							$total_price_by_warehouse += $total_price;
							$total_profit_by_warehouse += $total_profit;							
                            
                        }
						
						/*
                        $this->excel->getActiveSheet()->mergeCells('A'.$row.':H'.$row);
                        $this->excel->getActiveSheet()->SetCellValue('A' .$row, lang('total').">>".$cat->category_name);
                        //$this->excel->getActiveSheet()->getStyle('A' .$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':K'. $row)->getFont()->setBold(true);
                        //$this->excel->getActiveSheet()->SetCellValue('I' .$row, $total_qoh_per_warehouse);
                        $this->excel->getActiveSheet()->SetCellValue('K' .$row, $total_assetVal_per_warehouse);
                        //$this->excel->getActiveSheet()->getStyle('I'.$row. ':K'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
						*/
                        
						
                        $row++; 
						
                    }
					
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':E'.$row);
                    $this->excel->getActiveSheet()->SetCellValue('A' .$row, lang('total').">>".$ware->warehouse);
                    $this->excel->getActiveSheet()->getStyle('A' .$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':E'. $row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->SetCellValue('F' .$row, $total_quantity_by_warehouse);
                    $this->excel->getActiveSheet()->SetCellValue('G' .$row, $total_cost_by_warehouse);
                    $this->excel->getActiveSheet()->SetCellValue('H' .$row, $total_price_by_warehouse);
                    $this->excel->getActiveSheet()->SetCellValue('I' .$row, $total_profit_by_warehouse);
                    
					//$this->excel->getActiveSheet()->getStyle('I'.$row. ':K'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                    $gqty +=$total_quantity_by_warehouse;
					$gprice +=$total_cost_by_warehouse;
					$gcost +=$total_price_by_warehouse;
					$gprofit +=$total_profit_by_warehouse;

                    $row++;
                }

                $this->excel->getActiveSheet()->mergeCells('A'.$row.':E'.$row);
                $this->excel->getActiveSheet()->SetCellValue('A' .$row, lang('grand_total'));
                $this->excel->getActiveSheet()->getStyle('A' .$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle('A'. $row.':K'. $row)->getFont()->setBold(true);
                $this->excel->getActiveSheet()->SetCellValue('F' .$row, $this->erp->formatDecimal($gqty));
                $this->excel->getActiveSheet()->SetCellValue('G' .$row, $this->erp->formatMoney($gprice));
                $this->excel->getActiveSheet()->SetCellValue('H' .$row, $this->erp->formatMoney($gcost));
                $this->excel->getActiveSheet()->SetCellValue('I' .$row, $this->erp->formatMoney($gprofit));
                //$this->excel->getActiveSheet()->getStyle('I'.$row. ':I'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
     

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                
                $filename = lang('Profit Product'). date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($excel) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    
		
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
        }
    }
	
    function inventory_valuation_detail()
    {
        $this->erp->checkPermissions('inventory_valuation_detail', NULL, 'product_report');
        $wid = $this->reports_model->getWareByUserID();
		$datt =$this->reports_model->getLastDate("inventory_valuation_details","date");
        if ($this->input->post('swarehouse')) {
            $wahouse_id =  $this->input->post('swarehouse');
        }else{
			$wahouse_id = 0;	
        }
        if ($this->input->post('reference_no')) {
            $reference = $this->input->post('reference_no');
        }else{
            $reference = 0;
        }
        if ($this->input->post('category')) {
            $category_id = $this->input->post('category');
        }else{
            $category_id = 0;
        }
        if ($this->input->post('product')) {
            $product_id = $this->input->post('product');
        }else{
            $product_id = 0;
        }
        if ($this->input->post('type')) {
            $stockType = $this->input->post('type');
        }else{
            $stockType = 0;
        }
		
		if ($this->input->post('biller')) {
            $biller = $this->input->post('biller');
        }else{
            $biller = 0;
        }
        if ($this->input->post('from_date')) {
            $from_date =  $this->erp->fld($this->input->post('from_date'));
        }else{
            $from_date = $datt;
        }
        if ($this->input->post('to_date')) {
            $to_date = $this->erp->fld($this->input->post('to_date'));
        }else{
            $to_date= $datt;
        }
       
        $this->data['error']        = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['swarehouses'] 	= $this->reports_model->getWareFullByUSER($wid);
		$this->data['warehouses'] 	= $this->reports_model->getWarehousesInventoryValuation($wid, $wahouse_id,$category_id, $product_id, $stockType, trim($from_date), trim($to_date), $reference, $biller);
		$this->data['categories']   = $this->reports_model->getAllCategories();
		$this->data['products']     = $this->reports_model->getAllProducts();
		$this->data['billers']     	= $this->reports_model->getAllBillers();
        $this->data['plans']		= $this->products_model->getPlan();
		$this->data['reference1'] 	= $reference;
		$this->data['wahouse_id1'] 	= $wahouse_id;
        $this->data['product_id1'] 	= $product_id;
        if($from_date){
            $this->data['from_date1'] = trim($from_date);
        }
        if($to_date){
            $this->data['to_date1'] = trim($to_date);
        }
         $this->data['cate_id1'] 	= $category_id;
         $this->data['stockType1'] 	= $stockType;
         $this->data['biller1'] 	= $biller;

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('inventory_valuation_detail'), 'bc' => $bc);
        $this->page_construct('reports/inventory_valuation_detail', $meta, $this->data);
    }
	
	function customer_products($id = NULL)
    {
		if($this->input->post('id')){
			$id = $this->input->post('id');
		}else{
			$id = null;
		}
        $this->erp->checkPermissions('sales', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['areas'] =  $this->site->getArea();
		$this->data['customers'] = $this->site->getCustomers();
		$this->data['products'] = $this->reports_model->getCustomerProducts();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customers_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->page_construct('reports/customer_products', $meta, $this->data);
    }
	
	function getCustomerProducts() 
    {
		$this->load->library('datatables');
		$this->datatables
			->select('id, code, name, quantity, unit, cost')
			->from('erp_products')
			->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/customer_product_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id");
			
		echo $this->datatables->generate();
    }
	
	function getCustomersReport()
    {
		$datt =$this->reports_model->getLastDate("erp_sales","date");
	    if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
		if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
		if ($this->input->get('start_date')){
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        }else{
            $start_date = $datt;
        }
		if ($this->input->get('end_date')){
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        }else{
            $end_date = $datt;
        }
		if ($this->input->get('group_area')) {
            $group_area = $this->input->get('group_area');
        } else {
            $group_area = NULL;
        }
		if ($this->input->get('customer_group')) {
            $customer_group = $this->input->get('customer_group');
        } else {
            $customer_group = NULL;
        }

        $total_paid = "SUM(COALESCE( (SELECT SUM(IF((erp_payments.paid_by != 'deposit' AND ISNULL(erp_payments.return_id)), erp_payments.amount, IF(NOT ISNULL(erp_payments.return_id), ((-1)*erp_payments.amount), 0))) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id),0)) as paid";

        $total_balance = "SUM((COALESCE(erp_sales.grand_total,0)-COALESCE((SELECT SUM(erp_return_sales.grand_total) FROM erp_return_sales WHERE erp_return_sales.sale_id = erp_sales.id), 0)-COALESCE( (SELECT SUM(IF((erp_payments.paid_by != 'deposit' AND ISNULL(erp_payments.return_id)), erp_payments.amount, IF(NOT ISNULL(erp_payments.return_id), ((-1)*erp_payments.amount), 0))) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id),0)- COALESCE((SELECT SUM(IF(erp_payments.paid_by = 'deposit', erp_payments.amount, 0)) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id  ),0))-COALESCE ((SELECT SUM(erp_payments.discount)FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id),0)) as balance";

        $user_id = $this->session->userdata('user_id');
        $this->load->library('datatables');
        $this->datatables
            ->select("companies.id as idd, companies.customer_group_name, group_areas.areas_group, companies.company, companies.name, companies.phone, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, ".$total_paid.",".$total_balance, FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id = companies.id', 'left')
                ->join('group_areas', 'companies.group_areas_id = group_areas.areas_g_code', 'left')
                ->where('companies.group_name', 'customer')
                ->where('sales.pos <>',1)
                ->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/customer_sale_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "idd");

            // View Rights
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user_id) {
                    $this->db->where('sales.created_by', $user_id);
                }
            }

			if($user){
				$this->datatables->where('erp_sales.created_by',$user);
			}
			if($biller){
				$this->datatables->where('erp_sales.biller_id',$biller);
			}
			if($warehouse){
				$this->datatables->where('erp_sales.warehouse_id',$warehouse);
			} 
			if($group_area){
				$this->datatables->where('companies.group_areas_id',$group_area);
			}
			if($customer_group){
				$this->datatables->where('companies.customer_group_id',$customer_group);
			}
			if($start_date){
				$this->datatables->where('date_format(erp_sales.date,"%Y-%m-%d") BETWEEN "'.$start_date.'" AND "'.$end_date.'"');
			}
		echo $this->datatables->generate();
    }

	function customer_sale_report($user_id = NULL) {
		$this->erp->checkPermissions('customer', false, 'sale_report');

        if (!$user_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_customer_selected"));
            redirect('reports/customers');
        }

        $this->data['warehouses'] = $this->site->getAllWarehouses();
        if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
            $user_biller_id = $this->session->userdata('biller_id');
            $this->data['billers'] = $this->site->getBillerByID(json_decode($user_biller_id));
            $this->data['sales'] = $this->reports_model->getSalesTotalCreatedBy($user_id,$this->session->userdata('user_id'));
            $this->data['total_sales'] = $this->reports_model->getCustomerSaleCreatedBy($user_id,$this->session->userdata('user_id'));
            $this->data['total_quotes'] = $this->reports_model->getCustomerQuoteCreatedBy($user_id,$this->session->userdata('user_id'));
            $this->data['total_returns'] = $this->reports_model->getCustomerReturnCreatedBy($user_id,$this->session->userdata('user_id'));
            $this->data['total_deposit'] = $this->reports_model->getCustomerDepositCreatedBy($user_id,$this->session->userdata('user_id'));
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
            $this->data['sales'] = $this->reports_model->getSalesTotal($user_id);
            $this->data['total_sales'] = $this->reports_model->getCustomerSale($user_id);
            $this->data['total_quotes'] = $this->reports_model->getCustomerQuote($user_id);
            $this->data['total_returns'] = $this->reports_model->getCustomerReturn($user_id);
            $this->data['total_deposit'] = $this->reports_model->getCustomerDeposit($user_id);

        }
		$this->data['users'] = $this->reports_model->getuser($user_id);
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
		$this->data['date'] = isset($date);
        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customers_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->page_construct('reports/customer_sale_report', $meta, $this->data);
	}

	function getCustomerSaleOrderReport()
	{
        $datt =$this->reports_model->getLastDate("sale_order","date");
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('biller')){
            $biller = $this->input->get('biller');
        }else{
            $biller=NULL;
        }
        if ($this->input->get('warehouse')){
            $warehouse = $this->input->get('warehouse');
        }else{
            $warehouse=NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }

        $user_id = $this->session->userdata('user_id');
        $user_biller_id = $this->session->userdata('biller_id');

        $this->load->library('datatables');
            $this->datatables
                ->select("sale_order.id as id, sale_order.date, sale_order.reference_no, sale_order.customer, users.username, sale_order.grand_total, sale_order.paid, (erp_sale_order.grand_total - erp_sale_order.paid) as alacne")
                ->from('sale_order')
                ->join('sale_order_items', 'sale_order_items.sale_order_id = sale_order.id', 'left')
                ->join('products', 'products.id = sale_order_items.product_id', 'left')
                ->join('companies', 'companies.id = sale_order.customer_id','left')
                ->join('users', 'sale_order.saleman_by = users.id', 'left')
                ->where('sale_order.customer_id', $customer)
                ->group_by('sale_order.id');

        if($user_biller_id != NULL){
            $this->db->where('users.biller_id', $user_biller_id);
        }
        if ($biller) {
            $this->db->where('sale_order.biller_id', $biller);
        }
        if ($user) {
            $this->db->where('sale_order.created_by', $user);
        }
        if ($warehouse) {
            $this->db->where('sale_order.warehouse_id', $warehouse);
        }
        if ($start_date) {
            $this->datatables->where('date_format('.$this->db->dbprefix('sale_order').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
        }

        // View Rights
        if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
            if ($user_id) {
                $this->db->where('sale_order.created_by', $user_id);
            }
        }

		echo $this->datatables->generate();

    }

	function getCustomerSaleReport()
    {
        $datt =$this->reports_model->getLastDate("sales","date");
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('biller')){
            $biller = $this->input->get('biller');
        }else{
            $biller=NULL;
        }
        if ($this->input->get('warehouse')){
            $warehouse = $this->input->get('warehouse');
        }else{
            $warehouse=NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->erp->fsd($this->input->get('start_date'));
        } else {
            $start_date = '';
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
        } else {
            $end_date = '';
        }

        $user_id = $this->session->userdata('user_id');
        $user_biller_id = json_decode($this->session->userdata('biller_id'));

        $this->load->library('datatables');
            $this->datatables
                ->select("
                sale_items.id as id, 
                sales.date, 
                sales.reference_no, 
                companies.company as project,
                sale_items.product_name, 
                sales.sale_status,
                sales.grand_total, 
                COALESCE((SELECT SUM(erp_return_sales.grand_total) FROM erp_return_sales WHERE erp_return_sales.sale_id = erp_sales.id), 0) as return_sale,
                COALESCE((SELECT SUM(IF(erp_payments.paid_by = 'deposit', erp_payments.amount, 0)) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id ),0 ) as deposit,
                COALESCE( (SELECT SUM(IF((erp_payments.paid_by != 'deposit' AND ISNULL(erp_payments.return_id)), erp_payments.amount, IF(NOT ISNULL(erp_payments.return_id), ((-1)*erp_payments.amount), 0))) FROM erp_payments WHERE erp_payments.sale_id = erp_sales.id),0) as paid,  
                case 
                when erp_sales.sale_status ='returned' then 0
                 else (erp_sales.grand_total - erp_sales.paid)
                end as balacne,
                sales.payment_status, sales.attachment, sales.join_lease_id,sales.frequency")
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('companies', 'companies.id=sales.biller_id','left')
                ->join('users', 'sales.saleman_by = users.id', 'left')
                ->where('sales.customer_id', $customer)
                //->where('sales.sale_status <> "returned"')
                ->where('sales.pos <> "1"')
                ->group_by('sales.reference_no');

        if($user_biller_id != NULL){
            $this->db->where_in('sales.biller_id', $user_biller_id);
        }
        if ($biller) {
            $this->db->where('sales.biller_id', $biller);
        }
        if ($user) {
            $this->db->where('sales.created_by', $user);
        }
        if ($customer) {
            $this->db->where('sales.customer_id', $customer);
        }
        if ($warehouse) {
            $this->db->where('sales.warehouse_id', $warehouse);
        }
        if ($start_date) {
            $this->datatables->where('date_format('.$this->db->dbprefix('sales').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
        }
        // View Rights
        if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
            if ($user_id) {
                $this->db->where('sales.created_by', $user_id);
            }
        }
		
		echo $this->datatables->generate();
	}
	
	function customer_product_report($user_id = NULL) {
		$this->erp->checkPermissions('customers', TRUE);
        if (!$user_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_customer_selected"));
            redirect('reports/customers');
        }
        $date     =null;
        $this->data['sales'] = $this->reports_model->getSalesTotals($user_id);
        $this->data['total_sales'] = $this->reports_model->getCustomerSales($user_id);
        $this->data['total_quotes'] = $this->reports_model->getCustomerQuotes($user_id);
        $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
		$this->data['total_deposits'] = $this->reports_model->getCustomerDeposits($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
			
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
		
		$this->data['date'] = $date;
		
        $this->data['user_id'] = $user_id;
		//$this->erp->print_arrays($user_id);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customers_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->page_construct('reports/customer_product_report', $meta, $this->data);
	}
	
	function getCustomerProductReport()
	{
		$this->erp->checkPermissions('sales', TRUE);
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
		
		$this->load->library('datatables');
			$this->datatables
				->select("sales.id as id, sales.date, sales.reference_no, sales.customer, users.username, sales.grand_total, sales.paid, (erp_sales.grand_total - erp_sales.paid) as alacne")
				->from('sales')
				->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
				->join('products', 'products.id = sale_items.product_id', 'left')
				->join('companies', 'companies.id=sales.customer_id','left')
				->join('users', 'sales.saleman_by = users.id', 'left')
				->where('sale_items.product_id', $customer);
		
		echo $this->datatables->generate();

    }
	
	function product_price_history() {
		
		$this->erp->checkPermissions('history', NULL, 'product'); 
		
		if ($this->input->post('category_id')) {
            $category_id = $this->input->post('category_id');
			
        } else {
            $category_id = NULL;
        }
		if ($this->input->post('product_id')) {
            $product_id = $this->input->post('product_id');			
        } else {
            $product_id = NULL;
        }
		if ($this->input->post('start_date')) {
            $start_date = $this->input->post('start_date');			
        } else {
            $start_date = NULL;
        }
		if ($this->input->post('end_date')) {
            $end_date = $this->input->post('end_date');			
        } else {
            $end_date = NULL;
        }
		
		$products = $this->reports_model->getProductName($category_id, $product_id); 
		$history = array();
		foreach($products as $product) {
			$history = $this->reports_model->getProductHistoriesByID($product->id, $start_date, $end_date);
			if($history) {
				$product->histories = $history;
			}else {
				$product->histories = array();
			}
		}
		$this->data['products'] = $products;
		$this->data['cate'] = $this->reports_model->getCategory();
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_price_history')));
        $meta = array('page_title' => lang('product_price_history'), 'bc' => $bc);
        $this->page_construct('reports/product_price_history', $meta, $this->data);
		
	}
	
	function productHistory_actions(){		
		
	$this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {
			if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('product_price_history')); //Sheet Name
				
				
				$styleArray = array(
					'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'color' => array('rgb' => 'D9EDEF')
					),
					'font'  => array(
						'bold'  => true,
						'color' => array('rgb' => '0000FF'),
						'name'  => 'Verdana'
					)
				);
				
				$proback = array(
					'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'color' => array('rgb' => 'CCCCCC'),
					)
				);
				
                if(isset($_POST['check'])){
					$ids = $_POST['check'];
					
					$products = $this->reports_model->getProductName(null, null, $ids);
				
				}else{
					$all_ids = $_POST['all_check'];
					$products = $this->reports_model->getProductName(NULL, NULL, $all_ids);
				}			
				
				$num = 1;
				$g = 2;
				
				foreach($products  as $product){
					$start_date = NULL;
					$end_date = NULL;
					
					if(isset($_POST['hstart_date'])) {
						$start_date = $_POST['hstart_date'];
					}
					if(isset($_POST['hend_date'])) {
						$end_date = $_POST['hend_date'];
					}
					$result = $this->reports_model->getProductHistoriesByID($product->id, $start_date, $end_date);
					
					$this->excel->getActiveSheet()->SetCellValue('A'.($num) , strtoupper($product->name))->getStyle("A" . ($num))->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->mergeCells('A'.($num).':B'.($num));
					
					$this->excel->getActiveSheet()->getStyle("A" . ($num+1). ':'. "B" . ($num+1) )->applyFromArray($proback);
					
					$this->excel->getActiveSheet()->SetCellValue('A'.($num+1), lang('date'));
					$this->excel->getActiveSheet()->SetCellValue('B'.($num+1), lang('price'));									
					
					$this->excel->getActiveSheet()->SetCellValue('A' .($g+$num), 'Now');
					$this->excel->getActiveSheet()->SetCellValue('B' .($g+$num), $this->erp->formatMoney($product->price));
					$g++;
					
					foreach($result as $data_row){
						
						$this->excel->getActiveSheet()->SetCellValue('A' .($g+$num), $this->erp->hrsd($data_row->date));
						$this->excel->getActiveSheet()->SetCellValue('B' .($g+$num), $this->erp->formatMoney($data_row->price));
						$g++;
					}
					
					
					$num = $num + $g;
					$g = 2;
					
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(50);
				}			
				
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$filename = 'sales_report_detail_' . date('Y_m_d_H_i_s');  //file name with date
				if ($this->input->post('form_action') == 'export_pdf') {
					$styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
					$this->excel->getDefaultStyle()->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
					require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
					$rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
					$rendererLibrary = 'MPDF';
					$rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
					if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
						die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
							PHP_EOL . ' as appropriate for your directory structure');
					}

					header('Content-Type: application/pdf');
					header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
					header('Cache-Control: max-age=0');

					$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
					return $objWriter->save('php://output');
				}
				if ($this->input->post('form_action') == 'export_excel') {
					header('Content-Type: application/vnd.ms-excel');
					header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
					header('Cache-Control: max-age=0');

					$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
					return $objWriter->save('php://output');
				}

				redirect($_SERVER["HTTP_REFERER"]);
			}
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	function edit_history($id = NULL)
    {
        $this->erp->checkPermissions(false, true);

        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		$this->form_validation->set_rules('date', lang("date"), 'required');
        if ($this->form_validation->run() == true) {
			if ($this->input->post('date')) {
                $date = $this->erp->fld($this->input->post('date'));
            } else {
                $date = date('Y-m-d H:i:s');
            }
			$price = str_replace(',', '', $this->input->post('price'));
			
			$data = array(
							'date' => $date,
							'price' => $price
						 );
        }
		
        if ($this->form_validation->run() == true && $this->reports_model->updateProductHistoryByID($id, $data)) {
            $this->session->set_flashdata('message', lang("product_price_history_updated"));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->data['history'] = $this->reports_model->getProductHistoryByID($id);
			$this->data['id'] = $id;
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['modal_js'] = $this->site->modal_js();
            $this->load->view($this->theme . 'reports/edit_history', $this->data);
        }
    }
	
	function delete_history($id = NULL)
    {
        $this->erp->checkPermissions(NULL, TRUE);

        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }

        if ($this->reports_model->deleteProductHistory($id)) {
            echo lang("product_price_history_x_deleted");
        } else {
            $this->session->set_flashdata('warning', lang('customer_x_deleted_have_sales'));
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . (isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : site_url('welcome')) . "'; }, 0);</script>");
        }
    }
	
	function customer_transfers()
    {
        $this->erp->checkPermissions('customer',NULL,'sale_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['areas'] =  $this->site->getArea();
		$this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customers_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->page_construct('reports/customer_transfers', $meta, $this->data);
    }
	
	function getCustomerTransfers($pdf = NULL, $xls = NULL)
    {
        
        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('companies') . ".id as idd, company, name, phone, email, group_areas.areas_group, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, (CASE WHEN (COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) < 0 THEN 0 ELSE (COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) END) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id=companies.id')
				->join('group_areas','group_areas.areas_g_code = companies.group_areas_id')
                ->where('companies.group_name', 'customer')
                ->order_by('companies.company asc')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatNumber($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($data_row->balance));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'customers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			if ($this->input->get('group_area')) {
            $group_area = $this->input->get('group_area');
				
			} else {
				$group_area = NULL;
			}
			if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
				
			} else {
				$customer = NULL;
			}
            $this->load->library('datatables');
            $this->datatables
                ->select('transfer_customers.id as id, transfer_customers.date, old.name as old_customer, new.name as new_customer, transfer_customers.grand_total, COALESCE(erp_transfer_customers.paid, 0) as paid, COALESCE((erp_transfer_customers.grand_total - erp_transfer_customers.paid), 0) AS balance, transfer_customers.transfer_charge')
                ->from("transfer_customers")
				->join('companies as old','transfer_customers.old_customer = old.id', 'left')
				->join('companies as new','transfer_customers.new_customer = new.id', 'left')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/customer_transfers_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id");
                //->unset_column('id');
			if ($group_area) {
				$this->datatables->where('companies.group_areas_id', $group_area);
			}
			if ($customer) {
				$this->datatables->where('companies.id', $customer);
			}
            echo $this->datatables->generate();
        }

    }
	
	function customer_transfers_report($tran_id = NULL)
    {
        $this->erp->checkPermissions('customers', TRUE);
		
        if (!$tran_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_customer_selected"));
            redirect('reports/customers');
        }
		
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		
		$transfer = $this->sales_model->getTransferByID($tran_id);
		$list_items = $this->sales_model->getItemsByID($transfer->sale_id);
		$sale_info = $this->sales_model->getSaleInfoByID($transfer->sale_id);
		//$customer_transfers = $this->sales_model->getCustomerTransfersBySaleCustomerID($transfer->sale_id, $transfer->old_customer);
		
		$month_ = $this->sales_model->getMonths($tran_id);
		//$balance = $loan_view1->balance + $loan_view1->principle;
		$curr_interest = $this->sales_model->getCurrentInterestByMonth($tran_id);
		$this->data['current_interest'] = $curr_interest;
		$this->data['inv'] = $this->sales_model->getSalesById($tran_id);
		$this->data['list_items'] = $list_items;
		$this->data['sale_info'] = $sale_info;
		$this->data['sale_id'] = $transfer->sale_id;
		$this->data['customer_id'] = $transfer->old_customer;
		//$this->data['customer_transfers'] = $customer_transfers;
		
        $this->data['user_id'] = $tran_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customers_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->page_construct('reports/customer_transfers_report', $meta, $this->data);

    }
	
	function listCustomerTransfersData($id = NULL, $customer_transfers = NULL)
	{
		$this->erp->checkPermissions('index');
		
		if ($customer_transfers) {
			$this->load->library('datatables');
			$this->datatables
				->select("loans.id, loans.period, 
						 loans.interest, loans.principle, loans.payment, 
						 loans.balance, loans.dateline, IF(erp_loans.old_date, erp_loans.old_date, NULL) AS old_date, loans.note,users.username,paid_date
						 ")
				->from('loans')
				->join('users','users.id=loans.created_by','LEFT')
				->where('sale_id', $id)
				->where('customer_id', $customer_transfers);
		} else {
			$this->load->library('datatables');
			$this->datatables
				->select("loans.id, loans.period, 
						 loans.interest, loans.principle, loans.payment, 
						 loans.balance, loans.dateline, IF(erp_loans.old_date, erp_loans.old_date, NULL) AS old_date, loans.note,users.username,paid_date
						 ")
				->from('loans')
				->join('users','users.id=loans.created_by','LEFT')
				->where('sale_id', $id);
		}
		
        
        echo $this->datatables->generate();
	}
	
	//////////////////////////rothana addition//////////////////////
	
	public function sales_detail($biller_id = NULL,$warehouse_id=null)
	{
		$this->erp->checkPermissions('report_sale',NULL,'sale_report');		
		$user = $this->site->getUser();
		$this->load->library("pagination");
		$post = $this->input->post();
		$datt = $this->reports_model->getLastDate("sales", "date");
        $str    = '';

		if ($post['reference_no']) {
            $reference_no 				= $post['reference_no'];
            $this->data['reference_no'] = $post['reference_no'];
			$str .="&reference_no=".$reference_no;
        }else{
			$reference_no = null;
        }
		
		if ($post['customer']) {
            $customer 				= $post['customer'];
            $this->data['customer'] = $post['customer'];
			$str .="&customer=".$customer;
        }else{
			$customer = null;
        } 
		
		if ($post['biller']) {
            $biller 				= $post['biller'];
            $this->data['biller'] = $post['biller'];
			$str .="&biller=".$biller;
        }else{
			$biller = null;
        } 
		
		if ($post['warehouse']) {
            $warehouse 				= $post['warehouse'];
            $this->data['warehouse'] = $post['warehouse'];
			$str .="&warehouse=".$warehouse;
        }else{
			$warehouse = null;
        }

        if ($post['start_date']) {
            $start_date 			  = $post['start_date'];
            $this->data['start_date'] = $post['start_date'];
            $str .="&start_date=".$start_date;
        } else {
            $start_date = date('d/m/Y');
            $this->data['start_date'] = $start_date;
        }
//        $this->erp->print_arrays($start_date);
		
		if ($post['end_date']) {
            $end_date 				= $post['end_date'];
            $this->data['end_date'] = $post['end_date'];
			$str .="&end_date=".$end_date;
        }else{
            $end_date = date('d/m/Y');
            $this->data['end_date'] = $end_date;
        } 
		
		if ($post['customer_group']) {
            $customer_group 				= $post['customer_group'];
            $this->data['customer_group']   = $post['customer_group'];
			$str .="&customer_group=".$customer_group;
        }else{
			$customer_group = null;
        } 
		
		if ($post['user']) {
            $user 				= $post['user'];
            $this->data['user']   = $post['user'];
			$str .="&user=".$user;
        }else{
			$user = null;
        }

		if ($post['type']) {
            $type 				= $post['type'];
            $this->data['type']   = $post['type'];
			$str .="&type=".$type;
        }else{
			$type = null;
        }	

		if ($post['types']) {
            $types 				= $post['types'];
            $this->data['types']   = $post['types'];
			$str .="&types=".$types;
        }else{
			$types = null;
        }	
		
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		
		if(isset($this->data['reference_no']) && $this->data['reference_no'] !=''){
			$this->db->where("reference_no", $this->data['reference_no']);
		}

		if($customer){
            $this->db->where("customer_id", $customer);
		} else {
            $customer = NULL;
        }

		if($biller){
			$this->db->where("biller_id", $biller);
		} else {
            $biller = NULL;
        }

		if($warehouse){
			$this->db->where("warehouse_id", $warehouse);
		} else {
            $warehouse = NULL;
        }

		if($user){
			$this->db->where("created_by", $user);
		} else {
            $user = NULL;
        }

		if($type){
			$this->db->where("type", $type);
		} else {
            $type = NULL;
        }
		  
		if($types){
			$this->db->where("pos", $types);
		} else {
            $types = NULL;
        }

		if($start_date){
			$this->db->where("date_format(date,'%Y-%m-%d') >=", $this->erp->fld($start_date) . '00:00:00');
			$this->db->where("date_format(date,'%Y-%m-%d') <=", $this->erp->fld($end_date) . '23:59:00');
		}
		
		$sales_nums 				= $this->db->group_by('reference_no')->get('sales')->num_rows();
		
		$config 					= array();
		$config['suffix'] 			= "?v=1".$str;
        $config["base_url"] 		= base_url() . "reports/sales_detail/";
		$config["total_rows"] 		= $sales_nums;
		$config["ob_set"] 			= ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] 		= 100;
		$config["uri_segment"] 		= 3;
		$config['full_tag_open'] 	= '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] 	= '</ul>';
		$config['next_tag_open'] 	= '<li class="next">';
		$config['next_tag_close'] 	= '<li>';
		$config['prev_tag_open'] 	= '<li class="prev">';
		$config['prev_tag_close'] 	= '<li>';
		$config['cur_tag_open'] 	= '<li class="active"><a href="#">';
		$config['cur_tag_close'] 	= '</a><li>';
		$config['first_tag_open'] 	= '<li>';
		$config['first_tag_close'] 	= '<li>';
		$config['last_tag_open'] 	= '<li>';
		$config['last_tag_close'] 	= '<li>';
		$config['num_tag_open'] 	= '<li>';
		$config['num_tag_close'] 	= '</li>';
		
		$sql1 = "SELECT
					erp_sales.id,
					1 as type,
					erp_sales.date,
					erp_sales.reference_no,
					erp_sales.biller,
					erp_sales.biller_id,
					erp_sales.total,
					erp_sales.total_discount,
					erp_sales.order_discount,
					erp_sales.order_tax,
					erp_sales.product_tax,
					erp_sales.shipping,
					erp_sales.grand_total,
					erp_sales.total_cost,
					erp_sales.paid,
					erp_sales.warehouse_id,
					erp_sales.customer,
					erp_sales.customer_id,
					erp_sales.created_by,
					erp_sales.pos
				FROM
					`erp_sales`
				INNER JOIN erp_sale_items ON erp_sales.id = erp_sale_items.sale_id
				WHERE erp_sales.opening_ar = 0
				GROUP BY
					erp_sales.id,reference_no";
					
		$sql2 = "SELECT
					erp_return_sales.id,
					2 as type,
					erp_return_sales.date,
					erp_return_sales.reference_no,
					erp_return_sales.biller,
					erp_return_sales.biller_id,
					erp_return_sales.total,
					erp_return_sales.total_discount,
					erp_return_sales.order_discount,
					erp_return_sales.product_tax,
					erp_return_sales.order_tax,
					erp_return_sales.shipping,
					erp_return_sales.grand_total,
					erp_return_sales.total_cost,
					erp_return_sales.paid,
					erp_return_sales.warehouse_id,
					erp_return_sales.customer,
					erp_return_sales.customer_id,
					erp_return_sales.created_by,
					0 as pos
				FROM
					erp_return_sales
				INNER JOIN erp_return_items ON erp_return_sales.id = erp_return_items.return_id
				GROUP BY
					erp_return_sales.id,reference_no";	
			
        $sql3 = "";
		$sqls = "";
		
		if($reference_no){
            $sql3 .= " AND reference_no = '{$this->data['reference_no']}'";
			$sqls .= " AND reference_no = '{$this->data['reference_no']}'";
		}
		if($customer){
            $sql3 .= " AND customer_id = '{$this->data['customer']}'";
			$sqls .= " AND customer_id = '{$this->data['customer']}'";
		}
		if($biller){
            $sql3 .= " AND biller_id = '{$this->data['biller']}'";
			$sqls .= " AND biller_id = '{$this->data['biller']}'";
		}
		if($warehouse){
            $sql3 .= " AND warehouse_id = '{$this->data['warehouse']}'";
			$sqls .= " AND warehouse_id = '{$this->data['warehouse']}'";
		}
		if($user){
            $sql3 .= " AND created_by = '{$this->data['user']}'";
			$sqls .= " AND created_by = '{$this->data['user']}'";
		}
		if($type){
            $sql3 .= " AND type = {$this->data['type']}";
			$sqls .= " AND type = {$this->data['type']}";
		} 
		if($types){
            $sql3 .= " AND pos = {$this->data['types']}";
			$sqls .= " AND pos = {$this->data['types']}";
		}
		if(!$this->Owner && !$this->Admin){
			$sql4='';
			$sql4 .= " AND warehouse_id IN ({$this->session->userdata('warehouse_id')})";
		}

        if ($start_date && $end_date) {
            $s_date = $this->erp->fld($start_date) . ' 00:00:00';
            $e_date = $this->erp->fld($end_date) . ' 23:55:55';
            $sql4 .= " AND date BETWEEN '{$s_date}' AND '{$e_date}' ";
        }

        if ($this->input->get('start_date') || $this->input->get('end_date')) {
		    $sales = $this->db->query("SELECT * FROM ({$sql1} UNION {$sql2}) AS TEMP WHERE 1=1 {$sqls} {$sql4} ORDER BY id DESC ")->result();
        } else {
            $sales = $this->db->query("SELECT * FROM ({$sql1} UNION {$sql2}) AS TEMP WHERE 1=1 {$sql3} {$sql4} ORDER BY id DESC ")->result();
        }
									
		$this->pagination->initialize($config);
		$this->data["pagination"] 		= $this->pagination->create_links();
		$this->data['sales'] 			= $sales;
        $this->data['error'] 			= (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] 			= $this->reports_model->getStaff();
        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
			
        } else {
			
            $this->data['warehouses'] = $this->products_model->getUserWarehouses();
			if($warehouse_id){
				$this->data['warehouse_id'] = $warehouse_id;
				$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
			}else{
				
				$this->data['warehouse_id'] = str_replace(',', '-',$this->session->userdata('warehouse_id'));
				$this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->products_model->getUserWarehouses() : NULL;
			}
        }
		$this->data['customer_groups'] 	= $this->companies_model->getAllCustomerGroups();
		$this->data['customers'] 		= $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_detail_report')));
        $meta = array('page_title' => lang('sales_detail_report'), 'bc' => $bc);
        $this->page_construct('reports/sales_detail_report', $meta, $this->data);
	}
	
	public function purchase_report_by_invoice($biller_id = NULL)
	{
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('purchase_report_by_invoice')));
        $meta = array('page_title' => lang('purchase_report_by_invoice'), 'bc' => $bc);
        $this->page_construct('reports/purchase_report_by_invoice', $meta, $this->data);
	}
	
	function getPurchaseByInvoice()
    {
       
        $detail_link = anchor('purchases/modal_view/$1', '<i class="fa fa-file-text-o"></i> ' . lang('purchase_details'), 'data-toggle="modal" data-target="#myModal"');
        $pdf_link = anchor('transfers/pdf/$1', '<i class="fa fa-file-pdf-o"></i> ' . lang('download_pdf'));
        $view_document  = '';
        $edit_link      = '';
        $email_link     = '';
        $print_barcode  = '';
        $delete_link    = '';
        $action = '<div class="text-center"><div class="btn-group text-left">'
            . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
            . lang('actions') . ' <span class="caret"></span></button>
		
        <ul class="dropdown-menu pull-right" role="menu">
            <li>' . $detail_link . '</li>
			<li>' . $view_document . '</li>'
			
			.(($this->Owner || $this->Admin) ? '<li>'.$edit_link.'</li>' : ($this->GP['transfers-edit'] ? '<li>'.$edit_link.'</li>' : '')).

            '<li>' . $pdf_link . '</li>
            <li>' . $email_link . '</li>
            <li>' . $print_barcode . '</li>'
			
			.(($this->Owner || $this->Admin) ? '<li>'.$delete_link.'</li>' : ($this->GP['transfers-delete'] ? '<li>'.$delete_link.'</li>' : '')).

        '</ul>
    </div></div>';

        $this->load->library('datatables');

        $this->datatables
            ->select("erp_purchases.id,erp_purchases.date,erp_purchases.reference_no as s_ref,
			erp_quotes.reference_no as q_ref,erp_sales.reference_no,
			erp_purchases.supplier,erp_purchases.grand_total as grand_total")
            ->from('erp_sales')
            ->join('erp_quotes','erp_sales.type_id = erp_quotes.id')
            ->join('erp_purchases','erp_quotes.id = erp_purchases.quote_id');
            
        
        $this->datatables->add_column("Actions", $action, "erp_purchases.id");
        echo $this->datatables->generate();
    }
	
    function project_manager_report($id = null,$xls=NULL ,$pdf=NULL)
    {
		  
		$datt =$this->reports_model->getLastDate("sales","date");
		$user = $this->site->getUser();
        $biller_id     = null;
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		if(!$this->input->post('start_date')){
		 $this->data['start_date'] =$datt;
		}
		if(!$this->input->post('end_date')){
			 $this->data['end_date'] =$datt;
		}
		$this->data['biller_id'] = $id;
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
		$this->data['customers'] = $this->site->getCustomers();
		$this->data['projects'] = $this->reports_model->get_manager_project($id); 	
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('project_manager_report')));
        $meta = array('page_title' => lang('project_manager_report'), 'bc' => $bc);
        $this->page_construct('reports/project_manager_report', $meta, $this->data);
	
} 
	
	function user_actions()
    {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                
                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {

					
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('sales'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('first_name'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('last_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('email'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('company'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('group'));
					$this->excel->getActiveSheet()->getStyle('A1:E1')
					->applyFromArray(
						array(
							'fill' => array(
								'type' => PHPExcel_Style_Fill::FILL_SOLID,
								'color' => array('rgb' => ' 387EED')
							)
						)
					);
                    $row = 2;
					$num = 1;
					$the = 0;
					$rr  = 1;
					
					foreach ($_POST['val'] as $id){
                        $user = $this->site->getUsers($id);
						
                        $this->excel->getActiveSheet()->SetCellValue('A' . ($row + $the + ($rr - 1)), $user->first_name);
                        $this->excel->getActiveSheet()->SetCellValue('B' . ($row + $the + ($rr - 1)), $user->last_name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . ($row + $the + ($rr - 1)), $user->email);
                        $this->excel->getActiveSheet()->SetCellValue('D' . ($row + $the + ($rr - 1)), $user->company);
                        $this->excel->getActiveSheet()->SetCellValue('E' . ($row + $the + ($rr - 1)), $user->name);
						
						$this->excel->getActiveSheet()->SetCellValue('A'.($row + $the + $num + ($rr - 1)), lang('date'));
						$this->excel->getActiveSheet()->SetCellValue('B'.($row + $the + $num + ($rr - 1)), lang('reference_no'));
						$this->excel->getActiveSheet()->SetCellValue('C'.($row + $the + $num + ($rr - 1)), lang('project'));
						$this->excel->getActiveSheet()->SetCellValue('D'.($row + $the + $num + ($rr - 1)), lang('customer'));
						$this->excel->getActiveSheet()->SetCellValue('E'.($row + $the + $num + ($rr - 1)), lang('quantity'));
						$this->excel->getActiveSheet()->SetCellValue('F'.($row + $the + $num + ($rr - 1)), lang('grand_total'));	
						$this->excel->getActiveSheet()->SetCellValue('G'.($row + $the + $num + ($rr - 1)), lang('paid'));								
						$this->excel->getActiveSheet()->SetCellValue('H'.($row + $the + $num + ($rr - 1)), lang('balacne'));
						
						$sales = $this->db->query("SELECT date, erp_sales.id,reference_no,biller,
														customer,
														quantity,
														grand_total,
														paid,
														(grand_total - paid )as balance,
														payment_status
														FROM erp_sales
														INNER JOIN erp_sale_items on erp_sales.id = erp_sale_items.sale_id
														INNER JOIN erp_users on erp_sales.assign_to_id = erp_users.id
														WHERE assign_to_id={$user->id}")->result();	
														
						foreach($sales as $data){
							$this->excel->getActiveSheet()->SetCellValue('A'.($row + $the + $num + $rr), $data->date);
							$this->excel->getActiveSheet()->SetCellValue('B'.($row + $the + $num + $rr), $data->reference_no);
							$this->excel->getActiveSheet()->SetCellValue('C'.($row + $the + $num + $rr), $data->biller);
							$this->excel->getActiveSheet()->SetCellValue('D'.($row + $the + $num + $rr), $data->customer);
							$this->excel->getActiveSheet()->SetCellValue('E'.($row + $the + $num + $rr), $data->quantity);
							$this->excel->getActiveSheet()->SetCellValue('F'.($row + $the + $num + $rr), $data->grand_total);	
							$this->excel->getActiveSheet()->SetCellValue('G'.($row + $the + $num + $rr), $data->paid);								
							$this->excel->getActiveSheet()->SetCellValue('H'.($row + $the + $num + $rr), ($data->grand_total - $data->paid));
							$rr++;
						}
						
                        $row++;
						$the++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'users_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_user_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }

    function get_project_manager_reports()
    {
        $this->load->library('datatables');
        $this->datatables
            ->select($this->db->dbprefix('users').".id as id, first_name, last_name, email, company, ".$this->db->dbprefix('groups').".name, active")
            ->from("users")
            ->join('groups', 'users.group_id = groups.id', 'left')
            ->group_by('users.id')
            ->where('company_id', NULL);
        if (!$this->Owner) {
            $this->datatables->where('group_id !=', 1);
        }
        $this->datatables
            ->edit_column('active', '$1__$2', 'active, id')
            ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/get_all_project_manager_reports/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id")
            ->unset_column('id');
        echo $this->datatables->generate();
    }

    function get_all_project_manager_reports($user_id = NULL, $year = NULL, $month = NULL, $pdf = NULL, $cal = 0)
    {
        // $this->erp->print_arrays($user_id);
        if (!$user_id) {
            $this->session->set_flashdata('error', lang("no_user_selected"));
            redirect('reports/users');
        }

        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['purchases'] = $this->reports_model->getStaffPurchases($user_id);
        $this->data['sales'] = $this->reports_model->getStaffSaleman($user_id);
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getAllWarehouses();

        if (!$year) {
            $year = date('Y');
        }
        if (!$month || $month == '#monthly-con') {
            $month = date('m');
        }
        if ($pdf) {
            if ($cal) {
                $this->monthly_sales($year, $pdf, $user_id);
            } else {
                $this->daily_sales($year, $month, $pdf, $user_id);
            }
        }
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/staff_report/'.$user_id),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $config['template'] = '{table_open}<table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
        {heading_row_start}<tr>{/heading_row_start}
        {heading_previous_cell}<th class="text-center"><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
        {heading_title_cell}<th class="text-center" colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
        {heading_next_cell}<th class="text-center"><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
        {heading_row_end}</tr>{/heading_row_end}
        {week_row_start}<tr>{/week_row_start}
        {week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
        {week_row_end}</tr>{/week_row_end}
        {cal_row_start}<tr class="days">{/cal_row_start}
        {cal_cell_start}<td class="day">{/cal_cell_start}
        {cal_cell_content}
        <div class="day_num">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content}
        {cal_cell_content_today}
        <div class="day_num highlight">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content_today}
        {cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
        {cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
        {cal_cell_blank}&nbsp;{/cal_cell_blank}
        {cal_cell_end}</td>{/cal_cell_end}
        {cal_row_end}</tr>{/cal_row_end}
        {table_close}</table>{/table_close}';

        $this->load->library('calendar', $config);
        $sales = $user_id ? $sales = $this->reports_model->getProjectManagerDailySales($user_id, $year, $month) : $this->reports_model->getDailySales($year, $month);
        // $this->erp->print_arrays($sales);
        if (!empty($sales)) {
            foreach ($sales as $sale) {
            $d = date('Y-m-d', strtotime($year . '-' . $month . '-' . $sale->date)); $refund = $this->reports_model->getSalesReturnDate($d); $daily_sale[$sale->date] = "
                <table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'>
                    <tr>
                        <td>" . lang("amount") . "</td>
                        <td>" . $this->erp->formatMoney($sale->total) . "</td>
                    </tr>
                    <tr>
                        <td>" . lang("order_discount") . "</td>
                        <td>" . $this->erp->formatMoney($sale->order_discount) . "</td>
                    </tr>
                    <tr>
                        <td>" . lang("shipping") . "</td>
                        <td>" . $this->erp->formatMoney($sale->shipping) . "</td>
                    </tr>
                    <tr>
                        <td>" . lang("product_tax") . "</td>
                        <td>" . $this->erp->formatMoney($sale->tax1) . "</td>
                    </tr>
                    <tr>
                        <td>" . lang("refund") . "</td>
                        <td>" . $this->erp->formatMoney($refund->paid) . "</td>
                    </tr>
                    <tr>
                        <td>" . lang("order_tax") . "</td>
                        <td>" . $this->erp->formatMoney($sale->tax2) . "</td>
                    </tr>
                    <tr>
                        <td>" . lang("total") . "</td>
                        <td>" . $this->erp->formatMoney(($sale->total - $refund->paid) - $sale->order_discount) . "</td>
                    </tr>
                    <tr>
                        <td>" . lang("award_points") . "</td>
                        <td>" . intval(($sale->total - $refund->paid)/ $this->Settings->each_sale) . "</td>
                    </tr>
                </table>";
            }
        } else {
            $daily_sale = array();
        }
        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
        // $this->erp->print_arrays( $this->data['calender']);
        if ($this->input->get('pdf')) {

        }
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        $this->data['msales'] = $this->reports_model->getStaffMonthlySaleman($user_id, $year);
        $this->data['user_id'] = $user_id;

        $this->data['sales_monthly'] = $user_id ? $this->reports_model->getMonthlyReportByPM($user_id, $year) : $this->reports_model->getMonthlySales($year);

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('project_manager_report')));
        $meta = array('page_title' => lang('project_manager_report'), 'bc' => $bc);
        $this->page_construct('reports/get_all_project_manager_reports', $meta, $this->data);

    }

    function get_sale_report_by_pm()
    {
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if($this->input->get("customer_group")){
           $customer_group = $this->input->get("customer_group");
        }else {
           $customer_group = NULL;
        }        
    
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($this->input->get('serial')) {
            $serial = $this->input->get('serial');
        } else {
            $serial = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        $this->load->library('datatables');
            $this->datatables
                ->select("date, reference_no, biller, customer,GROUP_CONCAT(CONCAT( '[', " . $this->db->dbprefix('sale_items') . ".product_code, ']', ' - ', CONCAT(" . $this->db->dbprefix('sale_items') . ".product_name, '__', " . $this->db->dbprefix('sale_items') . ".quantity)) SEPARATOR '___') as iname, grand_total, paid, (grand_total-paid) as balance,
                payment_status", FALSE)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies', 'companies.id=sales.customer_id','left')
                ->join('customer_groups','customer_groups.id=companies.customer_group_id','left')
                ->join('users', 'sales.assign_to_id = users.id', 'left')
                ->where('users.id', $user)
                ->group_by('sales.id');
        
        if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
        }
        if ($product) {
            $this->datatables->like('sale_items.product_id', $product);
        }
        if ($serial) {
            $this->datatables->like('sale_items.serial_no', $serial);
        }
        if ($biller) {
            $this->datatables->where('sales.biller_id', $biller);
        }
        if ($customer) {
            $this->datatables->where('sales.customer_id', $customer);
        }
        if($customer_group){
           $this->datatables->where('companies.customer_group_id', $customer_group);                
        }
        if ($warehouse) {
            $this->datatables->where('sales.warehouse_id', $warehouse);
        }
        if ($reference_no) {
            $this->datatables->like('sales.reference_no', $reference_no, 'both');
        }
        if ($start_date) {
            $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
        }
        echo $this->datatables->generate();

    }

    function get_so_report_by_pm()
    {
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if($this->input->get("customer_group")){
           $customer_group = $this->input->get("customer_group");
        }else {
           $customer_group = NULL;
        }        
    
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($this->input->get('serial')) {
            $serial = $this->input->get('serial');
        } else {
            $serial = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        $this->load->library('datatables');
            $this->datatables
                ->select("date, reference_no, biller, customer,GROUP_CONCAT(CONCAT( '[', " . $this->db->dbprefix('sale_order_items') . ".product_code, ']', ' - ', CONCAT(" . $this->db->dbprefix('sale_order_items') . ".product_name, '__', " . $this->db->dbprefix('sale_order_items') . ".quantity)) SEPARATOR '___') as iname, grand_total, paid, (grand_total-paid) as balance,
                payment_status", FALSE)
                ->from('sale_order')
                ->join('sale_order_items', 'sale_order_items.sale_order_id = sale_order.id', 'left')
                ->join('warehouses', 'warehouses.id = sale_order.warehouse_id', 'left')
                ->join('companies', 'companies.id = sale_order.customer_id','left')
                ->join('customer_groups','customer_groups.id=companies.customer_group_id','left')
                ->join('users', 'sale_order.assign_to_id = users.id', 'left')
                ->where('users.id', $user)
                ->group_by('sale_order.id');
        
        if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
        }
        if ($product) {
            $this->datatables->like('sale_order_items.product_id', $product);
        }
        if ($serial) {
            $this->datatables->like('sale_order_items.serial_no', $serial);
        }
        if ($biller) {
            $this->datatables->where('sales.biller_id', $biller);
        }
        if ($customer) {
            $this->datatables->where('sales.customer_id', $customer);
        }
        if($customer_group){
           $this->datatables->where('companies.customer_group_id', $customer_group);                
        }
        if ($warehouse) {
            $this->datatables->where('sales.warehouse_id', $warehouse);
        }
        if ($reference_no) {
            $this->datatables->like('sales.reference_no', $reference_no, 'both');
        }
        if ($start_date) {
            $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
        }
        echo $this->datatables->generate();

    }
	
	// ============== //
	
	function sales_customer_detail()
    { 
		$this->data['users'] = $this->site->getAllUsers();		
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['modal_js'] = $this->site->modal_js();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('sales_customer_detail'), 'page' => lang('sales_customer_detail')), array('link' => '#', 'page' => lang('sales_customer_detail')));
        $meta = array('page_title' => lang('sales_customer_detail'), 'bc' => $bc);
        $this->page_construct('reports/sales_customer_detail', $meta, $this->data);
    }

    function bill_payable_actions(){
        if (!$this->Owner) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            redirect($_SERVER["HTTP_REFERER"]);
        }

        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        // echo "hello";exit();
        if ($this->form_validation->run() == true) {
            $from_date = $this->input->post('from_date');
            $to_date = $this->input->post('to_date');
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    
                    $error = false;
                    foreach ($_POST['val'] as $id) {
                        if (!$this->accounts_model->deleteChartAccount($id)) {
                            $error = true;
                        }
                    }
                    if ($error) {
                        $this->session->set_flashdata('warning', lang('suppliers_x_deleted_have_purchases'));
                    } else {
                        $this->session->set_flashdata('message', $this->lang->line("account_deleted_successfully"));
                    }
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);

                    $this->excel->getActiveSheet()->mergeCells('A1:H1');
                    $this->excel->getActiveSheet()->setCellValue('A1','Bill Payable');

                    if ($from_date && $to_date) {
                        $this->excel->getActiveSheet()->mergeCells('A2:H2');
                        $this->excel->getActiveSheet()->setCellValue('A2','From: '. $from_date .' To: '. $to_date);

                        $this->excel->getActiveSheet()->setTitle(lang('bill_reciept'));
                        $this->excel->getActiveSheet()->SetCellValue('A3', lang('date'));
                        $this->excel->getActiveSheet()->SetCellValue('B3', lang('purchase_date'));
                        $this->excel->getActiveSheet()->SetCellValue('C3', lang('purchase_ref'));
                        $this->excel->getActiveSheet()->SetCellValue('D3', lang('supplier'));
                        $this->excel->getActiveSheet()->SetCellValue('E3', lang('paid_by'));
                        $this->excel->getActiveSheet()->SetCellValue('F3', lang('note'));
                        $this->excel->getActiveSheet()->SetCellValue('G3', lang('amount'));
                        $this->excel->getActiveSheet()->SetCellValue('H3', lang('type'));
                    } else {
                        $this->excel->getActiveSheet()->setTitle(lang('bill_reciept'));
                        $this->excel->getActiveSheet()->SetCellValue('A2', lang('date'));
                        $this->excel->getActiveSheet()->SetCellValue('B2', lang('purchase_date'));
                        $this->excel->getActiveSheet()->SetCellValue('C2', lang('purchase_ref'));
                        $this->excel->getActiveSheet()->SetCellValue('D2', lang('supplier'));
                        $this->excel->getActiveSheet()->SetCellValue('E2', lang('paid_by'));
                        $this->excel->getActiveSheet()->SetCellValue('F2', lang('note'));
                        $this->excel->getActiveSheet()->SetCellValue('G2', lang('amount'));
                        $this->excel->getActiveSheet()->SetCellValue('H2', lang('type'));
                    }
                    
                    $styleArray = array(
                        'font'  => array(
                            'bold'  => true,
                            'size'  => 16
                        )
                    );

                    $styleArray2 = array(
                        'font'  => array(
                            'bold'  => true,
                            'size'  => 12
                        )
                    );
                    
                    

                    if ($from_date && $to_date) {
                        $this->excel->getActiveSheet()->getStyle('A1:H1')->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getStyle('A2:H2')->applyFromArray($styleArray2);
                        $this->excel->getActiveSheet()->getStyle('A3:H3')->applyFromArray($styleArray2);
                        $this->excel->getActiveSheet()->getStyle('A1:H1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('A3:H3')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('A2:H2')->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $row = 4;
                    } else {
                        $this->excel->getActiveSheet()->getStyle('A1:H1')->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getStyle('A2:H2')->applyFromArray($styleArray2);
                        $this->excel->getActiveSheet()->getStyle('A1:H1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('A2:H2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('A1:H1')->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $row = 3;
                    }

                    $sum_amount     = 0;
                    foreach ($_POST['val'] as $id) {
                        $account = $this->site->getBillPayableByID($id);
                        $sum_amount += $account->amount;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $account->date);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $account->purchase_date);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $account->purchases_ref . " ");
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $account->supplier);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $account->paid_by);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $account->note);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $account->amount);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $account->payment_status);
                        $new_row = $row+1;
                        $this->excel->getActiveSheet()->SetCellValue('G' . $new_row, $sum_amount);
                        
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(40);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'Bill_Payable_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $this->excel->getActiveSheet()->getStyle('G' . $new_row . '')->getFont()->setBold(true);
                        
                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $this->excel->getActiveSheet()->getStyle('G' . $new_row . '')->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
                        $this->excel->getActiveSheet()->getStyle('G' . $new_row . '')->getFont()->setBold(true);
                        
                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_supplier_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	function ProductsSuppliersReport($pdf = NULL, $excel = NULL,$warehouse,$supplier,$reference,$product_id,$from_date,$to_date){

        if($supplier == 0){
            $supplier = null;
        }
		 if($warehouse == 0){
            $warehouse = null;
        }
        if($reference == 0){
            $reference = null;
        }
        if($product_id == 0){
            $product_id = null;
        }
        if($from_date == 0){
            $from_date = null;
        }
        if($to_date == 0){
            $to_date = null;
        }
		$wid = $this->reports_model->getWareByUserID();
        $this->erp->checkPermissions('inventory_valuation_detail', NULL, 'product_report');
        $row    = null;
        // $this->erp->checkPermissions('index', NULL, 'chart_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($pdf || $excel) {
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->setTitle(lang('inventory'));
			$this->excel->getActiveSheet()->SetCellValue('A1', lang('type'));
			$this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
			$this->excel->getActiveSheet()->SetCellValue('C1', lang('reference'));
			$this->excel->getActiveSheet()->SetCellValue('D1', lang('name'));
			$this->excel->getActiveSheet()->SetCellValue('E1', lang('qty'));
			$this->excel->getActiveSheet()->SetCellValue('F1', lang('unit'));
			$this->excel->getActiveSheet()->SetCellValue('G1', lang('cost_price'));
			$this->excel->getActiveSheet()->SetCellValue('H1', lang('amount'));
			$this->excel->getActiveSheet()->getStyle('A1'. $row.':H1'.$row)->getFont()->setBold(true);
			$this->excel->getActiveSheet()->getStyle('A1:H1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$row = 2;
			$grand = 0 ;
			$gqty = 0;
			$this->db->select("erp_purchases.supplier_id,supplier,SUM(erp_purchase_items.quantity) as qty");
			$this->db->join("erp_purchase_items","erp_purchase_items.purchase_id=erp_purchases.id","LEFT");
			if($supplier){
				$this->db->where("erp_purchases.supplier_id",$supplier);
			}
			if($reference){
				$this->db->where("reference_no",$reference);
			}
			if($product_id){
				$this->db->where("product_id",$product_id);
			}
			if($warehouse){
				$this->db->where("erp_purchases.warehouse_id",$warehouse);
			}else{
				if($wid){
					$this->db->where("erp_purchases.warehouse_id IN ($wid)");
				}
			}
			if($from_date && $to_date){
				$this->db->where('erp_purchase_items.date >="'.$from_date.'" AND erp_purchase_items.date<="'.$to_date.'"');
			}
			$this->db->group_by("erp_purchases.supplier_id");
			$suppliers = $this->db->get("erp_purchases")->result();
			foreach($suppliers as $sup){
				if($sup->supplier_id){
				if($sup->qty){
				$this->excel->getActiveSheet()->SetCellValue('A' . $row, $sup->supplier);
				$this->excel->getActiveSheet()->mergeCells('A'.$row.':H'.$row);
				$this->excel->getActiveSheet()->getStyle('A'. $row.':H'.$row)->getFont()->setBold(true);
				
				$this->db->select("product_id,product_name,erp_purchase_items.quantity,net_unit_cost,erp_purchases.supplier_id,reference_no,erp_purchase_items.date,transaction_type,option_id,unit,net_shipping")->join("erp_purchases","erp_purchases.id = erp_purchase_items.purchase_id","LEFT")->join("erp_products","erp_products.id = erp_purchase_items.product_id","LEFT")->where("erp_purchase_items.transaction_type = 'PURCHASE'");

					if($reference){
						$this->db->where("reference_no",$reference);
					}
					if($supplier){
						$this->db->where("erp_purchases.supplier_id",$supplier);
					}
					if($product_id){
						$this->db->where("product_id",$product_id);
					}
					if($warehouse){
						$this->db->where("erp_purchases.warehouse_id",$warehouse);
					}else{
						if($wid){
							$this->db->where("erp_purchases.warehouse_id IN ($wid)");
						}
					}
					if($from_date && $to_date){
						$this->db->where('erp_purchase_items.date >="'.$from_date.'" AND erp_purchase_items.date<="'.$to_date.'"');
					}
					
					$pur_items = $this->db->get("erp_purchase_items")->result();
					$tqty = 0 ; 
					$amount = 0 ;
                    $totalshipping = 0 ;
					$row++;
					$vqty = 0;
					foreach($pur_items as $row1){
						// $this->erp->print_arrays($row1);
						if($sup->supplier_id == $row1->supplier_id){
							if($row1->option_id){
								$unit_n = $this->db->get_where('erp_product_variants',array('id'=> $row1->option_id),1)->row();
								$unit_q = $unit_n->qty_unit;
								$unit_name = ' ( '.$this->erp->formatQuantity(( abs($row1->quantity)*$unit_q)/$unit_q).' '.$unit_n->name.' )';
								$vqty = abs($row1->quantity)*$unit_q;
							}else{
								$unit = $this->db->get_where("erp_units",array('id'=>$row1->unit),1)->row();
								$unit_name = $unit->name;
								$vqty =  abs($row1->quantity);
							}
                            $totalshipping = abs($row1->net_unit_cost)+$row1->net_shipping;
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $row1->transaction_type);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->erp->hrsd($row1->date));
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $row1->reference_no);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $row1->product_name);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $vqty);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $unit_name);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $totalshipping);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, abs($row1->quantity)*$totalshipping);
						$tqty+=$vqty;
						$amount+=(abs($row1->quantity)*$totalshipping);
						
						$row++;
					}
				}
				$this->excel->getActiveSheet()->SetCellValue('A' . $row, 'Total >> '.$sup->supplier);
				$this->excel->getActiveSheet()->SetCellValue('E' . $row, $tqty);
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($amount));
                $this->excel->getActiveSheet()->getStyle('H'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->mergeCells('A'.$row.':D'.$row);
				$this->excel->getActiveSheet()->getStyle('A'. $row.':H'.$row)->getFont()->setBold(true);
				$this->excel->getActiveSheet()->getStyle('E'.$row. ':H'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
				$grand +=$amount;
				$gqty +=$tqty;
				$row++;
			}
				}
			}
			$this->excel->getActiveSheet()->SetCellValue('A' . $row, 'Grand Total');
			$this->excel->getActiveSheet()->SetCellValue('E' . $row, $gqty);
			$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($grand));
            $this->excel->getActiveSheet()->getStyle('H'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $this->excel->getActiveSheet()->mergeCells('A'.$row.':D'.$row);
			$this->excel->getActiveSheet()->mergeCells('A'.$row.':D'.$row);
			$this->excel->getActiveSheet()->getStyle('A'. $row.':H'.$row)->getFont()->setBold(true);
			$this->excel->getActiveSheet()->getStyle('E'.$row. ':H'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);

			$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
			$filename = lang('Product Supplier'). date('Y_m_d_H_i_s');
			$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
			if ($pdf) {
				$styleArray = array(
					'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
				);
				$this->excel->getDefaultStyle()->applyFromArray($styleArray);
				$this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
				require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
				$rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
				$rendererLibrary = 'MPDF';
				$rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
				if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
					die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
						PHP_EOL . ' as appropriate for your directory structure');
				}

				header('Content-Type: application/pdf');
				header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
				header('Cache-Control: max-age=0');

				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
				$objWriter->save('php://output');
				exit();
			}
			if ($excel) {
				ob_clean();
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
				header('Cache-Control: max-age=0');
				
	
				ob_clean();
				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				$objWriter->save('php://output');
				exit();
			}
        }
    }
	
	
	function supplier_details()
    {
       //$this->erp->checkPermissions('inventory_valuation_detail', NULL, 'product_report');
        $datt =$this->reports_model->getLastDate("erp_purchase_items","date");
        if ($this->input->post('supplier')) {
            $supplier =  $this->input->post('supplier');
        }else{
            $supplier = null;
        }
        if ($this->input->post('reference_no')) {
            $reference = $this->input->post('reference_no');
        }else{
            $reference = null;
        }
        if ($this->input->post('warehouse')) {
            $warehouse = $this->input->post('warehouse');
        }else{
            $warehouse = null;
        }
		
        if ($this->input->post('product')) {
            $product_id = $this->input->post('product');
        }else{
            $product_id = null;
        }
        
       
        if ($this->input->post('from_date')) {
            $from_date =  $this->erp->fld($this->input->post('from_date'));
        }else{
            $from_date = $datt;
        }
        if ($this->input->post('to_date')) {
            $to_date = $this->erp->fld($this->input->post('to_date'));
        }else{
            $to_date= $datt;
        }
		$this->data['supplier']    = $supplier;
		$this->data['warehouse']    = $warehouse;
		$this->data['reference']    = $reference;
		$this->data['product_id']   = $product_id;
		$this->data['from_date']    = $from_date;
		$this->data['to_date'] 	  	= $to_date;
		$this->data['products']     = $this->reports_model->getAllProducts();
		
		if($supplier == null){
            $this->data['supplier1'] = 0;
        }else{
             $this->data['supplier1'] = $supplier;
        }
		if($warehouse == null){
            $this->data['warehouse1'] = 0;
        }else{
             $this->data['warehouse1'] = $warehouse;
        }
        if($reference == null){
             $this->data['reference1'] = 0;
        }else{
            $this->data['reference1'] = $reference;
        }
        if($product_id == null){
             $this->data['product_id1'] = 0;
        }else{
            $this->data['product_id1'] = $product_id;
        }
        if($from_date == null){
             $this->data['from_date1'] = 0;
        }else{
            $this->data['from_date1'] = trim($from_date);
        }
        if($to_date == null){
             $this->data['to_date1'] = 0;
        }else{
            $this->data['to_date1'] = trim($to_date);
        }
        $biller_id = $this->session->userdata('biller_id');
		$wid = $this->reports_model->getWareByUserID();
		$this->data['warefull'] = $this->reports_model->getWareFullByUSER($wid);
		$this->data['biller_idd'] = $this->reports_model->getBiilerByUserID();

        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['user_billers'] = $this->sales_model->getAllCompaniesByID($biller_id);
		//$this->erp->print_arrays($this->reports_model->getAllCategories());
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('supplier_products'), 'bc' => $bc);
        $this->page_construct('reports/supplier_details', $meta, $this->data);

    }
	
	function product_profit()
    {
        $wid = $this->reports_model->getWareByUserID();
		$datt =$this->reports_model->getLastDate("sales","date");
        
		if ($this->input->post('swarehouse')) {
            $wahouse_id =  $this->input->post('swarehouse');
        }else{
			$wahouse_id = 0;	
        }
        if ($this->input->post('reference_no')) {
            $reference = $this->input->post('reference_no');
        }else{
            $reference = 0;
        }
        if ($this->input->post('category')) {
            $category_id = $this->input->post('category');
        }else{
            $category_id = 0;
        }
        if ($this->input->post('product')) {
            $product_id = $this->input->post('product');
        }else{
            $product_id = 0;
        }
       
       if ($this->input->post('biller')) {
            $biller = $this->input->post('biller');
        }else{
            $biller = 0;
        }
        if ($this->input->post('from_date')) {
            $from_date =  $this->erp->fld($this->input->post('from_date'));
        }else{
            $from_date = $datt;
        }
        if ($this->input->post('to_date')) {
            $to_date = $this->erp->fld($this->input->post('to_date'));
        }else{
            $to_date= $datt;
        }
        
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		
		$this->data['swarehouses'] = $this->reports_model->getWareFullByUSER($wid);
		$this->data['warehouses'] = $this->reports_model->getWarehousesProductProfit($wid,$wahouse_id,$category_id,$product_id,trim($from_date),trim($to_date),$reference,$biller);
		$this->data['categories']   = $this->reports_model->getAllCategories();
		$this->data['products']     = $this->reports_model->getAllProducts();
		$this->data['billers']     = $this->reports_model->getAllBillers();
		
        $this->data['reference1'] = $reference;
		$this->data['wahouse_id1'] = $wahouse_id;
        $this->data['product_id1'] = $product_id;
        if($from_date){
            $this->data['from_date1'] = trim($from_date);
        }
        if($to_date){
            $this->data['to_date1'] = trim($to_date);
        }
         $this->data['cate_id1'] = $category_id;
         $this->data['biller1'] = $biller;
        
		//$this->erp->print_arrays($this->reports_model->getAllCategories());
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('product_profit'), 'bc' => $bc);
        $this->page_construct('reports/product_profit', $meta, $this->data);
    }
	
	function transferReport(){
        if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
            if (!empty($_POST['val'])) {
                $g_qty      =0;
                $g_cost     =0;
                $g_tax      =0;
                $g_subtotal =0;
                $row        = 2;
                $config     =null;
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('transfers'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Description'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('unit_cost'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('tax'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('subtotal'));
                $this->excel->getActiveSheet()->getStyle('A1'. $row.':F1'.$row)->getFont()->setBold(true);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                foreach ($_POST['val'] as $id) {
                    $transfers = $this->reports_model->getTransfersReportDetail($id,$config["ob_set"],$config["per_page"]);
                    foreach($transfers as $transfer){
                        // $this->erp->print_arrays($transfer);    
                        $query=$this->db->query("
                        SELECT product_name,
                        product_code,
                        unit_cost,
                        item_tax, 
                        subtotal,
                        erp_transfer_items.quantity,
                        erp_product_variants.name as var_name,
                        erp_units.name as unit_name
                        From erp_transfer_items 
                        LEFT JOIN erp_products ON erp_products.id=erp_transfer_items.product_id 
                        LEFT JOIN erp_units ON erp_units.id =erp_products.unit
                        LEFT JOIN erp_product_variants ON option_id = erp_product_variants.id
                        where erp_transfer_items.transfer_id = {$transfer->id}")->result();

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $transfer->transfer_no.'>> '.$transfer->date.'>> '.lang('from').':'.$transfer->from_warehouse_name.'>> '.lang('to').':'.$transfer->to_warehouse_name);
                        $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setSize(12)->setBold(true);
                        $this->excel->getActiveSheet()->mergeCells('A'.$row.':F'.$row);
                    $row++;
                    $Tqty=0;$t_cost=0;$t_tax=0;$t_subtotal=0;
                   foreach($query as $q){
                       $Tqty +=$q->quantity;
                       $t_cost +=$q->unit_cost;
                       $t_tax +=$q->item_tax;
                       $t_subtotal +=$q->subtotal;
    					
                       $this->excel->getActiveSheet()->SetCellValue('A' . $row, $q->product_name.'('.$q->product_code.')');
                       $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->erp->formatQuantity($q->quantity));
                       $this->excel->getActiveSheet()->SetCellValue('C' . $row, !empty($q->var_name)?$q->var_name:$q->unit_name);
                       $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->erp->formatMoney($q->unit_cost));
                       $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($q->item_tax));
                       $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($q->subtotal));
                       $this->excel->getActiveSheet()->getStyle('D'. $row.':F'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                       $this->excel->getActiveSheet()->getStyle('B'. $row.':C'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                       $row++;
                    }
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang("total"));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $Tqty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->erp->formatMoney($t_cost));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($t_tax));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($t_subtotal));
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('D'. $row.':F'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('B'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                    $this->excel->getActiveSheet()->getStyle('B'. $row.':C'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('D'.$row.':F'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);

                    $g_qty += $Tqty;
                    $g_cost += $t_cost;
                    $g_tax += $t_tax;
                    $g_subtotal += $t_subtotal;
                    $row++;
                }
            }
    			//set font bold,font color,font size,font name and background color to excel  by dara
    			$styleArray = array(
    				'font'  => array(
    					'bold'  => true,
    					'color' => array('rgb' => 'FFFFFF'),
    					'size'  => 10,
    					'name'  => 'Verdana'
    				),
    				'fill' => array(
    					'type' => PHPExcel_Style_Fill::FILL_SOLID,
    					'color' => array('rgb' => '428BCA')
    				)
    			);
    			
    			$this->excel->getActiveSheet()->getStyle('A1:F1')->applyFromArray($styleArray);
    				
    			//set border
    			$styleArray1 = array(
    				'borders' => array(
    				  'allborders' => array(
    					  'style' => PHPExcel_Style_Border::BORDER_THIN
    				  )
    				)
    			);
    			$this->excel->getActiveSheet()->getStyle('A1:F'.$row)->applyFromArray($styleArray1);
    			
                $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang("grand_total"));
                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $g_qty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->erp->formatMoney($g_cost));
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($g_tax));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($g_subtotal));
                $this->excel->getActiveSheet()->getStyle('A'. $row.':F'. $row)->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle('A'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                $this->excel->getActiveSheet()->getStyle('D'. $row.':F'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                // $this->excel->getActiveSheet()->getStyle('B'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                $this->excel->getActiveSheet()->getStyle('B'. $row.':C'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('B'.$row.':F'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                
            $filename = lang('Transfers Report'). date('Y_m_d_H_i_s');
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($this->input->post('form_action') == 'export_pdf') {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            } else {
            $this->session->set_flashdata('error', $this->lang->line("no_transfer_selected. Please select at least one"));
            redirect($_SERVER["HTTP_REFERER"]);
            }
        }   
    }
	
	function adjustment_report_action(){
        if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
            $row        =null;
            if (!empty($_POST['val'])) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('Adjustment'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('item'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('QOH'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('variant'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('type'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('quantity_adjustment')); 
                $this->excel->getActiveSheet()->getStyle('A1'. $row.':E1'.$row)->getFont()->setBold(true);
				$this->excel->getActiveSheet()->getStyle('A1'. $row.':E1'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(23); 
                $grand_total=0;
                $row = 2;
                foreach ($_POST['val'] as $id) {
                    $adjusts = $this->reports_model->getAlladjustmentByID($id);
                    foreach($adjusts as $adjust){     
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $adjust->date.'>> '.$adjust->reference_no.'>>' .$adjust->warehouse .'>>'.$adjust->username);
                        $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setSize(12)->setBold(true);
                        $this->excel->getActiveSheet()->mergeCells('A'.$row.':F'.$row);
                    $row++;
                    $Tqty=0;$t_cost=0;$t_tax=0;$t_subtotal=0;
					$query=$this->db->query("
                       SELECT erp_adjustment_items.quantity as qty_adjust,erp_adjustment_items.type,erp_products.code as codes,erp_products.name as product_names,erp_products.quantity as QOH,erp_product_variants.name as variant,erp_units.name as unit
                       From erp_adjustment_items left JOIN erp_products ON erp_products.id=erp_adjustment_items.product_id LEFT JOIN erp_product_variants ON erp_product_variants.id = erp_adjustment_items.option_id LEFT JOIN erp_units ON erp_units.id=erp_products.unit  
                       where erp_adjustment_items.adjust_id = {$adjust->id}
                       
                     ")->result();
                    $quantity=0;
                    foreach($query as $q){
                        $quantity +=$q->t_qty;
    					
                       $this->excel->getActiveSheet()->SetCellValue('A' . $row, $q->codes ? "   "."(".$q->codes .")".$q->product_names :'');
                       $this->excel->getActiveSheet()->SetCellValue('B' . $row, $q->QOH);
                       $this->excel->getActiveSheet()->SetCellValue('C' . $row, !empty($q->variant)?$q->variant :$q->unit);
                       $this->excel->getActiveSheet()->SetCellValue('D' . $row, $q->type);
                       $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatQuantity($q->qty_adjust));

                        $this->excel->getActiveSheet()->getStyle('C'. $row.':E'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
						$grand_total +=$q->qty_adjust;
                       $row++;
                    }
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, lang("grand_total"));
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $grand_total);
					$this->excel->getActiveSheet()->getStyle('D'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
					$this->excel->getActiveSheet()->getStyle('E'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
					$this->excel->getActiveSheet()->getStyle('D'. $row.':E'.$row)->getFont()->setBold(true);
					
              
                }
				

            }

    		$this->excel->getActiveSheet()->getStyle('E'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);	              
            $filename = lang('adjustment_report'). date('Y_m_d_H_i_s');
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($this->input->post('form_action') == 'export_pdf') {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            } else {
            $this->session->set_flashdata('error', $this->lang->line("no_adjustment_selected. Please select at least one"));
            redirect($_SERVER["HTTP_REFERER"]);
            }
        }   
    }
	
	function customersReportDetails($pdf = NULL, $excel = NULL,$warehouse,$customer,$reference,$product_id,$from_date,$to_date){
        $row        = null;
        if ($pdf || $excel) {			
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('inventory'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('type'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
            $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference'));
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('product_name'));
            $this->excel->getActiveSheet()->SetCellValue('E1', lang('categories'));
            $this->excel->getActiveSheet()->SetCellValue('F1', lang('qty'));
            $this->excel->getActiveSheet()->SetCellValue('G1', lang('unit'));
            $this->excel->getActiveSheet()->SetCellValue('H1', lang('unit_price'));
            $this->excel->getActiveSheet()->SetCellValue('I1', lang('amount'));
            $this->excel->getActiveSheet()->getStyle('A1'. $row.':I1'.$row)->getFont()->setBold(true);
			$this->excel->getActiveSheet()->getStyle('A1:I1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
			$wid = $this->reports_model->getWareByUserID();
            $row = 2;
            $grand = 0 ;
            $gqty = 0;
            $this->db->select("customer_id,customer,SUM(erp_sale_items.quantity) as qty")
			->join("erp_sale_items","erp_sale_items.sale_id=erp_sales.id","LEFT");
            if($customer){
                $this->db->where("erp_sales.customer_id",$customer);
            }
			if($reference){
				$this->db->where("reference_no",$reference);
			}
			if($product_id){
				$this->db->where("product_id",$product_id);
			}
			if($warehouse){
				$this->db->where("erp_sales.warehouse_id",$warehouse);
			}else{
				if($wid){
					$this->db->where("erp_sales.warehouse_id IN ($wid)");
				}
			}
			  if($from_date && $to_date){
                    $this->db->where('erp_sales.date >="'.$from_date.' 00.00" AND erp_sales.date<="'.$to_date.' 23.59"');
                }
            $this->db->group_by("customer_id");
            $customers = $this->db->get("erp_sales")->result();
            foreach($customers as $cus){
				if($cus->customer_id){
					if($cus->qty){
               
                $this->excel->getActiveSheet()->SetCellValue('A' . $row, $cus->customer);
                $this->excel->getActiveSheet()->mergeCells('A'.$row.':I'.$row);
                $this->excel->getActiveSheet()->getStyle('A'. $row.':I'.$row)->getFont()->setBold(true);

                $this->db->select("product_id,product_name,erp_sale_items.quantity,net_unit_price,customer_id,reference_no,erp_sales.date,'SALE' as transaction_type,unit,option_id ")->join("erp_sales","erp_sales.id = erp_sale_items.sale_id","LEFT")->join("erp_products","erp_products.id = erp_sale_items.product_id","LEFT");
                if($reference){
                    $this->db->where("reference_no",$reference);
                }
                if($customer){
                    $this->db->where("customer_id",$customer);
                }
                if($product_id){
                    $this->db->where("product_id",$product_id);
                }
				if($warehouse){
					$this->db->where("erp_sales.warehouse_id",$warehouse);
				}else{
					if($wid){
						$this->db->where("erp_sales.warehouse_id IN ($wid)");
					}
				}
                if($from_date && $to_date){
                    $this->db->where('date >="'.$from_date.' 00.00" AND date<="'.$to_date.' 23.59"');
                }
				$this->db->select('erp_sale_items.*, erp_categories.name as cate_name');
				$this->db->join('erp_categories', 'erp_categories.id = erp_products.category_id', 'left');
                $sale_items = $this->db->get("erp_sale_items")->result();
                $tqty = 0 ; 
                $amount = 0 ;
                $row++;
				$vqty = 0;
                foreach($sale_items as $row1){
                   
                    if($cus->customer_id == $row1->customer_id){
                        if($row1->option_id){
                            $unit_n = $this->db->get_where('erp_product_variants',array('id'=> $row1->option_id),1)->row();
                            $unit_q = $unit_n->qty_unit;
                            $unit_name = ' ( '.$this->erp->formatQuantity(( abs($row1->quantity)*$unit_q)/$unit_q).' '.$unit_n->name.' )';
							$vqty = abs($row1->quantity)*$unit_q;		
                        }else{
                            $unit = $this->db->get_where("erp_units",array('id'=>$row1->unit),1)->row();
                            $unit_name = $unit->name;
							$vqty =  abs($row1->quantity);
                        }
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $row1->transaction_type);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->erp->hrsd($row1->date));
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $row1->reference_no." ");
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $row1->product_name);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $row1->cate_name);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $vqty);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $unit_name);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $row1->net_unit_price);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($row1->quantity)*($row1->net_unit_price));
                        $tqty+=$vqty;
                        $amount+=(abs($row1->quantity)*abs($row1->net_unit_price));
                        $row++;
                        }
                    }
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, 'Total >> '.$cus->customer);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $tqty);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatMoney($amount));
                    $this->excel->getActiveSheet()->getStyle('I'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    // $this->excel->getActiveSheet()->mergeCells('A'.$row.':D'.$row);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':I'.$row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('F'.$row. ':I'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                    $grand +=$amount;
                    $gqty+=$tqty;
                    $row++;
                    
                }
			}
			}
                $this->excel->getActiveSheet()->SetCellValue('A' . $row, 'Grand Total ');
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $gqty);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatMoney($grand));
                $this->excel->getActiveSheet()->getStyle('I'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                // $this->excel->getActiveSheet()->mergeCells('A'.$row.':D'.$row);
                $this->excel->getActiveSheet()->getStyle('A'. $row.':I'.$row)->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle('F'.$row. ':I'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                
            }
         

            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
           // $this->excel->getActiveSheet()->getStyle('A1'. $row.':H1'.$row)->getFont()->setBold(true);

            $filename = lang('Product Customer'). date('Y_m_d_H_i_s');
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            if ($pdf) {
                $styleArray = array(
                    'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                );
                $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                    PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($excel) {
                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');
            
                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
        }
	
	function customer_details()
    {
       
        $datt =$this->reports_model->getLastDate("erp_sales","date");
        if ($this->input->post('customer')) {
            $customer =  $this->input->post('customer');
        }else{
            $customer = null;
        }
		if ($this->input->post('warehouse')) {
            $warehouse =  $this->input->post('warehouse');
        }else{
            $warehouse = null;
        }
		if ($this->input->post('category')) {
            $category_id =  $this->input->post('category');
        }else{
            $category_id = null;
        }
        if ($this->input->post('reference_no')) {
            $reference = $this->input->post('reference_no');
        }else{
            $reference = null;
        }
       
        if ($this->input->post('product')) {
            $product_id = $this->input->post('product');
        }else{
            $product_id = null;
        }
        
       
        if ($this->input->post('from_date')) {
            $from_date =  $this->erp->fld($this->input->post('from_date'));
        }else{
            $from_date =$datt;
        }
        if ($this->input->post('to_date')) {
            $to_date = $this->erp->fld($this->input->post('to_date'));
        }else{
            $to_date= $datt;
        }
		
		
		$this->data['customer']    	= $customer;
		$this->data['warehouse']    = $warehouse;
		$this->data['reference']    = $reference;
		$this->data['category_id']    	= $category_id;
		$this->data['product_id']   = $product_id;
		$this->data['from_date']    = $from_date;
		$this->data['to_date'] 	  	= $to_date;
		$this->data['products']     = $this->reports_model->getAllProducts();
		
		if($customer == null){
            $this->data['customer1'] = 0;
        }else{
             $this->data['customer1'] = $customer;
        }
        if($reference == null){
             $this->data['reference1'] = 0;
        }else{
            $this->data['reference1'] = $reference;
        }
        if($product_id == null){
             $this->data['product_id1'] = 0;
        }else{
            $this->data['product_id1'] = $product_id;
        }
		if($warehouse == null){
             $this->data['warehouse1'] = 0;
        }else{
            $this->data['warehouse1'] = $warehouse;
        }
        if($from_date == null){
             $this->data['from_date1'] = 0;
        }else{
            $this->data['from_date1'] = trim($from_date);
        }
        if($to_date == null){
             $this->data['to_date1'] = 0;
        }else{
            $this->data['to_date1'] = trim($to_date);
        }		
		$wid = $this->reports_model->getWareByUserID();
		$this->data['warefull'] = $this->reports_model->getWareFullByUSER($wid);
		$this->data['biller_idd'] = $this->reports_model->getBiilerByUserID();
		$this->data['categories'] = $this->site->getAllCategories();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('product_customers'), 'bc' => $bc);
        $this->page_construct('reports/customer_details', $meta, $this->data);
    }
	
	function productionReports(){
        if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
            $row        = null;
            if (!empty($_POST['val'])) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('production'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('type'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('item_code'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('item_name'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('cost'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('total_costs'));
                $this->excel->getActiveSheet()->getStyle('A1'. $row.':G1'.$row)->getFont()->setBold(true);
                // $this->excel->getActiveSheet()->getStyle('A1'. $row.':G1'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                $config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
                $config["per_page"] =3;
                $bom_id = 0;
                $row = 2;
                foreach ($_POST['val'] as $id) {
                    // echo $id;exit();
                    $converts = $this->reports_model->getConvertsProduct($id,$config['per_page'],$config["ob_set"]);
                    foreach($converts as $convert){
                        // $this->erp->print_arrays($convert);
                        $bom_id = $convert->bom_id;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrsd($convert->date).'>> '.$convert->reference_no.'>> '.$convert->name.'>> '.$convert->wname);
                        $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->mergeCells('A'.$row.':C'.$row);

                        $convert_items = $this->db->select("
                                convert_items.*,
                                product_variants.name as uname,
                                product_variants.qty_unit")
                        ->join("product_variants","product_variants.id=convert_items.option_id","LEFT")                                     
                        ->where("convert_items.status","deduct")
                        ->where("convert_id",$convert->id)
                        ->get("convert_items")->result();
                        $total_input = 0;
                        $row++;          
                        foreach($convert_items as $convert_item){ 
                            $total_input_cost = $convert_item->cost*$convert_item->quantity;
                            $total_input += $total_input_cost;

                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang("INPUT"));
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $convert_item->product_code);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $convert_item->product_name);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $convert_item->quantity);
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $convert_item->uname);
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($convert_item->cost));
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($total_input_cost));
                            $this->excel->getActiveSheet()->getStyle('F'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $this->excel->getActiveSheet()->getStyle('A'. $row.':E'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
							$row++;
                        }
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang("total").' '.lang("INPUT").':');
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row,$this->erp->formatMoney($total_input));
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':G'.$row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->mergeCells('A'.$row.':F'.$row);
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle('G'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                        $convert_items1 = $this->db->select("
                                convert_items.*,
                                product_variants.name as uname,
                                product_variants.qty_unit")
                        ->join("product_variants","product_variants.id=convert_items.option_id","LEFT")                                     
                        ->where("convert_items.status","add")
                        ->where("convert_id",$convert->id)
                        ->get("convert_items")->result();
                        $total_output = 0;
                        $row++;          
                        foreach($convert_items1 as $convert_item1){ 
                            $total_output_cost = $convert_item1->cost*$convert_item1->quantity;
                            $total_output += $total_output_cost;
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang("OUTPUT"));
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $convert_item1->product_code);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $convert_item1->product_name);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $convert_item1->quantity);
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $convert_item1->uname);
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($convert_item1->cost));
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($total_output_cost));
                            $this->excel->getActiveSheet()->getStyle('F'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $this->excel->getActiveSheet()->getStyle('A'. $row.':E'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                             $row++;
                        }
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang("total").' '.lang("OUTPUT").':');
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row,$this->erp->formatMoney($total_output));
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':G'.$row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->mergeCells('A'.$row.':F'.$row);
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle('G'.$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN); 
    					
    					//set font bold,font color,font size,font name and background color to excel  by dara
    					$styleArray = array(
    						'font'  => array(
    							'bold'  => true,
    							'color' => array('rgb' => 'FFFFFF'),
    							'size'  => 10,
    							'name'  => 'Verdana'
    						),
    						'fill' => array(
    							'type' => PHPExcel_Style_Fill::FILL_SOLID,
    							'color' => array('rgb' => '428BCA')
    						)
    					);
    					
    					$this->excel->getActiveSheet()->getStyle('A1:G1')->applyFromArray($styleArray);
    						
    					// set border
    					// $styleArray1 = array(
    						// 'borders' => array(
    						  // 'allborders' => array(
    							  // 'style' => PHPExcel_Style_Border::BORDER_THIN
    						  // )
    						// )
    					// );
    					// $this->excel->getActiveSheet()->getStyle('A1:G'.$row)->applyFromArray($styleArray1);
    				
                    }
                    $row++;

                }

    			
    			
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);

                $filename = lang('Production Report'). date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($this->input->post('form_action') == 'export_pdf') {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                    }
                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
                // foreach ($_POST['val'] as $id) {
                //     echo $id;exit();
                // }
             }else {
                $this->session->set_flashdata('error', $this->lang->line("no_productuction_selected. Please select at least one."));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        }
    }
	
	function getSupplierBalance_action(){
        if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
            if ($_POST['val']) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('balance'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('payment_status'));
                $this->excel->getActiveSheet()->getStyle('A1:H1')->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle('A1:H1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                $row = 2;
				$sum_grandtotal = 0;
				$sum_paid = 0;
				$sum_balance = 0;
                foreach ($_POST['val'] as $id) {
                        $supplier = $this->db
						->select($this->db->dbprefix('purchases') . ".id, ".$this->db->dbprefix('purchases') . ".date, reference_no, " . 
									 $this->db->dbprefix('warehouses') . ".name as wname, supplier ,
									 grand_total, paid, (grand_total-paid) as balance, " . $this->db->dbprefix('purchases') . ".payment_status", FALSE)
						->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
						->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
						->join('companies', 'companies.id = purchase_items.supplier_id', 'left')
						->where(array('purchases.status' => 'received', 'purchases.payment_status <>' => 'paid','purchases.id' => $id))
						->group_by('purchases.id')
						->get("purchases")->result(); 
                        foreach($supplier as $sup){ 
							$sum_grandtotal += $sup->grand_total;
							$sum_paid += $sup->paid;
							$sum_balance += $sup->balance;
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row,$sup->date);
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sup->reference_no);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sup->wname);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sup->supplier);
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($sup->grand_total));
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($sup->paid));
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($sup->balance));
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $sup->payment_status);
                            $this->excel->getActiveSheet()->getStyle('H'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
							$this->excel->getActiveSheet()->getStyle('E'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
							$i = $row+1;
							$this->excel->getActiveSheet()->SetCellValue('E' . $i, $this->erp->formatMoney($sum_grandtotal));
							$this->excel->getActiveSheet()->SetCellValue('F' . $i, $this->erp->formatMoney($sum_paid));
							$this->excel->getActiveSheet()->SetCellValue('G' . $i, $this->erp->formatMoney($sum_balance));
							$row++;
                        }	
                }
				$this->excel->getActiveSheet()->getStyle('E'.$i. ':G'.$i)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
				$this->excel->getActiveSheet()->getStyle('E'. $i.':G'.$i)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);				
    			
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				
                $filename = lang('supplier_banlance'). date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($this->input->post('form_action') == 'export_pdf') {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
             }else {
                $this->session->set_flashdata('error', $this->lang->line("no_supplier_selected. Please select at least one."));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        }
    }
	
	function usingStockReport_action(){
        if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf'){
            $row        = null;
            if (!empty($_POST['val'])) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('using_stock'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang("item"));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang("category_expense"));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang("item_description"));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang("quantity"));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang("unit"));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang("cost"));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang("Total"));
                $this->excel->getActiveSheet()->getStyle('A1'. $row.':G1'.$row)->getFont()->setBold(true);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);

                //set font bold,font color,font size,font name and background color to excel  by dara
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => 'FFFFFF'),
                        'size'  => 11,
                        'name'  => 'Verdana'
                    ),
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => '428BCA')
                    )
                );
            
                $this->excel->getActiveSheet()->getStyle('A1:G1')->applyFromArray($styleArray);
                $row    = 2;
                $config = null;
                foreach ($_POST['val'] as $id) {

                    // $this->erp->print_arrays($id);
                    $using_stock = $this->reports_model->getUsingStockReport($id,$config["ob_set"],$config["per_page"]);
                    foreach($using_stock as $stock){
                        // $this->erp->print_arrays($stock);
                        $query=$this->db->query("
                        SELECT
                            erp_enter_using_stock_items.*, erp_products. NAME AS product_name,
                            erp_expense_categories. NAME AS exp_cate_name,
                            erp_enter_using_stock_items.unit AS unit_name,
                            erp_products.cost,
                            erp_position. NAME AS pname,
                            erp_reasons.description AS rdescription,
                            erp_product_variants.qty_unit AS variant_qty
                        FROM
                        erp_enter_using_stock_items
                        LEFT JOIN erp_products ON erp_products. CODE = erp_enter_using_stock_items. CODE
                        LEFT JOIN erp_position ON erp_enter_using_stock_items.description = erp_position.id 
                        LEFT JOIN erp_reasons ON erp_enter_using_stock_items.reason = erp_reasons.id
                        LEFT JOIN erp_product_variants ON erp_enter_using_stock_items.option_id = erp_product_variants.id
                        LEFT JOIN erp_expense_categories ON erp_enter_using_stock_items.exp_cate_id = erp_expense_categories.id where erp_enter_using_stock_items.reference_no='{$stock->refno}' 
                        ")->result();

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $stock->refno.'>> '.$this->erp->hrld($stock->date).'>> '.$stock->company.'>> '.$stock->warehouse_name." >> ".$stock->username);
                        $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setSize(12)->setBold(true);
                        $this->excel->getActiveSheet()->mergeCells('A'.$row.':G'.$row);
                        $row++;
                        foreach($query as $q){
                            // $this->erp->print_arrays($q);
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, $q->product_name.'('.$q->code .')');
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $q->exp_cate_name);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $q->rdescription);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->erp->formatQuantity($q->qty_use));
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $q->unit_name);
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->erp->formatMoney($q->cost));
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($q->cost*$q->qty_use) );
                            $this->excel->getActiveSheet()->getStyle('F'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $this->excel->getActiveSheet()->getStyle('E'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                            $row++;
                        } 
                        // set border
                        $styleArray1 = array(
                            'borders' => array(
                              'allborders' => array(
                                  'style' => PHPExcel_Style_Border::BORDER_THIN
                              )
                            )
                        );
                        $this->excel->getActiveSheet()->getStyle('A1:G'.$row)->applyFromArray($styleArray1);
                    }
                }
                

                $filename = lang('Report List Using Stock'). date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($this->input->post('form_action') == 'export_pdf') {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
        } else {
            $this->session->set_flashdata('error', $this->lang->line("no_selected. Please select at least one"));
            redirect($_SERVER["HTTP_REFERER"]);
        }
      }
    }
	
	function convertReport_action()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('convert_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('quantity'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('unit'));
			

                    $row = 2;
					
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getConvertExportByID($id);
						
						//$qty += $sc->quantity;
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->product_code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->product_name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->con_qty);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->unit);
    
						$row++;
                    }

                  /*   $this->excel->getActiveSheet()->getStyle("C" . $row . ":D" . $row)->getBorders()
						->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				
					$this->excel->getActiveSheet()->getStyle('C'. $row.':D'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
 */
                //set font bold,font color,font size,font name and background color to excel  by dara
                    $styleArrays = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 10,
                            'name'  => 'Verdana'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428BCA')
                        )
                    );
                    
                    $this->excel->getActiveSheet()->getStyle('A1:D1')->applyFromArray($styleArrays);
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
					// $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
					// $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
					// $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				
				
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'sales_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
						$styleArray = array(
							'borders' => array(
								'allborders' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN
								)
							)
						);
						$this->excel->getDefaultStyle()->applyFromArray($styleArray);
						$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
						 ));
						
						$this->excel->getActiveSheet()->getStyle('G2:G' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
						 ));
						
						$this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
						$this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
						$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
							 'wrap'       => true
						 ));
						 $this->excel->getActiveSheet()->getStyle('G2:G' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
							 'wrap'       => true
						 ));
						ob_clean();
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            }else {
                $this->session->set_flashdata('error', lang("No_sales_report_selected. Please select at least one."));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}

	function convertReportDetails_action()
	{
		if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf'){
			
			if (!empty($_POST['val'])) 
			{
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('convert_detail'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang("type"));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang("item_code"));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang("item_name"));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang("quantity"));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang("unit"));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang("cost"));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang("total_costs"));
				$this->excel->getActiveSheet()->getStyle('A1:G1')->getFont()->setBold(true);

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);

				//set font bold,font color,font size,font name and background color to excel  by dara
				$styleArray = array(
					'font'  => array(
						'bold'  => true,
						'color' => array('rgb' => 'FFFFFF'),
						'size'  => 11,
						'name'  => 'Verdana'
					),
					'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'color' => array('rgb' => '428BCA')
					)
				);
			
				$this->excel->getActiveSheet()->getStyle('A1:G1')->applyFromArray($styleArray);
				$row        = 2;
                $config     = null;
				foreach ($_POST['val'] as $id) {

					// $this->erp->print_arrays($id);
					$convert_detail = $this->reports_model->getConvertExportDetails($id,$config["ob_set"],$config["per_page"]);
					foreach($convert_detail as $convert){
						// $this->erp->print_arrays($stock);
						$query = $this->db->query("
							SELECT   	erp_convert_items.status,erp_convert_items.product_code,erp_convert_items.product_name,erp_convert_items.quantity,erp_units.name as unit,erp_convert_items.cost 
							From 
								erp_convert_items LEFT JOIN erp_products ON erp_products.id=erp_convert_items.product_id LEFT JOIN erp_units ON erp_units.id =erp_products.unit 
							where 
								erp_convert_items.convert_id ='{$convert->id}' 
								")->result();

						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $convert->date .' >> '.$convert->reference_no .' >> '.$convert->warehouse .' >> '.$convert->username);
						
						$this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setSize(12)->setBold(true);
						$this->excel->getActiveSheet()->mergeCells('A'.$row.':G'.$row);
						$row++;
						foreach($query as $q){
							// $this->erp->print_arrays($q);
							$this->excel->getActiveSheet()->SetCellValue('A' . $row, lang($q->status));
							$this->excel->getActiveSheet()->SetCellValue('B' . $row, $q->product_code);
							$this->excel->getActiveSheet()->SetCellValue('C' . $row, $q->product_name);
							$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->erp->formatQuantity($q->quantity));
							$this->excel->getActiveSheet()->SetCellValue('E' . $row, $q->unit);
							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $q->cost);
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $q->cost*$q->quantity);
							
							$this->excel->getActiveSheet()->getStyle('F'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
							$this->excel->getActiveSheet()->getStyle('E'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
							$row++;
						} 
					
						$styleArray1 = array(
							'borders' => array(
							  'allborders' => array(
								  'style' => PHPExcel_Style_Border::BORDER_THIN
							  )
							)
						);
						$this->excel->getActiveSheet()->getStyle('A1:G'.$row)->applyFromArray($styleArray1);
					}
				}
				

				$filename = lang('Report List Using Stock'). date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				if ($this->input->post('form_action') == 'export_pdf') 
				{
					$styleArray = array(
						'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
					);
					$this->excel->getDefaultStyle()->applyFromArray($styleArray);
					$this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
					require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
					$rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
					$rendererLibrary = 'MPDF';
					$rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
					if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
						die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
						PHP_EOL . ' as appropriate for your directory structure');
					}

					header('Content-Type: application/pdf');
					header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
					header('Cache-Control: max-age=0');

					$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
					$objWriter->save('php://output');
					exit();
				}
				if ($this->input->post('form_action') == 'export_excel') 
				{
					ob_clean();
					header('Content-Type: application/vnd.ms-excel');
					header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
					header('Cache-Control: max-age=0');
				
					ob_clean();
					$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
					$objWriter->save('php://output');
					exit();
				}
			} else {
				$this->session->set_flashdata('error', $this->lang->line("no_selected. Please select at least one"));
				redirect($_SERVER["HTTP_REFERER"]);
			}
        }
    }

	function production_report()
    {
		$this->load->library("pagination");
       $str = "";
        if ($this->input->get('reference_no')) {
            $reference = $this->input->get('reference_no');
			$str .="&reference=".$reference;
        }else{
            $reference = null;
        } 
        if ($this->input->get('from_date')) {
            $from_date =  $this->erp->fld($this->input->get('from_date'));
			$str .="&from_date=".trim($from_date);
        }else{
            $from_date = null;
        }
        if ($this->input->get('to_date')) {
            $to_date = $this->erp->fld($this->input->get('to_date'));
			$str .="&to_date=".trim($to_date);
        }else{
            $to_date=null;
        }
		if( $reference){
			 $this->db->where("reference_no",$reference);
		}
		if($from_date && $to_date){
			$this->db->where('date >="'.trim($from_date).' 00.00" AND date<="'.trim($to_date).' 23.59"');
		}
		if( $reference){
			 $this->db->where("reference_no",$reference);
		}
		$row_nums = $this->db->group_by('reference_no')->get('erp_convert')->num_rows();
		
		$config = array();
		$config['suffix'] = "?v=1".$str;
        $config["base_url"] = base_url() . "reports/production_report/";
		$config["total_rows"] = $row_nums;
		$config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] =3; 
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '<li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '<li>';
		$config['cur_tag_open'] = '<li class="active"><a href="#">';
		$config['cur_tag_close'] = '</a><li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '<li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '<li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';

		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links();  
		$this->data['converts']    = $this->reports_model->getConverts($reference,trim($from_date),trim($to_date),$config['per_page'],$config["ob_set"]);
		$this->data['reference']    = $reference;
		$this->data['from_date']    = trim($from_date);
		$this->data['to_date'] 	  	= trim($to_date);
		$this->data['products']     = $this->reports_model->getAllProducts();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('production_report'), 'bc' => $bc);
        $this->page_construct('reports/production_report', $meta, $this->data);
    }
	
	function tranfer_report()
    {
        if ($this->input->post('reference_no')) {
            $reference = $this->input->post('reference_no');
        }else{
            $reference = null;
        } 
        if ($this->input->post('from_date')) {
            $from_date =  $this->erp->fld($this->input->post('from_date'));
        }else{
            $from_date = null;
        }
        if ($this->input->post('to_date')) {
            $to_date = $this->erp->fld($this->input->post('to_date'));
        }else{
            $to_date=null;
        }
		
		$this->data['reference']    = $reference;
		$this->data['from_date']    = $from_date;
		$this->data['to_date'] 	  	= $to_date;
		$this->data['products']     = $this->reports_model->getAllProducts();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('tranfer_report')));
        $meta = array('page_title' => lang('tranfer_report'), 'bc' => $bc);
        $this->page_construct('reports/tranfer_report', $meta, $this->data);
    }
	
	function inventory_inout()
    {
		$datt =$this->reports_model->getLastDate("stock_trans","tran_date");
        if ($this->input->post('product')) {
            $product = $this->input->post('product');
        }else{
			$product = 0;
        }    
		if ($this->input->post('category')) {
            $category = $this->input->post('category');
        }else{
			$category = 0;
        } 
		if ($this->input->post('biller')) {
            $biller = $this->input->post('biller');
        }else{
			$biller = 0;
        } 
		if ($this->input->post('from_date')) {
            $from_date = $this->erp->fsd($this->input->post('from_date'));
        }else{
			$from_date = $datt;
        } 
		if($this->input->post('to_date')) {
            $to_date = $this->erp->fsd($this->input->post('to_date'));
        }else{
			$to_date = $datt;
        } 
		$wid = $this->reports_model->getWareByUserID();
		if ($this->input->post('warehouse')) {
            $warehouse = $this->input->post('warehouse');
        }else{
				$warehouse = 0;
        } 
		
		//$this->erp->print_arrays($wid);
		$this->data['ware'] 		= $this->reports_model->getWarePur($wid,$warehouse,$product,$category,$biller);
		$this->data['warefull'] 	= $this->reports_model->getWareFullByUSER($wid);
		$this->data['biller2']    	= $biller;
		$this->data['category2']    = $category;
		$this->data['product2'] 	= $product;
		$this->data['from_date2']   = trim($from_date);
		$this->data['to_date2'] 	= trim($to_date);
		$this->data['warehouse2'] 	= $warehouse;
		$this->data['categories'] 	= $this->site->getAllCategories();
		$this->data['products']     = $this->reports_model->getAllProducts();
		$this->data['billers']     	= $this->reports_model->getAllBillers();
        //Store value in filter pass to export excel & pdf
        $this->data['product1'] 	= $product;
		$this->data['category1'] 	= $category;	
        $this->data['biller1'] 		= $biller;
        $this->data['warehouse1'] 	= $warehouse;
		$this->data['biller_idd'] 	= $this->reports_model->getBiilerByUserID();
		 
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('inventory_inout'), 'bc' => $bc);
        $this->page_construct('reports/inventory_inout', $meta, $this->data);
    }

    function product_grossmargin($warehouse_id = NULL)
    {
        $this->erp->checkPermissions('quantity_alert',NULL,'product_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $wid = $this->reports_model->getWareByUserID();

        $this->data['products'] = $this->site->getProducts();
        $this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);

        $this->data['warehouse'] = $this->site->getWarehouseByID($warehouse_id) ;
        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;

        } else {

            $this->data['warehouses'] = $this->products_model->getUserWarehouses();
            if($warehouse_id){
                $this->data['warehouse_id'] = $warehouse_id;
                $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
            }else{
                $this->data['warehouse_id'] = str_replace(',', '-',$this->session->userdata('warehouse_id'));
                $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->products_model->getUserWarehouses() : NULL;
            }
        }

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_grossmargin')));
        $meta = array('page_title' => lang('product_grossmargin'), 'bc' => $bc);
        $this->page_construct('reports/product_grossmargin', $meta, $this->data);
    }

    function getProductGrossmarginReport($warehouse_id = NULL)
    {
        if($warehouse_id){
            $warehouse_ids = explode('-', $warehouse_id);
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }

        if ($this->input->get('product_id')) {
            $product_id = $this->input->get('product_id');
        } else {
            $product_id = NULL;
        }

        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->erp->fld($start_date);
            $end_date = $this->erp->fld($end_date);
        }

        $this->load->library('datatables');
        if($warehouse_id) {
            $this->datatables
                ->select('sale_items.id as sid, sales.date, sales.reference_no, sale_items.product_code, sale_items.product_name, sale_items.quantity, IF(erp_sale_items.option_id,  erp_product_variants.name, erp_units.name) as unit, IF(erp_sale_items.option_id,  (erp_sale_items.unit_cost * erp_product_variants.qty_unit) * erp_sale_items.quantity, erp_sale_items.unit_cost * erp_sale_items.quantity) as cost, erp_sale_items.subtotal as price, (erp_sale_items.subtotal - IF(erp_sale_items.option_id,  (erp_sale_items.unit_cost * erp_product_variants.qty_unit) * erp_sale_items.quantity, erp_sale_items.unit_cost * erp_sale_items.quantity)) as profit')
                ->from('sales')
                ->join("sale_items", 'sales.id = sale_items.sale_id', 'left')
                ->join("products", 'sale_items.product_id = products.id', 'left')
                ->join("units", 'products.unit = units.id', 'left')
                ->join("product_variants", 'sale_items.option_id = product_variants.id', 'left');

        } else {
            $this->datatables
                ->select('sale_items.id as sid, sales.date, sales.reference_no, sale_items.product_code, sale_items.product_name, sale_items.quantity, IF(erp_sale_items.option_id,  erp_product_variants.name, erp_units.name) as unit, IF(erp_sale_items.option_id,  (erp_sale_items.unit_cost * erp_product_variants.qty_unit) * erp_sale_items.quantity, erp_sale_items.unit_cost * erp_sale_items.quantity) as cost, erp_sale_items.subtotal as price, (erp_sale_items.subtotal - IF(erp_sale_items.option_id,  (erp_sale_items.unit_cost * erp_product_variants.qty_unit) * erp_sale_items.quantity, erp_sale_items.unit_cost * erp_sale_items.quantity)) as profit')
                ->from('sales')
                ->join("sale_items", 'sales.id = sale_items.sale_id', 'left')
                ->join("products", 'sale_items.product_id = products.id', 'left')
                ->join("units", 'products.unit = units.id', 'left')
                ->join("product_variants", 'sale_items.option_id = product_variants.id', 'left');
        }

        if ($reference_no) {
            $this->datatables->where('sales.reference_no', $reference_no);
        }

        if ($product_id) {
            $this->datatables->where('sale_items.product_id', $product_id);
        }

        if ($start_date) {
            $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . ' 00:00:00" and "' . $end_date . '23:59:00"');
        }

        echo $this->datatables->generate();
    }

    function product_grossmargin_action()
    {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            $sdate = $this->input->post('sdate');
            $edate = $this->input->post('edate');
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('product_grossmargin_report'));

                    $this->excel->getActiveSheet()->SetCellValue('A1', $sdate?'Product Grossmargin Report (From: '.$sdate .' To: '.$edate.')': 'Product Grossmargin Report');
                    $this->excel->getActiveSheet()->mergeCells('A1:I1');
                    $this->excel->getActiveSheet()->getRowDimension(1)->setRowHeight(30);
                    $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A1')->getFont()
                        ->setName('Times New Roman')
                        ->setSize(16)
                        ->setBold(true);

                    $head = array(
                        'font' => array(
                            'color' => array('rgb' => 'FFFFFF'),
                            'bold' => true,
                            'size' => 11,
                            'name' => 'Times New Roman'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428bca')
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A2:I2')->applyFromArray($head);
                    $this->excel->getActiveSheet()->SetCellValue('A2', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B2', lang('invoice_reference'));
                    $this->excel->getActiveSheet()->SetCellValue('C2', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('D2', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('E2', lang('qty'));
                    $this->excel->getActiveSheet()->SetCellValue('F2', lang('unit'));
                    $this->excel->getActiveSheet()->SetCellValue('G2', lang('cost_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('H2', lang('price_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('I2', lang('profit'));

                    $this->excel->getActiveSheet()->getRowDimension(2)->setRowHeight(25);
                    $this->excel->getActiveSheet()->getColumnDimension('A2')->setWidth(50);
                    $this->excel->getActiveSheet()->getStyle('A2:I2')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A2:I2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                    $row = 3;
                    $tQty = 0;
                    $tCost = 0;
                    $tPrice = 0;
                    $tProfit = 0;
                    foreach ($_POST['val'] as $id) {
                        $data = $this->reports_model->getProductGrossmarginReport($id);
                        $tQty += $this->erp->formatMoney($data->quantity);
                        $tCost += $this->erp->formatMoney($data->cost);
                        $tPrice += $this->erp->formatMoney($data->price);
                        $tProfit += $this->erp->formatMoney($data->profit);

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->erp->hrld($data->date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data->reference_no .' ');
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data->product_code);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data->product_name);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->erp->formatMoney($data->quantity));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data->unit);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->erp->formatMoney($data->cost));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->erp->formatMoney($data->price));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->erp->formatMoney($data->profit));

                        $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);
                        $this->excel->getActiveSheet()->getStyle('A' .$row .':I' .$row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $this->excel->getActiveSheet()->getStyle('E' .$row . ':F' .$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                    }
                    $this->excel->getActiveSheet()->SetCellValue('E' .$row, $tQty);
                    $this->excel->getActiveSheet()->SetCellValue('G' .$row, $tCost);
                    $this->excel->getActiveSheet()->SetCellValue('H' .$row, $tPrice);
                    $this->excel->getActiveSheet()->SetCellValue('I' .$row, $tProfit);

                    // Footer Styles
                    $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);
                    $this->excel->getActiveSheet()->getStyle('G' .$row .':I' .$row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('E' .$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('E'. $row .':I'. $row)->getFont()
                        ->setName('Times New Roman')
                        ->setSize(14)
                        ->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('E' .$row .':I' .$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border:: BORDER_MEDIUM);
                    //-------------------

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

                    $filename = 'product_grossmargin_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        // How to remove empty column in phpexcel #Chanthy
                        $this->excel->getActiveSheet()->removeColumn('J-Z');
                        //--------------------------------------------------
                        $this->excel->getActiveSheet()->mergeCells('A' .$row .':D' .$row);

                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }

                    if ($this->input->post('form_action') == 'export_excel') {

                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                        $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                        //Margins:
                        $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.25);
                        $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            }else {
                $this->session->set_flashdata('error', lang("no_product_grossmargin_report_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        }
    }

    function inventoryInoutReport($pdf, $excel, $product, $category, $warehouse, $from_date, $to_date)
    {
		$wid =$this->reports_model->getWareByUserID();
        if ($pdf || $excel) {
            if($product == 0){
                $product = null;
            }
            if($category == 0){
                $category = null;
            }
            if($warehouse == 0){
                $warehouse = null;
				$warehousew = $wid;
            }else{
				$warehousew = $warehouse;
			}
            //Get the amount of transuction In of Inventory
            $num = $this->reports_model->getTransuctionsPurIN($product, $category, $warehousew, $from_date, $to_date);
            $k = 0;
            if(is_array($num)){
                foreach($num as $r){
                    // $this->erp->print_arrays($r);
                    if($r->tran_type){
                        $k++;
                    }
                }
            }
            //$this->erp->print_arrays($k);
            //Get the amount of transuction Out of Inventory
            $num2 = $this->reports_model->getTransuctionsPurOUT($product, $category, $warehousew, $from_date, $to_date);
            $k2 = 0;
            if(is_array($num2)){
                foreach($num2 as $r2){
                    if($r2->tran_type){
                        $k2++;
                    }
                }
            }
            $alphabet0 = array('C','D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            $alphabet = array('A','B','C','D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            $alphabet1 = array('A1','B1','C1','D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1');
            $alphabet2 = array('C2', 'D2', 'E2', 'F2', 'G2', 'H2', 'I2', 'J2', 'K2', 'L2', 'M2', 'N2', 'O2', 'P2', 'Q2', 'R2', 'S2', 'T2', 'U2', 'V2', 'W2', 'X2', 'Y2', 'Z2');
            $alphabet3 = array('A2','B2','C2', 'D2', 'E2', 'F2', 'G2', 'H2', 'I2', 'J2', 'K2', 'L2', 'M2', 'N2', 'O2', 'P2', 'Q2', 'R2', 'S2', 'T2', 'U2', 'V2', 'W2', 'X2', 'Y2', 'Z2');
            //**Header
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('inventory_inout');
            $this->excel->getActiveSheet()->SetCellValue('A1', 'Location / Category / Item');
            $this->excel->getActiveSheet()->SetCellValue('B1', lang("begin"));
            //**In part
            if($k){
                $this->excel->getActiveSheet()->SetCellValue('C1', lang("in"));
                //$this->excel->getActiveSheet()->mergeCells('C1'.':'.$alphabet[$K]);
            }
            $ttype1 = 0;
            //Get In tanstion type
            if ($num) {
                foreach ($num as $tr) {
                    if ($tr->tran_type) {
                        $this->excel->getActiveSheet()->SetCellValue($alphabet2[$ttype1], strtolower($tr->tran_type));
                    }
                    $ttype1++;

                }
            }
            //$this->erp->print_arrays($tr->tran_type);
            $tin = $ttype1 + 2;
            $out = $tin+1;
            //set style in transaction_type 1
            $this->excel->getActiveSheet()->mergeCells('C1'.':'.$alphabet1[$ttype1+1]);
            $this->excel->getActiveSheet()->getStyle('C2'. ':'.$alphabet1[$ttype1])->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);

            //Total in
            $this->excel->getActiveSheet()->setCellValue($alphabet1[$tin],lang("total_in"));
            $this->excel->getActiveSheet()->mergeCells($alphabet1[$tin].':'.$alphabet3[$tin]);
            //**Out part
            if($k2){
                $this->excel->getActiveSheet()->SetCellValue($alphabet1[$out], lang("out"));
            }

            if(is_array($num2)){
                //Get Out transaction type
                foreach($num2 as $tr2){
                    if($tr2->tran_type){
                        $this->excel->getActiveSheet()->SetCellValue($alphabet2[$tin-1], strtolower($tr2->tran_type));
                    }
                    $tin++;
                    $totalout = $tin+1;
                    $b = $totalout+1;
                }
            }
            $row      =null;
            //set style transaction type 2
            $this->excel->getActiveSheet()->mergeCells($alphabet1[$out].':'.$alphabet1[$tin]);
            $this->excel->getActiveSheet()->getStyle('C2'. ':'.$alphabet3[$totalout])->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            // //Total out
            $this->excel->getActiveSheet()->setCellValue($alphabet1[$totalout],lang("total_out"));
            $this->excel->getActiveSheet()->mergeCells($alphabet1[$totalout].':'.$alphabet3[$totalout]);

            //Set center for all column in header excel
            $this->excel->getActiveSheet()->getStyle('A1'.':'.$alphabet1[$b])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A2'.':'.$alphabet3[$b])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            //Set style bold for all column in hearder excel
            $this->excel->getActiveSheet()->getStyle('A1'. $row.':'.$alphabet1[$b].$row)->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle('A2'. $row.':'.$alphabet3[$b].$row)->getFont()->setBold(true);
            //merge cell for A1->A2 and B1-B2 and set style center
            $this->excel->getActiveSheet()->mergeCells('A1'.':A2');
            $this->excel->getActiveSheet()->mergeCells('B1'.':B2');
            //Balance part
            $this->excel->getActiveSheet()->setCellValue($alphabet1[$b],lang("balance"));
            $this->excel->getActiveSheet()->mergeCells($alphabet1[$b].':'.$alphabet3[$b]);
            //End header**

            $row = 3;
            //Get warehouse
            $ware = $this->reports_model->getWarePur($wid,$warehouse, $product, $category);
            if(is_array($ware)){
                foreach($ware as $rw){
                    // $this->erp->print_arrays($rw);
                    $this->excel->getActiveSheet()->setCellValue('A'.$row,$rw->name." /");
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setSize(13);
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':'.$alphabet[$b].$row);
                    $row++;
                    //End warehouse part
                    $total2_inn = 0;
                    $total2_outt = 0;
                    $total_balance = 0;
                    $total_begin_balance = 0;
                    //Get product category
                    $procat = $this->reports_model->getProCat($rw->id,$category,$product);
                    $total_in_cate_w = array();
                    $total_out_cate_w = array();
                    foreach($procat as $rc){
                        //$this->erp->print_arrays($rc);
                        $this->excel->getActiveSheet()->setCellValue('A'.$row,"    ".$rc->name." /");
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->mergeCells('A'.$row.':'.$alphabet[$b].$row);
                        $row++;
                        //End product_category
                        $balance = 0;
                        $total_inn = 0;
                        $total_outt = 0;
                        $am = 0;
                        $begin_balance = 0;
                        $btotal_qty = 0;
                        $total_in_cate = array();
                        $total_out_cate = array();
                        //Get product
                        $propur = $this->reports_model->getProPur($rw->id,$rc->id,$product?$product:null,null,$from_date,$to_date);
                        //$this->erp->print_arrays($propur);
                        foreach($propur as $rp){
                            // $this->erp->print_arrays($rp);
                            $beginINqty = $this->reports_model->getBeginQtyINALL($rp->product_id,$rw->id,$from_date,$to_date);
                            $beginOUTqty = $this->reports_model->getBeginQtyOUTALL($rp->product_id,$rw->id,$from_date,$to_date);
                            $btotal_qty = $beginINqty->bqty-$beginOUTqty->bqty;
                            $begin_qty = $this->reports_model->getBeginQtyALL($rp->product_id,$rw->id,$from_date,$to_date);
                            //Show product name
                            $this->excel->getActiveSheet()->setCellValue('A'.$row, $rp->name?"         ".$rp->name:"         ".$rp->product_id);
                            //Show begin Total
                            $this->excel->getActiveSheet()->setCellValue('B'.$row, $btotal_qty?$this->erp->formatDecimal($btotal_qty):''." ");
                            $this->excel->getActiveSheet()->getStyle('B'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            //End begin Total

                            $total_in = 0;
                            $total_out = 0;
                            $i = 0;
                            if(is_array($num)){
                                foreach($num as $tr){
                                    if($tr->tran_type){
                                        $allqty = $this->reports_model->getQtyINALL($rp->product_id,$rw->id,$tr->tran_type,$from_date,$to_date);
                                        $qty_unit = $this->reports_model->getQtyUnitINALL($rp->product_id,$rw->id,$tr->tran_type,$from_date,$to_date);
                                        // $this->excel->getActiveSheet()->setCellValue($alphabet0[$i].$row,$this->erp->formatDecimal($allqty->bqty));
                                        // echo $allqty->bqty;exit();
                                        $a = "";
                                        
                                        if($allqty->bqty){
                                            //show the all quantity of each transaction In
                                            $this->excel->getActiveSheet()->setCellValue($alphabet0[$i].$row,$this->erp->formatDecimal($allqty->bqty));                                                      
                                        }
                                            
                                        $total_in +=$allqty->bqty;
                                        $total_in_cate[$tr->tran_type] +=$allqty->bqty;
                                    }

                                    $i++;
                                }
                                
                            }
                            //Show total in

                            $new=$tin-$k2;
                           // $this->erp->print_arrays($tin,$k2);
                            $this->excel->getActiveSheet()->setCellValue($alphabet[$new].$row,$this->erp->formatDecimal($total_in?$total_in:''));
                            $this->excel->getActiveSheet()->getStyle($alphabet[$new].$row)->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle($alphabet[$new].$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $j          = $i+1;
                            $from_date2 =  NULL;
                            $to_date2   =  NULL;
                            if(is_array($num2)){
                                foreach($num2 as $tr2){
                                    if($tr2->tran_type){
                                        $allqty2 = $this->reports_model->getQtyOUTALL($rp->product_id,$rw->id,$tr2->tran_type,$from_date,$to_date);
                                        $qty_unit2 = $this->reports_model->getQtyUnitOUTALL($rp->product_id,$rw->id,$tr->tran_type,$from_date,$to_date);
                                        $a = "";
                                        if($allqty2->bqty){
                            
                                            //show the all quantity of each transaction Out
                                            $this->excel->getActiveSheet()->setCellValue($alphabet0[$j].$row,$this->erp->formatDecimal($allqty2->bqty));
                                        }

                                        $total_out+=$allqty2->bqty;
                                        $total_out_cate[$tr2->tran_type] +=$allqty2->bqty;
                                    }
                                    $qty_unit3 = $this->reports_model->getQtyUnitALL($rp->product_id,$rw->id,$from_date2,$to_date2);
                                    $j++;
                                    // $tout = $j+1;
                                }

                            }
                            //Show total out
                            $this->excel->getActiveSheet()->setCellValue($alphabet[$totalout].$row,$this->erp->formatDecimal($total_out));
                            $this->excel->getActiveSheet()->getStyle($alphabet[$totalout].$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $this->excel->getActiveSheet()->getStyle($alphabet[$totalout].$row)->getFont()->setBold(true);
                            //Show Balance
                            $this->excel->getActiveSheet()->setCellValue($alphabet[$b].$row,$this->erp->formatDecimal($total_in-$total_out));
                            $this->excel->getActiveSheet()->getStyle($alphabet[$b].$row)->getFont()->setBold(true);
                            //End balance
                            
                            $balance+=($total_in-$total_out);
                            $begin_balance+=$btotal_qty;
                            $total_inn +=$total_in;
                            $total_outt +=$total_out;
                            $row++;
                        }
                        //$this->erp->print_arrays($row);
                        $styleArray = array(
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'F0F8FF')
                            )
                        );
                        $this->excel->getActiveSheet()->getStyle('A'.$row.':'.$alphabet[$b].''.$row)->applyFromArray($styleArray)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        //Show total each category
                        $this->excel->getActiveSheet()->setCellValue('A'.$row,"Total>>".$rc->name);
                        $this->excel->getActiveSheet()->getStyle('A'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->setCellValue('B'.$row, $this->erp->formatDecimal($begin_balance)." ");
                        $i = 0;
                        if(is_array($num)){
                            foreach($num as $tr){
                                if($tr->tran_type){
                                    // $amount_qty = $this->reports_model->getAmountQtyINALL($product2,$rw->id,$tr->transaction_type,$rc->id,$from_date,$to_date);
                                    $this->excel->getActiveSheet()->setCellValue($alphabet0[$i].$row,$this->erp->formatDecimal($total_in_cate[$tr->tran_type])." ");
                                    $this->excel->getActiveSheet()->getStyle($alphabet0[$i].$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                                    $total_in_cate_w[$tr->tran_type] += $total_in_cate[$tr->tran_type];
                                }
                                $i++;
                            }
                        }
                        $this->excel->getActiveSheet()->setCellValue($alphabet[$new].$row,$this->erp->formatDecimal($total_inn));
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet0[$b].$row)->getFont()->setBold(true);

                        $j = $i+1;
                        foreach($num2 as $tr2){
                            if($tr2->tran_type){
                                // $amount_qty2 = $this->reports_model->getAmountQtyOUTALL($product2,$rw->id,$tr2->transaction_type,$rc->id,$from_date,$to_date);
                                $this->excel->getActiveSheet()->setCellValue($alphabet0[$j].$row,$this->erp->formatDecimal($total_out_cate[$tr2->tran_type]));
                                $total_out_cate_w[$tr2->tran_type] += $total_out_cate[$tr2->tran_type];
                            }
                            $j++;
                        }
                        //Show total out
                        $this->excel->getActiveSheet()->setCellValue($alphabet[$totalout].$row,$this->erp->formatDecimal($total_outt));
                        $this->excel->getActiveSheet()->setCellValue($alphabet[$b].$row,$this->erp->formatDecimal($balance));
                        $total_balance+=$balance;
                        $total_begin_balance+=$begin_balance;
                        $total2_inn +=$total_inn;
                        $total2_outt +=$total_outt;
                        $row++;
                    }
                    $styleArray = array(
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => 'E6E6FA')
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':'.$alphabet[$b].''.$row)->applyFromArray($styleArray)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                    $this->excel->getActiveSheet()->setCellValue('A'.$row, "Grand Total >>".$rw->name);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setBold(true);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setSize(12);
                    $this->excel->getActiveSheet()->getStyle('A'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                    $this->excel->getActiveSheet()->setCellValue('B'.$row, $total_begin_balance?$this->erp->formatDecimal($total_begin_balance):''." ");
                     $this->excel->getActiveSheet()->getStyle('C'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                    $i = 0;
                    if(is_array($num)){
                        foreach($num as $tr){
                            if($tr->tran_type){
                               //Show grand total of each transaction in  and each warehouse
                                $this->excel->getActiveSheet()->setCellValue($alphabet0[$i].$row,$this->erp->formatDecimal($total_in_cate_w[$tr->tran_type]));
                            }
                            $i++;
                        }
                    }
                    //Show grand Total of total in

                    $this->excel->getActiveSheet()->setCellValue($alphabet[$new].$row,$this->erp->formatDecimal($total2_inn));
                    $j = $i+1;
                    if(is_array($num2)){
                        foreach($num2 as $tr2){
                            if($tr2->tran_type){
                                
                                //Show grand total of each transaction out and each warehouse
                                $this->excel->getActiveSheet()->setCellValue($alphabet0[$j].$row,$this->erp->formatDecimal($total_out_cate_w[$tr2->tran_type]));
                            }
                            $j++;
    
                        }
                    }
                    //Show grand Total of total out
                    $this->excel->getActiveSheet()->setCellValue($alphabet[$totalout].$row,$this->erp->formatDecimal($total2_outt));
                    $this->excel->getActiveSheet()->setCellValue($alphabet[$b].$row,$total_balance);
                    $row++;
                }
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => 'FFFFFF'),
                        'size'  => 10,
                        'name'  => 'Verdana'
                    ),
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => '4169E1')
                    )
                );
                $this->excel->getActiveSheet()->getStyle('A1:'.$alphabet[$b].'1')->applyFromArray($styleArray)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('A2:'.$alphabet[$b].'2')->applyFromArray($styleArray)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);;

            }

            //set colspan
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);

            $filename = lang('inventory_inout '). date('Y_m_d_H_i_s');
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            if ($pdf) {
                $styleArray = array(
                    'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                );
                $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($excel) {
                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

    
                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
        }
    }
    function inventoryInoutReport2($pdf, $excel, $product, $category, $warehouse, $from_date, $to_date)
    {
        $wid =$this->reports_model->getWareByUserID();
        if ($pdf || $excel) {
            if($product == 0){
                $product = null;
            }
            if($category == 0){
                $category = null;
            }
            if($warehouse == 0){
                $warehouse = null;
                $warehousew = $wid;
            }else{
                $warehousew = $warehouse;
            }
            //Get the amount of transuction In of Inventory
            $num = $this->reports_model->getTransuctionsPurIN($product, $warehousew, $from_date, $to_date);
            $k = 0;
            if(is_array($num)){
                foreach($num as $r){
                    // $this->erp->print_arrays($r);
                    if($r->tran_type){
                        $k++;
                    }
                }
            }
            //$this->erp->print_arrays($k);
            //Get the amount of transuction Out of Inventory
            $num2 = $this->reports_model->getTransuctionsPurOUT($product, $warehousew, $from_date, $to_date);
            $k2 = 0;
            if(is_array($num2)){
                foreach($num2 as $r2){
                    if($r2->tran_type){
                        $k2++;
                    }
                }
            }

            $alphabet0 = array('C','D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            $alphabet = array('A','B','C','D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            $alphabet1 = array('A1','B1','C1','D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1');
            $alphabet2 = array('C2', 'D2', 'E2', 'F2', 'G2', 'H2', 'I2', 'J2', 'K2', 'L2', 'M2', 'N2', 'O2', 'P2', 'Q2', 'R2', 'S2', 'T2', 'U2', 'V2', 'W2', 'X2', 'Y2', 'Z2');
            $alphabet3 = array('A2','B2','C2', 'D2', 'E2', 'F2', 'G2', 'H2', 'I2', 'J2', 'K2', 'L2', 'M2', 'N2', 'O2', 'P2', 'Q2', 'R2', 'S2', 'T2', 'U2', 'V2', 'W2', 'X2', 'Y2', 'Z2');
            //**Header
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle('inventory_inout');
            if($num || $num2){
                $this->excel->getActiveSheet()->SetCellValue('A1', 'Location >> Category >> Item');
                $this->excel->getActiveSheet()->SetCellValue('B1', lang("begin"));
            }else{
                $this->excel->getActiveSheet()->SetCellValue('A1', 'No data found');
            }
           
            //**In part
            if($k){
                $this->excel->getActiveSheet()->SetCellValue('C1', lang("in"));
            }
            $ttype1 = 0;
            //Get In tanstion type
            if ($num) {
                foreach ($num as $tr) {
                    if ($tr->tran_type) {
                        $this->excel->getActiveSheet()->SetCellValue($alphabet2[$ttype1], strtolower($tr->tran_type));
                    }
                    $ttype1++;

                }
            }

            //$this->erp->print_arrays($tr->tran_type);
            $tin = $ttype1 + 2;
            $out = $tin+1;
            if(is_array($num2) && $num){
                //set style in transaction_type 1
                $this->excel->getActiveSheet()->mergeCells('C1'.':'.$alphabet1[$ttype1+1]);
            }
            if($num || $num2){
                 //Total in
                $this->excel->getActiveSheet()->setCellValue($alphabet1[$tin],lang("total_in"));
                $this->excel->getActiveSheet()->mergeCells($alphabet1[$tin].':'.$alphabet3[$tin]);
            }
               
            
            //**Out part
            if($k2){
                $this->excel->getActiveSheet()->SetCellValue($alphabet1[$out], lang("out"));
            }

            if(is_array($num2)){
                //Get Out transaction type
                foreach($num2 as $tr2){
                    if($tr2->tran_type){
                        $this->excel->getActiveSheet()->SetCellValue($alphabet2[$tin-1], strtolower($tr2->tran_type));
                    }
                    $tin++;
                    $totalout = $tin+1;
                    $b = $totalout+1;
                }
            }
             if(!$b){
                    $b=4;
               }
               if(!$tin){
                    $tin=3;
               }
               if(!$totalout){
                $totalout=2;
               }
               if(!$out){
                $out=1;
               }

            $row      =null;
            if(is_array($num2)){
                //set style transaction type 2
                $this->excel->getActiveSheet()->mergeCells($alphabet1[$out].':'.$alphabet1[$tin]);

                $border_style = array('borders' => array('top' => array('style' =>
                    PHPExcel_Style_Border::BORDER_THIN, 'color' => array('rgb' => '357EBD'))));

                $this->excel->getActiveSheet()->getStyle('C2' . ':' . $alphabet3[$totalout])->applyFromArray($border_style);

                
                // //Total out
                $this->excel->getActiveSheet()->setCellValue($alphabet1[$totalout],lang("total_out"));
                $this->excel->getActiveSheet()->mergeCells($alphabet1[$totalout].':'.$alphabet3[$totalout]);

                //Set center for all column in header excel
                $this->excel->getActiveSheet()->getStyle('A1'.':'.$alphabet1[$b])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('A2'.':'.$alphabet3[$b])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                //Set style bold for all column in hearder excel
                $this->excel->getActiveSheet()->getStyle('A1'. $row.':'.$alphabet1[$b].$row)->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle('A2'. $row.':'.$alphabet3[$b].$row)->getFont()->setBold(true);

            }

            //merge cell for A1->A2 and B1-B2 and set style center
            $this->excel->getActiveSheet()->mergeCells('A1'.':A2');
            $this->excel->getActiveSheet()->mergeCells('B1'.':B2');
            if($num || $num2){
                //Balance part
                $this->excel->getActiveSheet()->setCellValue($alphabet1[$b],lang("balance"));
                $this->excel->getActiveSheet()->mergeCells($alphabet1[$b].':'.$alphabet3[$b]);
                //End header**
            }
            

            $row = 3;
            //Get warehouse
            $ware = $this->reports_model->getWarePur($wid,$warehouse, $product, $category);
            if($num || $num2){
                if(is_array($ware)){
                    foreach($ware as $rw){
                        // $this->erp->print_arrays($rw);
                        $this->excel->getActiveSheet()->setCellValue('A' . $row, 'Warehouse >> ' . $rw->name);
                        $this->excel->getActiveSheet()->mergeCells('A' . $row . ':' . $alphabet[$b] . $row);

                        // Styles for Warehouse
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setSize(13);
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':' . $alphabet[$b] . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $styleArrays = array(
                            'font' => array(
                                'bold' => true,
                                'color' => array('rgb' => '009900'),
                                'size' => 11,
                                'name' => 'Verdana'
                            ),
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => 'f9f9f9')
                            )
                        );
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':' . $alphabet[$b] . $row)->applyFromArray($styleArrays);

                        $row++;
                        //End warehouse part
                        $total2_inn = 0;
                        $total2_outt = 0;
                        $total_balance = 0;
                        $total_begin_balance = 0;
                        //Get product category
                        $procat = $this->reports_model->getProCat($rw->id,$category,$product);
                        $total_in_cate_w = array();
                        $total_out_cate_w = array();
                        foreach($procat as $rc){
                            //$this->erp->print_arrays($rc);
                            $this->excel->getActiveSheet()->setCellValue('A' . $row, '     Category >> ' . $rc->name);
                            $this->excel->getActiveSheet()->mergeCells('A' . $row . ':' . $alphabet[$b] . $row);

                            // Styles for categories
                            $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setBold(true);
                            $this->excel->getActiveSheet()->getStyle('A' . $row . ':' . $alphabet[$b] . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                            $styleArrays = array(
                                'font' => array(
                                    'bold' => true,
                                    'color' => array('rgb' => 'ff9900'),
                                    'size' => 11,
                                    'name' => 'Verdana'
                                )
                            );
                            $this->excel->getActiveSheet()->getStyle('A' . $row . ':' . $alphabet[$b] . $row)->applyFromArray($styleArrays);
                            $this->excel->getActiveSheet()->getRowDimension(2)->setRowHeight(28);

                            $row++;
                            //End product_category
                            $balance = 0;
                            $total_inn = 0;
                            $total_outt = 0;
                            $am = 0;
                            $begin_balance = 0;
                            $btotal_qty = 0;
                            $total_in_cate = array();
                            $total_out_cate = array();
                            //Get product
                            $propur = $this->reports_model->getProPur($rw->id,$rc->id,$product?$product:null,null,$from_date,$to_date);
                            foreach($propur as $rp){
                                // $this->erp->print_arrays($rp);
                                $beginINqty = $this->reports_model->getBeginQtyINALL($rp->product_id,$rw->id,$from_date,$to_date);
                                $beginOUTqty = $this->reports_model->getBeginQtyOUTALL($rp->product_id,$rw->id,$from_date,$to_date);
                                $btotal_qty = $beginINqty->bqty-$beginOUTqty->bqty;
                                $begin_qty = $this->reports_model->getBeginQtyALL($rp->product_id,$rw->id,$from_date,$to_date);
                                //Show product name
                                $this->excel->getActiveSheet()->setCellValue('A' . $row, $rp->name ? "                      " . $rp->name : "         " . $rp->product_id);
                                //Show begin Total
                                $this->excel->getActiveSheet()->setCellValue('B' . $row, $this->erp->formatDecimal($btotal_qty ? $btotal_qty : ''));
                                $this->excel->getActiveSheet()->getStyle('B'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                                //End begin Total
                                $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(25);

                                $total_in = 0;
                                $total_out = 0;
                                $i = 0;
                                if(is_array($num)){
                                    foreach($num as $tr){
                                        if($tr->tran_type){
                                            $allqty = $this->reports_model->getQtyINALL($rp->product_id,$rw->id,$tr->tran_type,$from_date,$to_date);
                                            $qty_unit = $this->reports_model->getQtyUnitINALL($rp->product_id,$rw->id,$tr->tran_type,$from_date,$to_date);
                                            // $this->excel->getActiveSheet()->setCellValue($alphabet0[$i].$row,$this->erp->formatDecimal($allqty->bqty));
                                            // echo $allqty->bqty;exit();
                                            $a = "";

                                            if(1){
                                                //show the all quantity of each transaction In
                                                $this->excel->getActiveSheet()->setCellValue($alphabet0[$i] . $row, $this->erp->formatDecimal($allqty->bqty ? $allqty->bqty : ''));
                                            }

                                            $total_in +=$allqty->bqty;
                                            $total_in_cate[$tr->tran_type] +=$allqty->bqty;
                                        }


                                        $i++;
                                    }

                                }
                                //Show total in

                                $new=$tin-$k2;
                                //$this->erp->print_arrays($tin,$k2);
                                $this->excel->getActiveSheet()->setCellValue($alphabet[$new] . $row, $this->erp->formatDecimal($total_in ? $total_in : ''));
                                $this->excel->getActiveSheet()->getStyle($alphabet[$new].$row)->getFont()->setBold(true);
                                $this->excel->getActiveSheet()->getStyle($alphabet[$new].$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                                $this->excel->getActiveSheet()->getStyle($alphabet[$new] . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                                $j          = $i+1;
                                $from_date2 =  NULL;
                                $to_date2   =  NULL;
                                if(is_array($num2)){
                                    foreach($num2 as $tr2){
                                        if($tr2->tran_type){
                                            $allqty2 = $this->reports_model->getQtyOUTALL($rp->product_id,$rw->id,$tr2->tran_type,$from_date,$to_date);
                                            $qty_unit2 = $this->reports_model->getQtyUnitOUTALL($rp->product_id,$rw->id,$tr->tran_type,$from_date,$to_date);
                                            $a = "";
                                            if(1){

                                                //show the all quantity of each transaction Out
                                                $this->excel->getActiveSheet()->setCellValue($alphabet0[$j] . $row, $this->erp->formatDecimal($allqty2->bqty ? $allqty2->bqty : ''));
                                            }

                                            $total_out+=$allqty2->bqty;
                                            $total_out_cate[$tr2->tran_type] +=$allqty2->bqty;
                                        }
                                        $qty_unit3 = $this->reports_model->getQtyUnitALL($rp->product_id,$rw->id,$from_date2,$to_date2);
                                        $j++;
                                        // $tout = $j+1;
                                    }

                                }
                                //Show total out
                                $this->excel->getActiveSheet()->setCellValue($alphabet[$totalout] . $row, $this->erp->formatDecimal($total_out ? $total_out : ''));
                                $this->excel->getActiveSheet()->getStyle($alphabet[$totalout].$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                                $this->excel->getActiveSheet()->getStyle($alphabet[$totalout] . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                                $this->excel->getActiveSheet()->getStyle($alphabet[$totalout].$row)->getFont()->setBold(true);
                                //Show Balance
                                $this->excel->getActiveSheet()->setCellValue($alphabet[$b].$row,$this->erp->formatDecimal($total_in-$total_out));
                                $this->excel->getActiveSheet()->getStyle($alphabet[$b].$row)->getFont()->setBold(true);
                                $this->excel->getActiveSheet()->getStyle($alphabet[$b] . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                                //End balance

                                $balance+=($total_in-$total_out);
                                $begin_balance+=$btotal_qty;
                                $total_inn +=$total_in;
                                $total_outt +=$total_out;
                                $row++;
                            }
                            //$this->erp->print_arrays($row);
                            $styleArray = array(
                                'fill' => array(
                                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array('rgb' => 'F0F8FF')
                                )
                            );
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':'.$alphabet[$b].''.$row)->applyFromArray($styleArray)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                            $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(20);
                            $this->excel->getActiveSheet()->getStyle('B' . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                            //Show total each category
                            $this->excel->getActiveSheet()->setCellValue('A' . $row, "Total >> " . $rc->name);
                            $this->excel->getActiveSheet()->setCellValue('B' . $row, $this->erp->formatDecimal($begin_balance ? $begin_balance : ''));

                            $i = 0;
                            if(is_array($num)){
                                foreach($num as $tr){
                                    if($tr->tran_type){
                                        $this->excel->getActiveSheet()->setCellValue($alphabet0[$i] . $row, $this->erp->formatDecimal($total_in_cate[$tr->tran_type] ? $total_in_cate[$tr->tran_type] : '') . " ");
                                        $total_in_cate_w[$tr->tran_type] += $total_in_cate[$tr->tran_type];
                                    }
                                    $i++;
                                }
                            }

                            $this->excel->getActiveSheet()->setCellValue($alphabet[$new] . $row, $this->erp->formatDecimal($total_inn ? $total_inn : ''));

                            $j = $i+1;
                            foreach($num2 as $tr2){
                                if($tr2->tran_type){
                                    $amount_qty2 = $this->reports_model->getAmountQtyOUTALL($product2, $rw->id, $tr2->transaction_type, $rc->id, $from_date, $to_date);
                                    $this->excel->getActiveSheet()->setCellValue($alphabet0[$j] . $row, $this->erp->formatDecimal($total_out_cate[$tr2->tran_type] ? $total_out_cate[$tr2->tran_type] : ''));
                                    $total_out_cate_w[$tr2->tran_type] += $total_out_cate[$tr2->tran_type];
                                }
                                $j++;
                            }
                            //Show total out
                            $this->excel->getActiveSheet()->setCellValue($alphabet[$totalout] . $row, $this->erp->formatDecimal($total_outt ? $total_outt : ''));

                            $this->excel->getActiveSheet()->setCellValue($alphabet[$b].$row,$this->erp->formatDecimal($balance));
                            $total_balance+=$balance;
                            $total_begin_balance+=$begin_balance;
                            $total2_inn +=$total_inn;
                            $total2_outt +=$total_outt;
                            $row++;
                        }

                        $this->excel->getActiveSheet()->setCellValue('A' . $row, "Grand Total >> " . $rw->name);
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setBold(true);
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getFont()->setSize(12);
                        $this->excel->getActiveSheet()->getStyle('A'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                        $this->excel->getActiveSheet()->getStyle('A'. $row.':'.$alphabet[$b].$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_NONE);
                        $this->excel->getActiveSheet()->setCellValue('B'.$row, $total_begin_balance?$this->erp->formatDecimal($total_begin_balance):''." ");
                        $this->excel->getActiveSheet()->getStyle('C'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                        // Styles for Grand Total
                        $styleArrays = array(
                            'font' => array(
                                'bold' => true,
                                'color' => array('rgb' => 'FFFFFF'),
                                'size' => 10,
                                'name' => 'Verdana'
                            ),
                            'fill' => array(
                                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                'color' => array('rgb' => '357EBD')
                            )
                        );
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':' . $alphabet[$b] . $row)->applyFromArray($styleArrays);
                        $this->excel->getActiveSheet()->getRowDimension($row)->setRowHeight(30);
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':' . $alphabet[$b] . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                        $i = 0;
                        if(is_array($num)){
                            foreach($num as $tr){
                                if($tr->tran_type){
                                    //Show grand total of each transaction in  and each warehouse
                                    $this->excel->getActiveSheet()->setCellValue($alphabet0[$i].$row,$this->erp->formatDecimal($total_in_cate_w[$tr->tran_type]));
                                }
                                $i++;
                            }
                        }
                        //Show grand Total of total in

                        $this->excel->getActiveSheet()->setCellValue($alphabet[$new] . $row, $this->erp->formatDecimal($total2_inn ? $total2_inn : ''));
                        $j = $i+1;
                        if(is_array($num2)){
                            foreach($num2 as $tr2){
                                if($tr2->tran_type){

                                    //Show grand total of each transaction out and each warehouse
                                    $this->excel->getActiveSheet()->setCellValue($alphabet0[$j].$row,$this->erp->formatDecimal($total_out_cate_w[$tr2->tran_type]));
                                }
                                $j++;

                            }
                        }
                        //Show grand Total of total out
                        $this->excel->getActiveSheet()->setCellValue($alphabet[$totalout].$row,$this->erp->formatDecimal($total2_outt));
                        $this->excel->getActiveSheet()->setCellValue($alphabet[$b].$row,$total_balance);
                        $row++;
                    }
                    $styleArray = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 10,
                            'name'  => 'Verdana'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428BCA')
                        )
                    );
                    $this->excel->getActiveSheet()->getStyle('A1:'.$alphabet[$b].'1')->applyFromArray($styleArray)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->excel->getActiveSheet()->getStyle('A2:'.$alphabet[$b].'2')->applyFromArray($styleArray)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);;

                }
            }

            $this->excel->getActiveSheet()->getRowDimension(3)->setRowHeight(25);
            $this->excel->getActiveSheet()->getRowDimension(4)->setRowHeight(20);
            //set colspan
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
            /*$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);*/

            $filename = lang('inventory_inout '). date('Y_m_d_H_i_s');
            $styleArray = array(
                  'borders' => array(
                      'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_NONE
                      )
                  )
              );
           $this->excel->getDefaultStyle()->applyFromArray($styleArray);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            if ($pdf) {
                
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                //Margins:
                $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.35);
                $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($excel) {

                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                $this->excel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToPage(true);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
                $this->excel->getActiveSheet()->getPageSetup()->setFitToHeight(1);

                //Margins:
                $this->excel->getActiveSheet()->getPageMargins()->setTop(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setRight(0.25);
                $this->excel->getActiveSheet()->getPageMargins()->setLeft(0.35);
                $this->excel->getActiveSheet()->getPageMargins()->setBottom(0.25);

                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');


                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
        }
    }
	function warehouse_products()
    {
		$this->load->library("pagination");
		$str = "";
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
			$str .="&product=".$product;
        }else{
			$product = null;
        }    
		if ($this->input->get('category')) {
            $category = $this->input->get('category');
			$str .="&category=".$category;
        }else{
			$category = null;
        } 
		
		if ($this->input->get('start_date')) {
            $start_date =$this->erp->fsd($this->input->get('start_date'));
			$str .="&start_date=".$start_date;
        }else{
			$start_date = NULL;
        } 
		if ($this->input->get('end_date')) {
            $end_date = $this->erp->fsd($this->input->get('end_date'));
			$str .="&end_date=".$end_date;
        }else{
			$end_date = NULL;
        } 
		if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
			$str .= "&biller=".$biller ;
        }else{
			$biller = null;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
			$str .= "&warehouse=".$warehouse ;
        }else{
            $warehouse = null;
        }
        $from_date      = NULL;
        $to_date        = NULL;
		$row_nums = $this->reports_model->getAllProductsDetailsNUM($product,$category);
		
		$config 							= array();
		$config['suffix'] 					= "?v=1".$str;
		$uri 								= ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["base_url"] 				= site_url("reports/warehouse_products/") ;
		$config["total_rows"] 				= $row_nums;
		$config["ob_set"] 					= $uri;
        $config["per_page"] 				= 20; 
		$config["uri_segment"] 				= 3;
		$config['full_tag_open'] 			= '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] 			= '</ul>';
		$config['next_tag_open'] 			= '<li class="next">';
		$config['next_tag_close'] 			= '</li>';
		$config['prev_tag_open'] 			= '<li class="prev">';
		$config['prev_tag_close'] 			= '</li>';
		$config['cur_tag_open'] 			= '<li class="active"><a>';
		$config['cur_tag_close'] 			= '</a></li>';
		$config['first_tag_open'] 			= '<li>';
		$config['first_tag_close'] 			= '</li>';
		$config['last_tag_open'] 			= '<li>';
		$config['last_tag_close'] 			= '</li>';
		$config['num_tag_open'] 			= '<li>';
		$config['num_tag_close'] 			= '</li>';
		$this->pagination->initialize($config);
		$this->data["pagination"] 			= $this->pagination->create_links();
        // $this->erp->print_arrays($start_date.' ########## '.$end_date);
		$this->data['products_details']   	= $this->reports_model->getAllProductsDetails($product,$category,$config['per_page'],$config["ob_set"], $start_date, $end_date);
		$wid 								= $this->reports_model->getWareByUserID();
        $this->data['warefull']             = $this->reports_model->getWareFullByUSER($wid);
        $this->data['category2']            = $category;
		$this->data['product2'] 	  		= $product;
		$this->data['biller2']    			= $biller;
        $this->data['warehouse2'] = $warehouse;
		$this->data['from_date2']    		= $from_date;
		$this->data['to_date2'] 	  		= $to_date;
		
		$this->data['categories'] 			= $this->site->getAllCategories();
		$this->data['products']     		= $this->reports_model->getAllProducts();
		if($product == null){
            $this->data['product1'] 		= 0;
        }else{
            $this->data['product1'] 		= $product;
        }
		if($biller == null){
            $this->data['biller1'] 			= 0;
        }else{
            $this->data['biller1'] 			= $biller;
        }
        if($category == null){
            $this->data['category1'] 		= 0;
        }else{
            $this->data['category1'] 		= $category;
        }
		if($start_date == null){
            $this->data['start_date1'] 		= 0;
        }else{
            $this->data['start_date1'] 		= $start_date;
        }
        if($end_date == null){
            $this->data['end_date1']         = 0;
        }else{
            $this->data['end_date1']         = $end_date;
        }
        if($wid == null){
            $this->data['wid1'] 		    = NULL;
        }else{
            $this->data['wid1'] 		     = $wid;
        }

		$this->data['billers']     			= $this->reports_model->getAllBillers();
        $this->data['warehouses']           = $this->site->getAllWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('warehouse_products'), 'bc' => $bc);
        $this->page_construct('reports/warehouse_products_report', $meta, $this->data);
    }
	
	function warehouseProductReport($pdf,$excel,$product,$category,$from_date,$to_date){
        if($excel || $pdf){
            if($product == 0){
                $product == null;
            }
            if($category == 0){
                $category == null;
            }
            if($from_date == 0){
                $from_date == null;
            }
            if($to_date == 0){
                $to_date == null;
            }

            $alphabet11 = array('D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1');
            $alphabet22 = array('D2', 'E2', 'F2', 'G2', 'H2', 'I2', 'J2', 'K2', 'L2', 'M2', 'N2', 'O2', 'P2', 'Q2', 'R2', 'S2', 'T2', 'U2', 'V2', 'W2', 'X2', 'Y2', 'Z2');
            $alphabet = array('D3', 'E3', 'F3', 'G3', 'H3', 'I3', 'J3', 'K3', 'L3', 'M3', 'N3', 'O3', 'P3', 'Q3', 'R3', 'S3', 'T3', 'U3', 'V3', 'W3', 'X3', 'Y3', 'Z3');

            $alphabet1 = array('D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            //Header part
            $wid = $this->reports_model->getWareByUserID();
            $warefull = $this->reports_model->getWareFullByUSER($wid);
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);

            $this->excel->getActiveSheet()->setTitle(lang('inventory'));
            $this->excel->getActiveSheet()->SetCellValue('A3', lang('image'));
            $this->excel->getActiveSheet()->SetCellValue('B3', lang('product_code'));
            $this->excel->getActiveSheet()->SetCellValue('C3', lang('product_name'));

            

            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'size'  => 16
                )
            );

            $styleArray2 = array(
                'font'  => array(
                    'bold'  => true,
                    'size'  => 12
                )
            );

            $a = 0;
            if(is_array($warefull)){
                foreach($warefull as $w){
                    $this->excel->getActiveSheet()->SetCellValue($alphabet[$a], $w->name);
                $a++;
                $j = $a;
                }
            }

            $this->excel->getActiveSheet()->mergeCells('A1:'.$alphabet11[$j]);
            $this->excel->getActiveSheet()->setCellValue('A1','Warehouse Products');

            $this->excel->getActiveSheet()->mergeCells('A2:'.$alphabet22[$j]);
            $this->excel->getActiveSheet()->setCellValue('A2','From: '. $this->erp->hrsd($from_date) .' To: '. $this->erp->hrsd($to_date));

            $this->excel->getActiveSheet()->SetCellValue($alphabet[$j], lang('total'));
            /*$this->excel->getActiveSheet()->getStyle('A2'.':'.$alphabet[$j])->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle('A2'.':'.$alphabet[$j])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);*/
            //End header
            //Content
            $this->excel->getActiveSheet()->getStyle('A1:'.$alphabet11[$j])->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('A2:'.$alphabet22[$j])->applyFromArray($styleArray2);
            $this->excel->getActiveSheet()->getStyle('A3:'.$alphabet[$j])->applyFromArray($styleArray2);
            $this->excel->getActiveSheet()->getStyle('A1:'.$alphabet11[$j])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A3:'.$alphabet[$j])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A2:'.$alphabet22[$j])->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border:: BORDER_THIN);
            $row = 4;

            $total_q = 0;
            $str = "";
            $tt_qty=0;
            $products_details = $this->reports_model->getAllProductsDetail1($product,$category, $from_date, $to_date);

            foreach($products_details as $pro)
            {
                $this->excel->getActiveSheet()->SetCellValue('A' . $row, $pro->image);
                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $pro->code . " ");
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pro->name);
                $i = 0;
                $tt = 0;
                if(is_array($warefull)){
                    foreach($warefull as $w){
                        $qty = $this->reports_model->getQtyByWare($pro->id,$w->id,$product,$category,$from_date,$to_date);
                        if(isset($qty->wqty)){
                            $this->excel->getActiveSheet()->SetCellValue($alphabet1[$i].$row, $this->erp->formatDecimal($qty->wqty));
                            $tt+=$qty->wqty;
                        }else{
                            $a = 0;
                            $this->excel->getActiveSheet()->SetCellValue($alphabet1[$i].$row, $a);
                            $tt+=0;
                        }
                        $i++;
                        $j = $i;
                    }
                }

                $this->excel->getActiveSheet()->SetCellValue($alphabet1[$j].$row, $this->erp->formatDecimal($tt));
                $tt_qty +=$tt;

                $row++;
            }

            $this->excel->getActiveSheet()->SetCellValue('A'.$row, lang("total"));
            $this->excel->getActiveSheet()->getStyle('A'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
            $i = 0;
            if(is_array($warefull)){
                foreach($warefull as $w){
                     $this->excel->getActiveSheet()->SetCellValue($alphabet1[$i].$row, " ");
                    $i++;
                }
            }

            $this->excel->getActiveSheet()->SetCellValue($alphabet1[$j].$row, $this->erp->formatDecimal($tt_qty));

            $this->excel->getActiveSheet()->getStyle('A'.$row.':'.$alphabet1[$j].$row)->getFont()->setBold(true);
            $this->excel->getActiveSheet()->mergeCells('A' . $row . ':C' . $row);
            $this->excel->getActiveSheet()->getStyle($alphabet1['0'].$row.':'.$alphabet1[$j].$row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            //set colspan
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);

            $this->excel->getActiveSheet()->getStyle('A2'.':'.$alphabet[$j].$this->excel->getActiveSheet()->getHighestRow())
                ->getAlignment()->setWrapText(true);

            $filename = lang('warehouse_products'). date('Y_m_d_H_i_s');
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            if ($pdf) {
                $styleArray = array(
                    'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                );
                $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($excel) {
                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');
                
    
                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
        }
    }
	
	function product_dailyinout()
    {
		$this->load->library("pagination");
		
		$suffix_uri = "";
		$month = "";
		$year = "";
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
			$suffix_uri .= "&product=".$product ;	
        }else{
			 $product = 0;
        } 
        if ($this->input->get('month')) {
            $month =  $this->input->get('month');
				$suffix_uri .= "&month=".$month ;
        }else{
				$month = date('m');
        }
        if ($this->input->get('year')) {
            $year = $this->input->get('year');
			$suffix_uri .= "&year=".$year ;
        }else{
				$year = date('Y');
        }
		$wid = $this->reports_model->getWareByUserID();
		
		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
			$suffix_uri .= "&warehouse=".$warehouse ;
        }else{
			$warehouse = 0;
        } 
		if ($this->input->get('category')) {
            $category = $this->input->get('category');
			$suffix_uri .= "&category=".$category ;
        }else{
				$category = 0;
        } 
		if ($this->input->get('in_out')) {
            $in_out = $this->input->get('in_out');
			$suffix_uri .= "&in_out=".$in_out ;
        }else{
				$in_out = 'all';
        } 
		if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
			$suffix_uri .= "&biller=".$biller ;
        }else{
				$biller = null;
        } 
		$row_nums = $this->reports_model->getStockINOUTNUM($product,$category,$in_out,$year,$month,$warehouse,$wid,$biller);
		
		$config = array();
		$config['suffix'] = "?v=1".$suffix_uri;
		$uri = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["base_url"] = site_url("reports/product_dailyinout/") ;
		$config["total_rows"] = $row_nums;
		$config["ob_set"] = $uri;
        $config["per_page"] =20; 
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '</li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '</li>';
		$config['cur_tag_open'] = '<li class="active"><a>';
		$config['cur_tag_close'] = '</a></li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '</li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '</li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		 $this->data['categories'] = $this->site->getAllCategories();

		$d=cal_days_in_month(CAL_GREGORIAN,$month,$year);
		
		$this->data['days'] = $d;
		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links();  
		
		$this->data['stocks']    = $this->reports_model->getStockINOUT($product,$category,$warehouse,$wid,$in_out,$year,$month,$config['per_page'],$config["ob_set"],$biller);
		$this->data['warefull'] = $this->reports_model->getWareFullByUSER($wid);
		$this->data['category2']    = $category;
		$this->data['year2']    = $year;
		$this->data['month2'] 	  	= $month;
		$this->data['warehouse2'] 	  	= $warehouse;
		$this->data['wid2'] 	  	= $wid;
		$this->data['in_out2'] 	  	= $in_out;
		$this->data['biller2'] 	  	= $biller;
		$this->data['product2'] 	  	= $product;
		$this->data['products']     = $this->reports_model->getAllProducts();
		//Convert value pass to excel export
        if($product == null){
            $this->data['product1'] = 0;
        }else{
            $this->data['product1'] = $product;
        }
		 if($biller == null){
            $this->data['biller1'] = 0;
        }else{
            $this->data['biller1'] = $biller;
        }
        if($warehouse == null){
            $this->data['warehouse1'] = 0;
        }else{
            $this->data['warehouse1'] = $warehouse;
        }
        if($category == null){
            $this->data['category1'] = 0;
        }else{
            $this->data['category1'] = $category;
        }
		if($wid == null){
			$this->data['wid1'] = 0;
		}else{
			$this->data['wid1'] = $wid;
		}
		$this->data['billers']     = $this->reports_model->getAllBillers();
		$this->data['biller_idd'] = $this->reports_model->getBiilerByUserID();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('daily_products'), 'bc' => $bc);
        $this->page_construct('reports/product_dailyinout', $meta, $this->data);
    }
	
	function productDailyInOutReport($pdf,$excel,$product,$month,$year,$wid,$warehouse,$category,$in_out,$biller){
        if($pdf || $excel){
            // $wid = $this->reports_model->getWareByUserID();
            // echo $product.'<br>';
            // echo $month.'<br>';
            // echo $year.'<br>';
            // echo $wid.'<br>';
            // echo $warehouse.'<br>';
            // echo $category.'<br>';
            // echo $in_out;exit();
            $alphabet1 = array('B1','C1','D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1','AA1','AB1','AC1','AD1','AE1','AF1','AG1');
            $alphabet2 = array('B','C','D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z','AA','AB','AC','AD','AE','AF','AG');
            // Header
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('daily_products'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
            $this->excel->getActiveSheet()->getStyle('A')->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle('A')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

            $days = cal_days_in_month(CAL_GREGORIAN,$month,$year);
            for($i=1;$i<=$days;$i++){
                $this->excel->getActiveSheet()->SetCellValue($alphabet1[$i], $i);
                //$this->excel->getActiveSheet()->getColumnDimension($alphabet2[$i])->setWidth(15);
                $this->excel->getActiveSheet()->getStyle($alphabet1[$i])->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle($alphabet1[$i])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            }
           
           
            //End head
            //Content
            $total = array();
            $stocks = $this->reports_model->getStockINOUTS($product,$category,$warehouse,$wid,$in_out,$year,$month,$biller);
            $r = 2;
            foreach($stocks as $row){
                $this->excel->getActiveSheet()->SetCellValue('A'.$r, $row->code?$row->code:'ID:'.$row->product_id);
                $this->excel->getActiveSheet()->SetCellValue('B'.$r, $row->name);

                $am = 0;
                $st = 0;             
                for($i=1;$i<=$days;$i++){   
                    $this->db->select("SUM(COALESCE((-1)*quantity_balance,0)) AS outt")
                    ->join("products","products.id=purchase_items.product_id","LEFT")
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%Y-%m')=",$row->dater)
                    ->where("purchase_items.product_id",$row->product_id)
                    ->where("quantity_balance<",0);
                    if($warehouse){
                         $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid){
                             $this->db->where("erp_purchase_items.warehouse_id IN ($wid)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $this->db->where("DATE_FORMAT(erp_purchase_items.date, '%d')=",$i);
                    $q = $this->db->get("purchase_items")->row();
                    $this->db->select("SUM(COALESCE(quantity_balance,0)) AS inn")
                    ->join("products","products.id=purchase_items.product_id","LEFT")
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%Y-%m')=",$row->dater)
                    ->where("purchase_items.product_id",$row->product_id)
                    ->where("quantity_balance>",0)
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%d')=",$i);
                    if($warehouse){
                        $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid){
                            $this->db->where("erp_purchase_items.warehouse_id IN ($wid)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $q2 = $this->db->get("purchase_items")->row();
                    $this->db->select("SUM(COALESCE((-1)*quantity_balance,0)) AS outt,erp_product_variants.name as uname,erp_product_variants.qty_unit,option_id")
                    ->join("products","products.id=purchase_items.product_id","LEFT")
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->join("erp_product_variants","erp_product_variants.id=purchase_items.option_id","LEFT")
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%Y-%m')=",$row->dater)
                    ->where("purchase_items.product_id",$row->product_id)
                    ->where("quantity_balance<",0);
                    if($warehouse){
                        $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid){
                            $this->db->where("erp_purchase_items.warehouse_id IN ($wid)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $this->db->group_by("option_id");
                    $this->db->where("DATE_FORMAT(erp_purchase_items.date, '%d')=",$i);
                    $q_unit = $this->db->get("purchase_items")->result();
                    $this->db->select("SUM(COALESCE(quantity_balance,0)) AS inn,erp_product_variants.name as uname,erp_product_variants.qty_unit,option_id")
                    ->join("products","products.id=purchase_items.product_id","LEFT")
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->join("erp_product_variants","erp_product_variants.id=purchase_items.option_id","LEFT")
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%Y-%m')=",$row->dater)
                    ->where("purchase_items.product_id",$row->product_id)
                    ->where("quantity_balance>",0);
                    if($warehouse){
                        $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid){
                            $this->db->where("erp_purchase_items.warehouse_id IN ($wid)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $this->db->group_by("option_id");
                    $this->db->where("DATE_FORMAT(erp_purchase_items.date, '%d')=",$i);
                    $q_unit2 = $this->db->get("purchase_items")->result();     
                    $this->db->select("SUM(COALESCE(quantity_balance,0)) AS inou,erp_product_variants.name as uname,erp_product_variants.qty_unit,option_id")
                    ->join("products","products.id=purchase_items.product_id","LEFT")
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->join("erp_product_variants","erp_product_variants.id=purchase_items.option_id","LEFT")
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%Y-%m')=",$row->dater)
                    ->where("purchase_items.product_id",$row->product_id);
                    if($warehouse){
                        $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid){
                            $this->db->where("erp_purchase_items.warehouse_id IN ($wid)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $this->db->group_by("option_id");
                    $this->db->where("DATE_FORMAT(erp_purchase_items.date, '%d')=",$i);
                    $q_unit3 = $this->db->get("purchase_items")->result();
                    $am = $q2->inn - $q->outt;
                    if($in_out == "all"){  
                        if($q2->inn || $q->outt){
                            if($am){
                                $this->excel->getActiveSheet()->SetCellValue($alphabet2[$i].$r, $this->erp->formatDecimal($am));
                            }
                            //$total[$i] +=$am;   
                        }                     
                    }else if($in_out == "in"){
                        if($q2->inn){
                            if($q2->inn){
                                $this->excel->getActiveSheet()->SetCellValue($alphabet2[$i].$r, $this->erp->formatDecimal($q2->inn));
                            }
                            //$total[$i] +=$q2->inn;
                        }
                    }else{
                        if($q->outt){
                            if($q->outt){
                                $this->excel->getActiveSheet()->SetCellValue($alphabet2[$i].$r, $this->erp->formatDecimal($q->outt));
                            }
                            //$total[$i] +=$q->outt;
                        }
                    }
                    $st++;
                }
                $r++;
            }
            //Total :
            // $this->excel->getActiveSheet()->SetCellValue('A'.$r, lang('total').": ");
            // $this->excel->getActiveSheet()->mergeCells('A'.$r.':B'.$r);
            // $this->excel->getActiveSheet()->getStyle('A'.$r)->getFont()->setBold(true);
            // $this->excel->getActiveSheet()->getStyle('A'.$r)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

            // for($i=1;$i<=$days;$i++){
                // if($total[$i]){
                    // $this->excel->getActiveSheet()->SetCellValue($alphabet2[$i].$r, $this->erp->formatDecimal($total[$i]));
                    // $this->excel->getActiveSheet()->getStyle($alphabet2[$i].$r)->getFont()->setBold(true);
                // }
                // $this->excel->getActiveSheet()->getStyle($alphabet2[1].$r.':'.$alphabet2[$i].$r)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            // }
           
            //$r++;
            //set colspan
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);

            $filename = lang('product_daily_inout'). date('Y_m_d_H_i_s');
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            if ($pdf) {
                $styleArray = array(
                    'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                );
                $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($excel) {
                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');
                
    
                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
        }
    }
	
	function product_monthlyinout()
    {
		$this->load->library("pagination");
		
		$suffix_uri = "";
		
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
			$suffix_uri .= "&product=".$product ;	
        }else{
			 $product = null;
        } 
       
        if ($this->input->get('year')) {
            $year = $this->input->get('year');
			$suffix_uri .= "&year=".$year ;
        }else{
				$year = date('Y');
        }
		if ($this->input->get('category')) {
            $category = $this->input->get('category');
			$suffix_uri .= "&category=".$category ;
        }else{
				$category = null;
        } 
		$wid = $this->reports_model->getWareByUserID();

		if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
			$suffix_uri .= "&warehouse=".$warehouse ;
        }else{
			$warehouse = null;
        } 
		if ($this->input->get('in_out')) {
            $in_out = $this->input->get('in_out');
			$suffix_uri .= "&in_out=".$in_out ;
        }else{
				$in_out = 'all';
        } 
		if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
			$suffix_uri .= "&biller=".$biller ;
        }else{
				$biller = null;
        } 
		$row_nums = $this->reports_model->getStockINOUTNUMM($product,$category,$in_out,$year,$warehouse,$wid,$biller);
		
		$config = array();
		$config['suffix'] = "?v=1".$suffix_uri;
		$uri = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["base_url"] = site_url("reports/product_monthlyinout/") ;
		$config["total_rows"] = $row_nums;
		$config["ob_set"] = $uri;
        $config["per_page"] =20; 
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '</li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '</li>';
		$config['cur_tag_open'] = '<li class="active"><a>';
		$config['cur_tag_close'] = '</a></li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '</li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '</li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		$this->data['categories'] = $this->site->getAllCategories();

		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links();  
		
		$this->data['stocks']    = $this->reports_model->getStockINOUTM($product,$category,$warehouse,$wid,$in_out,$year,$config['per_page'],$config["ob_set"],$biller);
		$this->data['warefull'] = $this->reports_model->getWareFullByUSER($wid);
		$this->data['category2']    = $category;
		$this->data['year2']    = $year;
		$this->data['biller2']    = $biller;
		$this->data['in_out2'] 	  	= $in_out;
		$this->data['product2'] 	  	= $product;
		$this->data['warehouse2'] 	  	= $warehouse;
		$this->data['wid2'] 	  	= $wid;
		$this->data['products']     = $this->reports_model->getAllProducts();
		if ($product == null) {
            $this->data['product1'] = 0; 
        }else{
             $this->data['product1'] = $product;
        } 
       if ($biller == null) {
            $this->data['biller1'] = 0; 
        }else{
             $this->data['biller1'] = $biller;
        } 
        if ($year == null) {
            $this->data['year1'] = 0;
        }else{
            $this->data['year1'] = $year;
        }
        if ($category == null) {
            $this->data['category1'] = 0;
        }else{
            $this->data['category1'] = $category;
        } 
        if ($warehouse == null) {
            $this->data['warehouse1'] = 0;
        }else{
            $this->data['warehouse1'] = $warehouse;
        }
		if($wid == null){
			$this->data['wid1'] = 0;
		}else{
			$this->data['wid1'] = $wid;
		}
		$this->data['billers']     = $this->reports_model->getAllBillers();
		$this->data['biller_idd'] = $this->reports_model->getBiilerByUserID();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('monthly_products'), 'bc' => $bc);
        $this->page_construct('reports/product_monthlyinout', $meta, $this->data);
    }
	
	function productMonthlyInOutReport($pdf,$excel,$product,$year,$category,$warehouse,$in_out,$wid2,$biller){
        if($excel || $pdf){
            if($product == 0){
                $product == null;
            }
            if($category == 0){
                $category == null;
            }
            if($warehouse == 0){
                $warehouse == null;
            }
			 if($wid2 == 0){
                $wid2 == null;
            }
            // echo $product.'<br>';
            // echo $year.'<br>';
            // echo $category.'<br>';
            // echo $warehouse.'<br>';
            // echo $in_out.'<br>';exit();
            $months = array(
                '01' => 'January',
                '02' => 'February',
                '03' => 'March',
                '04' => 'April',
                '05' => 'May',
                '06' => 'June',
                '07' => 'July',
                '08' => 'August',
                '09' => 'September',
                '10' => 'October',
                '11' => 'November',
                '12' => 'December',
            );
            $alphabet = array('C1','D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'N1', 'O1', 'P1', 'Q1', 'R1', 'S1', 'T1', 'U1', 'V1', 'W1', 'X1', 'Y1', 'Z1');
            $alphabet1 = array('C','D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            // $warefull = $this->reports_model->getWareFullByUSER($wid);
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('monthly_products'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
            
            $i = 0;
            foreach ($months as $k => $v) {
                $this->excel->getActiveSheet()->SetCellValue($alphabet[$i], $v);
				$this->excel->getActiveSheet()->getColumnDimension($alphabet1[$i])->setWidth(15);
				$i++;
                $j = $i;
            }
            $this->excel->getActiveSheet()->getStyle('A1'.':'.$alphabet[$j])->getFont()->setBold(true);
            $this->excel->getActiveSheet()->getStyle('A1'.':'.$alphabet[$j])->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $total = array();
            $r = 2;
            $wid = $this->reports_model->getWareByUserID();
            $stocks = $this->reports_model->getStockINOUTMS($product,$category,$warehouse,$wid,$in_out,$year,$biller);
            
            foreach($stocks as $row){
                $this->excel->getActiveSheet()->SetCellValue('A'.$r, $row->code?$row->code." ":'ID:'.$row->product_id." ");
                $this->excel->getActiveSheet()->SetCellValue('B'.$r, $row->name);
                $am = 0;
                $st = 0;
                foreach ($months as $k => $v) {
                    $this->db->select("SUM(COALESCE((-1)*quantity_balance,0)) AS outt")
                    ->join("products","products.id=purchase_items.product_id","LEFT")   
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->where("purchase_items.product_id",$row->product_id)
                    ->where("quantity_balance<",0)
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%m')=",$k);
                    if($warehouse){
                        $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid2){
                            $this->db->where("erp_purchase_items.warehouse_id IN ($wid2)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $q = $this->db->get("purchase_items")->row();
                    
                    $this->db->select("SUM(COALESCE(quantity_balance,0)) AS inn")
                    ->join("products","products.id=purchase_items.product_id","LEFT")
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->where("purchase_items.product_id",$row->product_id)
                    ->where("quantity_balance>",0)
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%m')=",$k);
                    if($warehouse){
                        $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid2){
                            $this->db->where("erp_purchase_items.warehouse_id IN ($wid2)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $q2 = $this->db->get("purchase_items")->row();
                    
                    $this->db->select("SUM(COALESCE(quantity_balance,0)) AS inn,erp_product_variants.name as uname,erp_product_variants.qty_unit,option_id")
                    ->join("products","products.id=purchase_items.product_id","LEFT")
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->join("erp_product_variants","erp_product_variants.id=purchase_items.option_id","LEFT")
                    ->where("purchase_items.product_id",$row->product_id)
                    ->where("quantity_balance>",0)
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%m')=",$k);
                    if($warehouse){
                        $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid2){
                            $this->db->where("erp_purchase_items.warehouse_id IN ($wid2)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $this->db->group_by("option_id");
                    $q_unit_in = $this->db->get("purchase_items")->result();
                    
                    $this->db->select("SUM(COALESCE((-1)*quantity_balance,0)) AS outt,erp_product_variants.name as uname,erp_product_variants.qty_unit,option_id")
                    ->join("products","products.id=purchase_items.product_id","LEFT")
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->join("erp_product_variants","erp_product_variants.id=purchase_items.option_id","LEFT")
                    ->where("purchase_items.product_id",$row->product_id)
                    ->where("quantity_balance<",0)
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%m')=",$k);
                    if($warehouse){
                        $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid2){
                            $this->db->where("erp_purchase_items.warehouse_id IN ($wid2)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $this->db->group_by("option_id");
                    $q_unit_out = $this->db->get("purchase_items")->result();
                    
                    $this->db->select("SUM(COALESCE(quantity_balance,0)) AS inou,erp_product_variants.name as uname,erp_product_variants.qty_unit,option_id")
                    ->join("products","products.id=purchase_items.product_id","LEFT")
					->join("erp_purchases","erp_purchases.id=purchase_items.purchase_id","LEFT")
                    ->join("erp_product_variants","erp_product_variants.id=purchase_items.option_id","LEFT")
                    ->where("purchase_items.product_id",$row->product_id)
                    ->where("DATE_FORMAT(erp_purchase_items.date, '%m')=",$k);
                    if($warehouse){
                        $this->db->where("erp_purchase_items.warehouse_id",$warehouse);
                    }else{      
                        if($wid2){
                            $this->db->where("erp_purchase_items.warehouse_id IN ($wid2)");
                        }
                    }
					if($biller){
						$this->db->where("erp_purchases.biller_id",$biller);
					}
                    $this->db->group_by("option_id");
                    $q_unit = $this->db->get("purchase_items")->result(); 
                    $am = $q2->inn - $q->outt;
                    if($in_out == "all"){

                        if($q2->inn || $q->outt){
                            if($am){
                                $this->excel->getActiveSheet()->SetCellValue($alphabet1[$st].$r, $this->erp->formatDecimal($am));
                            }
                            //$total[$k] +=$am;
                        }else{
                        }
                    }else if($in_out == "in"){
                        if($q2->inn){
                            if($q2->inn){
                                $this->excel->getActiveSheet()->SetCellValue($alphabet1[$st].$r, $this->erp->formatDecimal($q2->inn));
                            }
                           // $total[$k] +=$q2->inn;
                        }else{
                        }
                    }else{
                        if($q->outt){
                            if($q->outt){
                                $this->excel->getActiveSheet()->SetCellValue($alphabet1[$st].$r, $this->erp->formatDecimal($q->outt));
                            }
                           // $total[$k] +=$q->outt;
                        }else{
                        }
                    }
                    $st++;
					$b = $st;
					
                }
                $r++;

            }

            //Total :
            // $this->excel->getActiveSheet()->SetCellValue('A'.$r, lang('total').": ");
            // $this->excel->getActiveSheet()->mergeCells('A'.$r.':B'.$r);
            // $this->excel->getActiveSheet()->getStyle('A'.$r)->getFont()->setBold(true);
            // $this->excel->getActiveSheet()->getStyle('A'.$r)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
			// $this->excel->getActiveSheet()->getStyle($alphabet1[0].$r. ':'.$alphabet1[$st].$r)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            //Total value each month
            // $st = 0;
            // foreach ($months as $k => $v) {
                // if ($total[$k]) {
                    // $this->excel->getActiveSheet()->SetCellValue($alphabet1[$st].$r, $this->erp->formatDecimal($total[$k]));
                // }
                // $st++;
            // }
            // $r++;
            //set colspan
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);

            $filename = lang('monthly_products'). date('Y_m_d_H_i_s');
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            if ($pdf) {
                $styleArray = array(
                    'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                );
                $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                $objWriter->save('php://output');
                exit();
            }
            if ($excel) {
                ob_clean();
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');
                
                ob_clean();
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                $objWriter->save('php://output');
                exit();
            }
        }
    }
	
	function expense_report()
    {
		$this->load->library("pagination");
		$str = "";
		$datt =$this->reports_model->getLastDate("expenses","date");
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
			$str .="&reference_no=".$reference_no;
        }else{
			$reference_no = null;
        }    
		
		if ($this->input->get('from_date')) {
            $from_date =$this->erp->fsd($this->input->get('from_date'));
			$str .="&from_date=".$from_date;
        }else{
			$from_date = $datt;
        } 
		if ($this->input->get('to_date')) {
            $to_date = $this->erp->fsd($this->input->get('to_date'));
			$str .="&to_date=".$to_date;
        }else{
			$to_date = $datt;
        } 
		$row_nums = $this->reports_model->getCatExpenseReportNUM($reference_no,$from_date,$to_date);
		$n = "";
		$num = $this->input->get("str");
		$this->data['num'] = $num;
		if($num == "all"){
			$n = "null";
		}else{
			$n = 5;
		}
		
		$config = array();
		$config['suffix'] = "?v=1".$str;
		$uri = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["base_url"] = site_url("reports/expense_report/") ;
		$config["total_rows"] = $row_nums;
		$config["ob_set"] = $uri;
        $config["per_page"] =$n; 
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination pagination-sm">';
		$config['full_tag_close'] = '</ul>';
		$config['next_tag_open'] = '<li class="next">';
		$config['next_tag_close'] = '</li>';
		$config['prev_tag_open'] = '<li class="prev">';
		$config['prev_tag_close'] = '</li>';
		$config['cur_tag_open'] = '<li class="active"><a>';
		$config['cur_tag_close'] = '</a></li>';
		$config['first_tag_open'] = '<li>';
		$config['first_tag_close'] = '</li>';
		$config['last_tag_open'] = '<li>';
		$config['last_tag_close'] = '</li>';
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		$this->pagination->initialize($config);
		$this->data["pagination"] = $this->pagination->create_links();  
		//$wid = $this->reports_model->getWareByUserID();
		$this->data['expense_cat'] = $this->reports_model->getCatExpenseReport($reference_no,$from_date,$to_date,$config['per_page'],$config["ob_set"]);
        // $this->erp->print_arrays($wid);
		//$this->data['warefull'] = $this->reports_model->getWareFullByUSER($wid);
		$this->data['reference_no2']    = $reference_no;
		$this->data['from_date2']    = $from_date;
		$this->data['to_date2'] 	  	= $to_date;

        if($reference_no == null){
            $this->data['reference_no1'] = 0;
        }else{
            $this->data['reference_no1'] = $reference_no;
        }
		if($from_date == null){
            $this->data['from_date1'] = 0;
        }else{
            $this->data['from_date1'] = $this->erp->hrld($from_date);
        }
        if($to_date == null){
            $this->data['to_date1'] = 0;
        }else{
            $this->data['to_date1'] = $this->erp->hrld($to_date);
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('expense_report'), 'bc' => $bc);
        $this->page_construct('reports/expense_report', $meta, $this->data);
    }
	
	public function expenseReport_action(){
		if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
            if ($_POST['val']) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('expense'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('created_by'));
                $this->excel->getActiveSheet()->getStyle('A1:E1')->getFont()->setBold(true);
                $this->excel->getActiveSheet()->getStyle('A1:E1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
				$i = 2;
				foreach($_POST['val'] as $code){
					$expense = $this->reports_model->getCatExpenseReports($code);
					foreach($expense as $cat){
						$this->db->select($this->db->dbprefix('expenses') . ".id as id, expenses.date, expenses.reference  ,expenses.amount ,expenses.note, CONCAT(" . $this->db->dbprefix('users') . ".first_name, ' ', " . $this->db->dbprefix('users') . ".last_name) as user,expenses.account_code", false)
						->from('expenses')
						->join('users', 'users.id=expenses.created_by', 'left');
						$q = $this->db->get();
					
						if($q->num_rows()>0){
							$this->excel->getActiveSheet()->SetCellValue('A' . $i, lang('category_expense')." >> ".$cat->account_code." / ".$cat->narrative);
							$this->excel->getActiveSheet()->getStyle('A' . $i)->getFont()->setBold(true);
							$this->excel->getActiveSheet()->mergeCells('A' . $i.':E'.$i);
							
							$total = 0;
							$i++;
							foreach($q->result() as $row){ 
								if($row->account_code == $cat->account_code){
									$this->excel->getActiveSheet()->SetCellValue('A' . $i, $this->erp->hrld($row->date));
									$this->excel->getActiveSheet()->SetCellValue('B' . $i, $row->reference);
									$this->excel->getActiveSheet()->SetCellValue('C' . $i, $this->erp->formatDecimal($row->amount));
									$this->excel->getActiveSheet()->SetCellValue('D' . $i, strip_tags($row->note));
									$this->excel->getActiveSheet()->SetCellValue('E' . $i, $row->user);
									$this->excel->getActiveSheet()->getStyle('A'.$i.':B'.$i)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
									$this->excel->getActiveSheet()->getStyle('E'.$i)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
									$total  +=$row->amount;
									// $a = $i+1;
									$i++;
								}
								
							}
							$this->excel->getActiveSheet()->SetCellValue('B' . $i, lang('total').":");
							$this->excel->getActiveSheet()->SetCellValue('C' . $i, $this->erp->formatDecimal($total));
							$this->excel->getActiveSheet()->getStyle('B' . $i.':C'. $i)->getFont()->setBold(true);
							$this->excel->getActiveSheet()->getStyle('B' . $i)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
							$i++;
							
						}
						
					}
					
				}
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
				
                $filename = lang('expense_report'). date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($this->input->post('form_action') == 'export_pdf') {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
             }else {
                $this->session->set_flashdata('error', $this->lang->line("no_supplier_selected. Please select at least one."));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        }
	}
	
	function report_sale_top($biller_id = NULL)
    {
        $this->erp->checkPermissions('report_sale',NULL,'sale_report');
		
		$user = $this->site->getUser();
		if($biller_id != NULL){
			$this->data['biller_id'] = $biller_id;
		}else{
			if($user->biller_id){
				$this->data['biller_id'] = $user->biller_id;
			}else{
				$this->data['biller_id'] = "";
			}
		}
		if(!$this->Owner && !$this->Admin) {
			if($user->biller_id){
				$this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
			}else{
				$this->data['billers'] = $this->site->getAllCompanies('biller');
			}
		}else{
			$this->data['billers'] = $this->site->getAllCompanies('biller');
		}
		$this->data['products'] = $this->site->getProducts();
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
		$this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
		$this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_report')));
        $meta = array('page_title' => lang('sales_report'), 'bc' => $bc);
        $this->page_construct('reports/report_sale_top', $meta, $this->data);
    }

    function getSaleTop()
    {
		if($this->input->get('product')){
			$product = $this->input->get('product');
		}else{
			$product = null;
		}
		if($this->input->get('category')){
			$category = $this->input->get('category');
		}else{
			$category = null;
		}
        if ($this->input->get('biller')) {
            $biller_id = $this->input->get('biller');
        } else {
            $biller_id = NULL;
        }

		if($this->input->get('start_date')){
			$start_date = $this->erp->fld($this->input->get('start_date'));
		}else{
			$start_date = null;
		}   
		if($this->input->get('end_date')){
			$end_date = $this->erp->fld($this->input->get('end_date'));
		}else{
			$end_date = null;
		}  
		
		$this->load->library('datatables');
		$this->datatables
			->select("
			erp_sale_items.product_id,
			erp_products.image, 
			erp_sales.date,
			sale_items.product_code, 
			sale_items.product_name, 
			erp_categories.name as category,  
			if(erp_sale_items.option_id, erp_product_variants.name,erp_units.name) AS NAME,
            SUM(COALESCE(erp_sale_items.quantity,0)) as quantity,
            IF (erp_sale_items.option_id,( (erp_sale_items.unit_cost * erp_product_variants.qty_unit) * SUM(COALESCE (erp_sale_items.quantity, 0)) ), (erp_sale_items.unit_cost * SUM(COALESCE (erp_sale_items.quantity, 0)))) AS cost_amount,
            SUM(erp_sale_items.unit_price * (COALESCE(erp_sale_items.quantity,0))) as price_amount,
            (SUM(erp_sale_items.unit_price * (COALESCE(erp_sale_items.quantity,0)))) - (IF (erp_sale_items.option_id,((erp_sale_items.unit_cost * erp_product_variants.qty_unit) * SUM(COALESCE (erp_sale_items.quantity, 0))),(erp_sale_items.unit_cost * SUM(COALESCE (erp_sale_items.quantity, 0)))))", FALSE )
			->from('erp_sale_items') 
			->join('erp_sales','erp_sales.id=erp_sale_items.sale_id','left')
			->join('erp_products','erp_products.id=erp_sale_items.product_id','left')
			->join('erp_categories','erp_categories.id=erp_products.category_id','left')
            ->join('erp_units','erp_units.id=erp_products.unit','left')
			->join('erp_product_variants','erp_sale_items.option_id = erp_product_variants.id','left')
			->group_by('erp_sale_items.product_id')
			->order_by('quantity','DESC'); 
        if($product){
	       $this->datatables->where('erp_sale_items.product_id', $product);                
        }			
		if($category){
		   $this->datatables->where('erp_products.category_id', $category); 
		}
        if ($biller_id) {
            $this->datatables->where('erp_sales.biller_id', $biller_id);
        }
		if ($start_date) {
           $this->datatables->where("DATE_FORMAT(erp_sales.date,'%Y-%m-%d') >='{$start_date}' AND DATE_FORMAT(erp_sales.date,'%Y-%m-%d') <= '{$end_date}'");
        }
		echo $this->datatables->generate(); 		
	}
	
	function sale_top_action()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('report_top_sale'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('category'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('quantity')); 
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('unit'));

                    $row = 2;
					$total_qty = 0;
					$total = 0;
					$paid = 0;
					$balance = 0;
					$total_cost = 0;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getsale_top_export($id); 
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->product_code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->product_name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->category);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->quantity); 
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->name); 
                        $row++;
						$total_qty+=$sc->quantity;
                    }
					$this->excel->getActiveSheet()->getStyle('A')->getAlignment()->applyFromArray(
						array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,)
					);
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, lang('grand_total'));
                    $this->excel->getActiveSheet()->mergeCells("A".($row).":C".($row)); 
					$this->excel->getActiveSheet()->SetCellValue('D' . $row,$total_qty);

                //set font bold,font color,font size,font name and background color to excel  by dara
                    $styleArrays = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 10,
                            'name'  => 'Verdana'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428BCA')
                        )
                    );
                    
                    $this->excel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($styleArrays);
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
				
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'sales_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
						$styleArray = array(
							'borders' => array(
								'allborders' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN
								)
							)
						);
						$this->excel->getDefaultStyle()->applyFromArray($styleArray);
						   
						$this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
						$this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
						$this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
							 'wrap'       => true
						 ));
						 $this->excel->getActiveSheet()->getStyle('G2:G' . $row)->getAlignment()->applyFromArray(
						 array(
							 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
							 'wrap'       => true
						 ));
						ob_clean();
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            }else {
                $this->session->set_flashdata('error', lang("No_sales_report_selected. Please select at least one."));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	public function track_costs()
	{
		$this->data['products'] = $this->site->getProducts();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('track_costs'), 'bc' => $bc);
        $this->page_construct('reports/track_costs', $meta, $this->data);
	}
	
	function getTrackCost()
    {
        $this->erp->checkPermissions();
		if ($this->input->get('product_id')) {
            $product_id = $this->input->get('product_id');
        } else {
            $product_id = NULL;
        }
		if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        $this->load->library('datatables');
        $this->datatables
                ->select("sale_items.id, date, reference_no, product_code, product_name, unit_cost, quantity")
                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'left');
				
		if ($reference_no) {
			$this->datatables->where('sales.reference_no', $reference_no);
		}
		if ($product_id) {
			$this->datatables->where('product_id', $product_id);
		}
		
        echo $this->datatables->generate();
    }
	
	function getPurchasedReport5()
	{	
		//$datt =$this->reports_model->getLastDate("erp_purchases","date");
		if ($this->input->get('supplier')) {
            $supplier_id = $this->input->get('supplier');
        } else {
            $supplier_id = NULL;
        }
		if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
		if ($this->input->get('discription')) {
            $discription = $this->input->get('discription');
        } else {
            $discription = NULL;
        }
		if ($this->input->get('start_date2')) {
            $start_date = $this->erp->fsd($this->input->get('start_date2'));
        } else {
            $start_date = NULL;
        }
      
		if ($this->input->get('end_date2')) {
            $end_date = $this->erp->fsd($this->input->get('end_date2'));
        } else {
            $end_date=NULL;
        }

        $user_id = $this->session->userdata('user_id');
        $user_biller_id = $this->session->userdata('biller_id');
        
        $this->load->library('datatables');
            $this->datatables
            ->select("erp_purchases.id as idd, date,
            reference_no,
            note,
            grand_total
            ", false)
            ->from("erp_purchases")
            ->where('type_of_po = "exp"');
        
            if($supplier_id){
                $this->datatables->where('erp_purchases.supplier_id',$supplier_id);
            }

            if($user_biller_id != NULL){
                $this->db->where('erp_purchases.biller_id', $user_biller_id);
            }

			if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
				if ($user_id) {
					$this->datatables->where('erp_purchases.created_by', $user_id);
				}
			}

			if($reference_no){
				$this->datatables->where('erp_purchases.reference_no',$reference_no);
			}
			if($discription){
				//$this->datatables->where('erp_purchases.note',$discription);
			}
			if($start_date && $end_date){
				$this->datatables->where('date_format(erp_purchases.date,"%Y-%m-%d") BETWEEN "'.$start_date.'" AND "'.$end_date.'"');
			}
			echo $this->datatables->generate();
	}
	
	function sale_payment_report()
	{
		$start_date = $this->input->post('start_date');
		$end_date 	= $this->input->post('end_date');
		if ($start_date) {
			$s_date = $this->erp->fld($start_date);
			$e_date	= $this->erp->fld($end_date);
		} else {
			$s_date = null;
			$e_date	= null;
		}
		
		$this->data['sale_invoice'] = $this->reports_model->getSalePaidInvoice($s_date, $e_date);
		
		$bc 	= array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta 	= array('page_title' => lang('sale_payment_report'), 'bc' => $bc);
        $this->page_construct('reports/sale_payment_report', $meta, $this->data);
	}
	
	function sale_payment_report_actions()
	{
		$this->form_validation->set_rules('form_action', lang("form_action"), 'required');
		 
        if ($this->form_validation->run() == true) {
			
            if (!empty($_POST['val'])) {
                
                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
					
					$this->load->library('excel');
					$this->excel->setActiveSheetIndex(0);
					$this->excel->getActiveSheet()->setTitle(lang('sale_payment_report'));
					
					$f = 1;
					$r = 0;
					foreach ($_POST['val'] as $id) {
						
						$this->excel->getActiveSheet()->SetCellValue('A'.$f, lang('date'));
						$this->excel->getActiveSheet()->SetCellValue('B'.$f, lang('reference_no'));
						$this->excel->getActiveSheet()->SetCellValue('C'.$f, lang('project'));
						$this->excel->getActiveSheet()->SetCellValue('D'.$f, lang('group_area'));
						$this->excel->getActiveSheet()->SetCellValue('E'.$f, lang('customer'));
						$this->excel->getActiveSheet()->SetCellValue('F'.$f, lang('saleman'));
						$this->excel->getActiveSheet()->mergeCells('G'.$f.':H'.$f)->setCellValue('G'.$f , lang('amount'));
						
						$f = ($f+1); 
						$sp = $this->reports_model->getSalePaidInvoiceById($id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $f, $this->erp->hrsd($sp->date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $f, $sp->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $f, $sp->biller);
						$this->excel->getActiveSheet()->SetCellValue('D' . $f, $sp->areas_group);
						$this->excel->getActiveSheet()->SetCellValue('E' . $f, $sp->customer);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $f, $sp->saleman);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $f, $sp->grand_total);
						$this->excel->getActiveSheet()->mergeCells('G'.$f.':H'.$f)->setCellValue('G'.$f , $sp->grand_total);
						
						$pi = $this->reports_model->getPaidInvoice($id);
						$r = ($f+1); 
						$this->excel->getActiveSheet()->SetCellValue('B'.$r, lang('date'));
						$this->excel->getActiveSheet()->SetCellValue('C'.$r, lang('reference_no'));
						$this->excel->getActiveSheet()->SetCellValue('D'.$r, lang('project'));
						$this->excel->getActiveSheet()->SetCellValue('E'.$r, lang('amount'));
						$this->excel->getActiveSheet()->SetCellValue('F'.$r, lang('paid_by'));
						$this->excel->getActiveSheet()->SetCellValue('G'.$r, lang('created_by'));
						$this->excel->getActiveSheet()->SetCellValue('H'.$r, lang('status'));
						$amount 	= 0;
						$total_amt 	= 0;
						foreach ($pi as $gpi) {
							if ($gpi->type == 'returned') {
								$amount = (-1) * $gpi->amount;
							} else {
								$amount = $gpi->amount;
							}
							$this->excel->getActiveSheet()->SetCellValue('B'.$r, $this->erp->hrsd($gpi->date));
							$this->excel->getActiveSheet()->SetCellValue('C'.$r, $gpi->reference_no);
							$this->excel->getActiveSheet()->SetCellValue('D'.$r, $gpi->company);
							$this->excel->getActiveSheet()->SetCellValue('E'.$r, $amount);
							$this->excel->getActiveSheet()->SetCellValue('F'.$r, $gpi->paid_by);
							$this->excel->getActiveSheet()->SetCellValue('G'.$r, $gpi->username);
							$this->excel->getActiveSheet()->SetCellValue('H'.$r, $gpi->type);
							$total_amt += $amount;
							$r++;
						}
						$this->excel->getActiveSheet()->mergeCells('B'.$r.':D'.$r)->setCellValue('B'.$r , lang('total'));
						$this->excel->getActiveSheet()->mergeCells('E'.$r.':H'.$r)->setCellValue('E'.$r , $total_amt);
						
						$f = $r;
						$f++;
					}
					
					$filename = 'sale_payment_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }
                   
                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_sale_payment_report_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } 
	
	}
	
}
     